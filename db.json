{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/categories/index.pdf","path":"categories/index.pdf","modified":0,"renderable":0}],"Cache":[{"_id":"source/categories/index.md","hash":"f71e2bbf346143a2b4f354ddbf3e268fb58de265","modified":1624630394501},{"_id":"source/categories/index_tmp.html","hash":"c0e050f424eb49a4e678fc98a8565210dcbc3575","modified":1624630395133},{"_id":"source/About-me/index.md","hash":"964a080d4c60b47acb2fc39fee02789c767eb23c","modified":1624618868740},{"_id":"source/tags/index_tmp.html","hash":"c0e050f424eb49a4e678fc98a8565210dcbc3575","modified":1624626895458},{"_id":"source/_posts/IDEApush到github被拒绝的问题.md","hash":"84b8b82d95c63ff4892701b3e47bc93b52133cce","modified":1624618868740},{"_id":"source/_posts/MaxMedian.md","hash":"a64b5b32776d126862f8b58b056b2e31d42e65c6","modified":1624618868740},{"_id":"source/_posts/Postons.md","hash":"9687128903e27f6272f97cde64694ba6819ca8c6","modified":1624618868750},{"_id":"source/tags/index.md","hash":"c702eaabc061bc587fae372634c7395c264db77c","modified":1624626894224},{"_id":"source/_posts/BestCowFences.md","hash":"15030ed855bb6c0962b64b8f38aff57d2bde48fe","modified":1624618868740},{"_id":"source/_posts/关于对floyd算法的质疑.md","hash":"febb4803470577943d85fb5e1f5e6e7904d74a82","modified":1624618868761},{"_id":"source/_posts/在O-logn-的复杂度下两数组的混合中位数.md","hash":"d1b313d0a4a3039edc7d01f85cec31790483807d","modified":1624618868761},{"_id":"source/_posts/USST题解报告.md","hash":"2bde5daaded952aa3d78cf8716f2d967004391cf","modified":1624618868761},{"_id":"source/_posts/sptingboot集成mybatis.md","hash":"793bf9cbfecda8f5300a20e4dc912d65120dbdbc","modified":1624618868761},{"_id":"source/_posts/数据备份.md","hash":"487f11652d9e3d6a846be211088c586e180f7a2b","modified":1624618868770},{"_id":"source/_posts/USST题解/M.png","hash":"fa97730a331a85a7e5e1055c0138e9d9767cd49b","modified":1624618868761},{"_id":"source/_posts/USST题解/M2.png","hash":"13dadca51a8f67b0b2fb83197f85d67a982f6fa2","modified":1624618868761},{"_id":"source/_posts/BestCowFences/BestCowFence.png","hash":"cba042a07e1eed0b0ddd78e61fe006647bed5323","modified":1624618868740},{"_id":"source/_posts/MaxMedian/MaxMedian.png","hash":"a51a9bbdc1ba4026d2073b0c4abe23ffdafb2f55","modified":1624618868750},{"_id":"themes/next/layout/_partials/footer.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624624140220},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1624619600730},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1624619600760},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1624619600730},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1624619600760},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1624619600730},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1624619600760},{"_id":"themes/next/_config.yml","hash":"30acec7b4531ba4b21f43a5175d54f9d5097ef21","modified":1624631025856},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1624619600760},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1624619600849},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1624619600760},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1624619600760},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1624619600784},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1624619600730},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1624619600744},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1624619600744},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1624619600752},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1624619600744},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1624619600752},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1624619600752},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1624619600738},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1624619600752},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1624619600752},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1624619600768},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1624619600752},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1624619600768},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1624619600768},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1624619600768},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1624619600768},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1624619600768},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1624619600784},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1624619600784},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1624619600768},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1624619600784},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1624619600768},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1624619600784},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1624619600784},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1624619600784},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1624619600784},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1624619600792},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1624619600792},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1624619600792},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1624619600792},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1624619600792},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1624619600792},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1624619600792},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1624619600792},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1624619600792},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1624619600792},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1624619600792},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1624619600792},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1624619600800},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1624619600792},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1624619600800},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1624619600792},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1624619600865},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1624619600768},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1624619600840},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1624619600848},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1624619600849},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1624619600849},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1624619600849},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1624619600849},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1624619600743},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1624619600744},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1624619600744},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1624619600738},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1624619600776},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1624619600776},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1624619600776},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1624619600776},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1624619600776},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1624619600776},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1624619600776},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1624619600784},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1624619600849},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1624619600776},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1624619600776},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1624619600857},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1624619600857},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1624619600865},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1624619600865},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1624619600865},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1624619600865},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1624619600865},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1624619600865},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1624619600784},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1624619600865},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1624619600865},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1624619600865},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1624619600784},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1624619600865},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1624619600784},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1624619600865},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1624619600873},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1624619600873},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1624619600873},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1624619600873},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1624619600873},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1624619600873},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1624619600800},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1624619600800},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1624619600800},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1624619600800},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1624619600808},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1624619600808},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1624619600816},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1624619600816},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1624619600816},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1624619600824},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1624619600816},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1624619600824},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1624619600824},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1624619600832},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1624619600840},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1624619600832},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1624619600921},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1624619600939},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1624619600873},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1624619600955},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1624619600955},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1624619600947},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1624619600955},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1624619600939},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1624619600947},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1624619600955},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1624619600947},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1624619600947},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1624619600955},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1624619600947},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1624619600947},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1624619600947},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1624619600947},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1624619600955},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1624619600947},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1624619600947},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1624619600947},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1624619600947},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1624619600857},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1624619600857},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1624619600857},{"_id":"themes/next/source/images/avatar.gif","hash":"1dd8c28b25e25a9a70841c6309440bfe08fb41f8","modified":1624621019587},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1624619600857},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1624619600857},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1624619600857},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1624619600857},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1624619600857},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1624619600849},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1624619600849},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1624619600800},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1624619600800},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1624619600849},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1624619600808},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1624619600808},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1624619600808},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1624619600808},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1624619600808},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1624619600808},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1624619600808},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1624619600808},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1624619600808},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1624619600808},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1624619600816},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1624619600816},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1624619600816},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1624619600816},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1624619600816},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1624619600816},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1624619600816},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1624619600824},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1624619600824},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1624619600824},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1624619600824},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1624619600824},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1624619600824},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1624619600824},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1624619600824},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1624619600832},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1624619600832},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1624619600832},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1624619600832},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1624619600832},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1624619600832},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1624619600832},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1624619600832},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1624619600832},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1624619600832},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1624619600832},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1624619600840},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1624619600840},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1624619600840},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1624619600840},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1624619600840},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1624619600840},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1624619600840},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1624619600840},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1624619600840},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1624619600840},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1624619600939},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1624619600939},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1624619600939},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1624619600955},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1624619600939},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1624619600963},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1624619600873},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1624619600963},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1624619600955},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1624619600873},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1624619600873},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1624619600889},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1624619600905},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1624619600939},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1624619600905},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1624619600921},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1624619600930},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1624619600905},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1624619600913},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1624619600913},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1624619600913},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1624619600913},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1624619600931},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1624619600921},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1624619600931},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1624619600931},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1624619600931},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1624619600931},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1624619600931},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1624619600931},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1624619600931},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1624619600931},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1624619600931},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1624619600897},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1624619600939},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1624619600897},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1624619600939},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1624619600939},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1624619600939},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1624619600939},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1624619600939},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1624619600905},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1624619600963},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1624619600905},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1624619600913},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1624619600955},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1624619600881},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1624619600881},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1624619600905},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1624619600881},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1624619600881},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1624619600881},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1624619600881},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1624619600881},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1624619600881},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1624619600881},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1624619600881},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1624619600881},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1624619600881},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1624619600881},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1624619600889},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1624619600889},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1624619600889},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1624619600889},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1624619600889},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1624619600889},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1624619600889},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1624619600913},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1624619600889},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1624619600889},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1624619600913},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1624619600913},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1624619600889},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1624619600921},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1624619600921},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1624619600921},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1624619600921},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1624619600897},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1624619600897},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1624619600897},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1624619600897},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1624619600897},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1624619600889},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1624619600897},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1624619600897},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1624619600897},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1624619600897},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1624619600897},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1624619600905},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1624619600897},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1624619600905},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1624619600905},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1624619600905},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1624619600905},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1624619600905},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1624619600963},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1624619600963},{"_id":"source/_posts/数据备份/backUp.png","hash":"7591cff1c6a13315edb921cec93ef64d8781ae75","modified":1624618868771},{"_id":"source/_posts/Postons/Potions(Hard_version).png","hash":"33ffe55a747ea25b14fcda469327c8213ee6716a","modified":1624618868761},{"_id":"public/categories/index.html","hash":"796d60ec3d80a3837ff43894caf52f25920bb8a6","modified":1624631086552},{"_id":"public/About-me/index.html","hash":"ebc853a359e710f5ec3ffbaaadc87e1e3a60348b","modified":1624631086552},{"_id":"public/tags/index.html","hash":"1366b273cf83e56b3d22d14cbd2348a4031f768d","modified":1624631086552},{"_id":"public/2021/04/18/关于对floyd算法的质疑/index.html","hash":"96a3976275ba3a33ea92b5bc4ba132521fe1a3aa","modified":1624631086552},{"_id":"public/2021/03/30/sptingboot集成mybatis/index.html","hash":"0a4f0f62741e0bcee902320657b7f4735c5e9192","modified":1624631086552},{"_id":"public/categories/div1/index.html","hash":"a2ec3ce35d9ae767cf7333feaf569eec1cae3aa1","modified":1624631086552},{"_id":"public/2021/03/22/IDEApush到github被拒绝的问题/index.html","hash":"6638706bca3c5ae8fc21054c39be0c2e21b47fcd","modified":1624631086552},{"_id":"public/categories/Diary/index.html","hash":"16ceea8479042043dfbf3e2c579be9eb2c70d483","modified":1624631086552},{"_id":"public/archives/index.html","hash":"efa700a350828aa5a846c161f59a2d4c7e1e9292","modified":1624631086552},{"_id":"public/categories/算法/index.html","hash":"aca4e1094c0c3d3057ba6eb514663d4cf0226383","modified":1624631086552},{"_id":"public/archives/2021/index.html","hash":"6d60a8be4dadd8996991f3e7f6675b089e1f064c","modified":1624631086552},{"_id":"public/archives/2021/04/index.html","hash":"8927ef8bb35e08066408db79846226521e3a409f","modified":1624631086552},{"_id":"public/archives/2021/03/index.html","hash":"2762f774e90fa2dc3b710a7b41cb1b6744298b3a","modified":1624631086552},{"_id":"public/2021/06/25/USST题解报告/index.html","hash":"4536ebaf19c114e62c67b0c1bb8a7809d3dc8452","modified":1624631086552},{"_id":"public/2021/06/13/MaxMedian/index.html","hash":"23e49330c145f9c0ab2eb2127b8f6f728b9af2b3","modified":1624631086552},{"_id":"public/2021/06/13/BestCowFences/index.html","hash":"a4543aca673d8edfe5c6ebc04f6dc1d57a23cbf0","modified":1624631086552},{"_id":"public/2021/06/11/数据备份/index.html","hash":"93732d719464e7f2cba882e724f818cf9a7f242c","modified":1624631086552},{"_id":"public/2021/06/09/Postons/index.html","hash":"5e73451e56274033d093dad6a386dfaaebce8ace","modified":1624631086552},{"_id":"public/2021/04/10/在O-logn-的复杂度下两数组的混合中位数/index.html","hash":"c55cbd10839b4d79f6e78c2b3e4912f1fd3b4fc4","modified":1624631086552},{"_id":"public/archives/2021/06/index.html","hash":"d2262b2a5c9d7dfeba58835e121bdb695cd4e91d","modified":1624631086552},{"_id":"public/tags/思维/index.html","hash":"effad1a2a51c035b2f98a5dfd4a44e22cb3e7f25","modified":1624631086552},{"_id":"public/tags/限定长度最大子段和/index.html","hash":"262e0fc2e9b59ea43c56c5842c8ea10e6e9b0ff9","modified":1624631086552},{"_id":"public/tags/二分答案/index.html","hash":"f70fc598bb857d4fc5ef5860703f3f8036e3d26d","modified":1624631086552},{"_id":"public/tags/JAVA/index.html","hash":"eb11b1ee46ec7e717a389b8c74883ce59ace6e65","modified":1624631086552},{"_id":"public/tags/反悔/index.html","hash":"784f2c97b917bf06d5a0dc409cd33674f665356e","modified":1624631086552},{"_id":"public/tags/贪心/index.html","hash":"8dfd2604b06bcbcf8655dd7d75065de8040908cd","modified":1624631086552},{"_id":"public/tags/优先队列/index.html","hash":"10cca8e79e10edb98cb3dc82d8c396d57f891453","modified":1624631086552},{"_id":"public/tags/SptingBoot/index.html","hash":"d7aa772622bff2f94c9b71efaed18622a4b93160","modified":1624631086552},{"_id":"public/tags/数据库/index.html","hash":"05b2acbb1732f65880168a6520afd8353380d929","modified":1624631086552},{"_id":"public/tags/动态规划/index.html","hash":"425982122484516d0813af1152200e8f4f839498","modified":1624631086552},{"_id":"public/tags/贪心-反悔-优先队列/index.html","hash":"c6912193cca09db6f2ef6066f5b631437129eac8","modified":1624631086552},{"_id":"public/tags/分治法/index.html","hash":"1ecf490f0ed840f6f0434c135b4b8bbff3e056f6","modified":1624631086552},{"_id":"public/index.html","hash":"5d485abca82e516076f5def14c15a9a282af0d0c","modified":1624631086552},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1624630525101},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1624630525101},{"_id":"public/images/avatar.gif","hash":"1dd8c28b25e25a9a70841c6309440bfe08fb41f8","modified":1624630525101},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1624630525101},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1624630525101},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1624630525101},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1624630525101},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1624630525101},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1624630525101},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1624630525101},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1624630525101},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1624630525101},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1624630525101},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1624630525101},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1624630525101},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1624630525101},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1624630525101},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1624630525101},{"_id":"public/css/main.css","hash":"7e229afec8b227ea7b9c45dc6e9df17fa49639b4","modified":1624630525101},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1624630525101},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1624630525101},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1624630525101},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1624630525101},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1624630525101},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1624630525101},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1624630525101},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1624630525101},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1624630525101},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1624630525101},{"_id":"public/2021/06/13/BestCowFences/BestCowFence.png","hash":"cba042a07e1eed0b0ddd78e61fe006647bed5323","modified":1624630525101},{"_id":"public/2021/06/13/MaxMedian/MaxMedian.png","hash":"a51a9bbdc1ba4026d2073b0c4abe23ffdafb2f55","modified":1624630525101},{"_id":"public/2021/06/11/数据备份/backUp.png","hash":"7591cff1c6a13315edb921cec93ef64d8781ae75","modified":1624630525101},{"_id":"public/2021/06/09/Postons/Potions(Hard_version).png","hash":"33ffe55a747ea25b14fcda469327c8213ee6716a","modified":1624630525101},{"_id":"source/categories/index.pdf","hash":"a258a88a5bcf8099859ba5263f7c9d94eea6eca8","modified":1624630754491},{"_id":"public/categories/index.pdf","hash":"a258a88a5bcf8099859ba5263f7c9d94eea6eca8","modified":1624631086552}],"Category":[{"name":"div1","_id":"ckqcf2glw00051ktk4kub65u9"},{"name":"Diary","_id":"ckqcf2gm0000a1ktk4t0las94"},{"name":"-div1","_id":"ckqcf2gmf001b1ktkcmne5mdf"},{"name":"-算法","_id":"ckqcf2gmg001d1ktke1y12mj3"}],"Data":[],"Page":[{"title":"分类","date":"2021-06-25T14:12:37.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-06-25 22:12:37\ntype: \"categories\"\n---\n","updated":"2021-06-25T14:13:14.501Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckqcf2glf00001ktkbzs82hvq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About me","date":"2021-03-21T15:19:57.000Z","_content":"","source":"About-me/index.md","raw":"---\ntitle: About me\ndate: 2021-03-21 23:19:57\n---\n","updated":"2021-06-25T11:01:08.740Z","path":"About-me/index.html","comments":1,"layout":"page","_id":"ckqcf2glm00011ktk3xdy5voj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2021-06-25T13:13:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-06-25 21:13:56\ntype: \"tags\"\n---\n","updated":"2021-06-25T13:14:54.224Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckqcf2glu00031ktk3hqi6gjy","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"BestCowFences","date":"2021-06-12T16:35:27.000Z","_content":"# 题目\n{% asset_img BestCowFence.png %}\n### 题目简介\n题目大概就是围起连续不小于f的数，使他们的平均值最大，求出这个最大值。\n### 分析\n 如果是求连续子序列最大和，那么问题就很简单。但是他这里要求的是最大平均数，由于最大平均数不仅和连续子序列的和有关，还和连续子序列的长度有关。即average=sum/length。则事情就变得不那么简单了。\n\n##### 二分答案\n这里用到二分答案策略，所谓的二分答案，就是假设所求的值刚开始在一个区间段[l,r]，然后选取这个区间段的中间值mid作为答案，如果算出这个中间值取大了，就从左半区间[l,mid],否则从[mid,r]找最后直到区间缩到无穷小，则此时区间的逼近值即为正确答案。这个其实在数值分析里面学过。\n\n##### 变向思维\n我们要求连续区间的最大平均值，很困难，因为这个平均值不仅和连续区间和sum有关，还与区间长度length有关，这就需要我们将问题进行转换。\n\n假设最大平均值为ans，则对于平均值最大的那段区间[i,j]有(a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>)/length=ans。即(a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>)-ans*length=0。\n\n- 如果有大于ans的区间段平均值，则对于最大的区间段[p,q],有(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)/length>ans，即(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)-ans*length>0。那么我们的ans就偏小了。这就是一个二分的判断偏小依据。\n\n- 如果全部的区间段平均值都小于ans，则对于最大的区间段，有(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)/length<ans,即(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)-ans*length<0,则此时ans偏大了。得到一个二分偏大的判断。\n\n那么问题就从求连续子序列最大平均值，转换成了求(a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>)-ans * length的值。我们将整个区间段[0,n-1]的值全部减去ans，那么我们在求连续子序列的和时，就相当于求a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>-ans * lengths的值。则问题最终变成了一个连续子序列求和问题。\n\n##### 长度不小于f的最大连续子序列问题\n我们可以先求出[0,n]的前缀和sum[i] i=0,1,2...n。由于子序列的长度不能小于f，则以i结尾的连续子序列dp[i] (i>=f)，前f个数一定是要的。先让dp[i]=sum[i],则sum[i]-sum[i-k-1]这段肯定要留在dp[i]里面。所以只需要找到sum[0] ~ sum[i-k]中小于0的最小值sum[m]，然后令dp=sum[i]-sum[m]即为以i结尾的连续子序列的最大值（就是把前面连续的最自己没有正作用的子序列干掉）。则我们要维护从sum[0]~sum[i-k]的最小值，并且每次用dp[i]更新整个区间内连续子序列的最大值即可。\n```c++\nfor(int i=f;i<n;++i){\n           Min=min(Min,sum[i-f]);   \n           Max=max(Max,sum[i]-Min);   // sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和\n       }\n```\n\n## 算法\n先假定二分区间为很大，然后二分假设答案mid，令原数组所有的数减去mid得到新数组。求新数组中长度不小于k的连续子序列的最大和，如果结果大于0，说明ans设小了，区间往右边分，否则区间往左边分。直到最后区间逼近一个数为止。\n## 代码\n\n```c++\n#include<iostream>\n#include<cmath>\nusing namespace std;\ndouble a[100002];\ndouble b[100002];\ndouble sum[100002]; // 记录第i个数之前的和\nint n;\nint f;\nint main(){\n    //freopen(\"test/div1A.txt\",\"r\",stdin);\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    double mid;       // 假设的答案 \n    cin>>n>>f;\n    for(int i=0;i<n;++i){\n        //scanf(\"%lf\",&a[i]);  // 用cin会套老鹅\n        cin>>a[i];\n    }\n    double l=-1e6;    // 答案区间的左边\n    double r=1e6;     // 答案区间的右边\n    while(r-l>1e-4){\n       mid = (l+r)/2;\n       // 先求出减去平均值后的数组\n       for(int i=0;i<n;++i){\n           b[i]=a[i]-mid;   \n       }\n       \n       sum[0]=b[0];\n       for(int i = 1;i<n;++i){\n            sum[i]=sum[i-1]+b[i];\n       }\n       double Min=0;     // 记录以j(0<=j<i-f)结尾大子段和的最小值，初始值应该为0，因为比0小的我们才不要\n                         // 如果这里初始化为一个很大的值，那么若sum[0]大于0，就会被认为是要被抛弃的，然而我们只需要抛弃小于0的\n       double Max=-1e9;      // 记录长度大于f的最大子段和\n       // 求限定长度为f的最大连续子段和\n       for(int i=f;i<n;++i){\n           Min=min(Min,sum[i-f]);   \n           Max=max(Max,sum[i]-Min);   // sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和\n       }\n       Max=max(Max,sum[f-1]);   // 观察可知上面没有判断sum[f-1]的情况\n       if(Max>0){  // Max>0说明答案不够大\n         l=mid;\n       }else{      // 否则就是答案不够小\n         r=mid;\n       }\n\n    }\n    cout<<(int)(1000*r)<<endl;\n}\n```\n\n\n\n","source":"_posts/BestCowFences.md","raw":"---\ntitle: BestCowFences\ndate: 2021-06-13 00:35:27\ncategories:\n    - div1\ntags:\n    - 限定长度最大子段和\n    - 思维\n    - 二分答案\n---\n# 题目\n{% asset_img BestCowFence.png %}\n### 题目简介\n题目大概就是围起连续不小于f的数，使他们的平均值最大，求出这个最大值。\n### 分析\n 如果是求连续子序列最大和，那么问题就很简单。但是他这里要求的是最大平均数，由于最大平均数不仅和连续子序列的和有关，还和连续子序列的长度有关。即average=sum/length。则事情就变得不那么简单了。\n\n##### 二分答案\n这里用到二分答案策略，所谓的二分答案，就是假设所求的值刚开始在一个区间段[l,r]，然后选取这个区间段的中间值mid作为答案，如果算出这个中间值取大了，就从左半区间[l,mid],否则从[mid,r]找最后直到区间缩到无穷小，则此时区间的逼近值即为正确答案。这个其实在数值分析里面学过。\n\n##### 变向思维\n我们要求连续区间的最大平均值，很困难，因为这个平均值不仅和连续区间和sum有关，还与区间长度length有关，这就需要我们将问题进行转换。\n\n假设最大平均值为ans，则对于平均值最大的那段区间[i,j]有(a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>)/length=ans。即(a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>)-ans*length=0。\n\n- 如果有大于ans的区间段平均值，则对于最大的区间段[p,q],有(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)/length>ans，即(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)-ans*length>0。那么我们的ans就偏小了。这就是一个二分的判断偏小依据。\n\n- 如果全部的区间段平均值都小于ans，则对于最大的区间段，有(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)/length<ans,即(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)-ans*length<0,则此时ans偏大了。得到一个二分偏大的判断。\n\n那么问题就从求连续子序列最大平均值，转换成了求(a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>)-ans * length的值。我们将整个区间段[0,n-1]的值全部减去ans，那么我们在求连续子序列的和时，就相当于求a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>-ans * lengths的值。则问题最终变成了一个连续子序列求和问题。\n\n##### 长度不小于f的最大连续子序列问题\n我们可以先求出[0,n]的前缀和sum[i] i=0,1,2...n。由于子序列的长度不能小于f，则以i结尾的连续子序列dp[i] (i>=f)，前f个数一定是要的。先让dp[i]=sum[i],则sum[i]-sum[i-k-1]这段肯定要留在dp[i]里面。所以只需要找到sum[0] ~ sum[i-k]中小于0的最小值sum[m]，然后令dp=sum[i]-sum[m]即为以i结尾的连续子序列的最大值（就是把前面连续的最自己没有正作用的子序列干掉）。则我们要维护从sum[0]~sum[i-k]的最小值，并且每次用dp[i]更新整个区间内连续子序列的最大值即可。\n```c++\nfor(int i=f;i<n;++i){\n           Min=min(Min,sum[i-f]);   \n           Max=max(Max,sum[i]-Min);   // sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和\n       }\n```\n\n## 算法\n先假定二分区间为很大，然后二分假设答案mid，令原数组所有的数减去mid得到新数组。求新数组中长度不小于k的连续子序列的最大和，如果结果大于0，说明ans设小了，区间往右边分，否则区间往左边分。直到最后区间逼近一个数为止。\n## 代码\n\n```c++\n#include<iostream>\n#include<cmath>\nusing namespace std;\ndouble a[100002];\ndouble b[100002];\ndouble sum[100002]; // 记录第i个数之前的和\nint n;\nint f;\nint main(){\n    //freopen(\"test/div1A.txt\",\"r\",stdin);\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    double mid;       // 假设的答案 \n    cin>>n>>f;\n    for(int i=0;i<n;++i){\n        //scanf(\"%lf\",&a[i]);  // 用cin会套老鹅\n        cin>>a[i];\n    }\n    double l=-1e6;    // 答案区间的左边\n    double r=1e6;     // 答案区间的右边\n    while(r-l>1e-4){\n       mid = (l+r)/2;\n       // 先求出减去平均值后的数组\n       for(int i=0;i<n;++i){\n           b[i]=a[i]-mid;   \n       }\n       \n       sum[0]=b[0];\n       for(int i = 1;i<n;++i){\n            sum[i]=sum[i-1]+b[i];\n       }\n       double Min=0;     // 记录以j(0<=j<i-f)结尾大子段和的最小值，初始值应该为0，因为比0小的我们才不要\n                         // 如果这里初始化为一个很大的值，那么若sum[0]大于0，就会被认为是要被抛弃的，然而我们只需要抛弃小于0的\n       double Max=-1e9;      // 记录长度大于f的最大子段和\n       // 求限定长度为f的最大连续子段和\n       for(int i=f;i<n;++i){\n           Min=min(Min,sum[i-f]);   \n           Max=max(Max,sum[i]-Min);   // sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和\n       }\n       Max=max(Max,sum[f-1]);   // 观察可知上面没有判断sum[f-1]的情况\n       if(Max>0){  // Max>0说明答案不够大\n         l=mid;\n       }else{      // 否则就是答案不够小\n         r=mid;\n       }\n\n    }\n    cout<<(int)(1000*r)<<endl;\n}\n```\n\n\n\n","slug":"BestCowFences","published":1,"updated":"2021-06-25T11:01:08.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqcf2gln00021ktk5wwagsyo","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/13/BestCowFences/BestCowFence.png\" class=\"\">\n<h3 id=\"题目简介\"><a href=\"#题目简介\" class=\"headerlink\" title=\"题目简介\"></a>题目简介</h3><p>题目大概就是围起连续不小于f的数，使他们的平均值最大，求出这个最大值。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p> 如果是求连续子序列最大和，那么问题就很简单。但是他这里要求的是最大平均数，由于最大平均数不仅和连续子序列的和有关，还和连续子序列的长度有关。即average=sum/length。则事情就变得不那么简单了。</p>\n<h5 id=\"二分答案\"><a href=\"#二分答案\" class=\"headerlink\" title=\"二分答案\"></a>二分答案</h5><p>这里用到二分答案策略，所谓的二分答案，就是假设所求的值刚开始在一个区间段[l,r]，然后选取这个区间段的中间值mid作为答案，如果算出这个中间值取大了，就从左半区间[l,mid],否则从[mid,r]找最后直到区间缩到无穷小，则此时区间的逼近值即为正确答案。这个其实在数值分析里面学过。</p>\n<h5 id=\"变向思维\"><a href=\"#变向思维\" class=\"headerlink\" title=\"变向思维\"></a>变向思维</h5><p>我们要求连续区间的最大平均值，很困难，因为这个平均值不仅和连续区间和sum有关，还与区间长度length有关，这就需要我们将问题进行转换。</p>\n<p>假设最大平均值为ans，则对于平均值最大的那段区间[i,j]有(a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>)/length=ans。即(a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>)-ans*length=0。</p>\n<ul>\n<li><p>如果有大于ans的区间段平均值，则对于最大的区间段[p,q],有(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)/length&gt;ans，即(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)-ans*length&gt;0。那么我们的ans就偏小了。这就是一个二分的判断偏小依据。</p>\n</li>\n<li><p>如果全部的区间段平均值都小于ans，则对于最大的区间段，有(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)/length&lt;ans,即(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)-ans*length&lt;0,则此时ans偏大了。得到一个二分偏大的判断。</p>\n</li>\n</ul>\n<p>那么问题就从求连续子序列最大平均值，转换成了求(a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>)-ans * length的值。我们将整个区间段[0,n-1]的值全部减去ans，那么我们在求连续子序列的和时，就相当于求a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>-ans * lengths的值。则问题最终变成了一个连续子序列求和问题。</p>\n<h5 id=\"长度不小于f的最大连续子序列问题\"><a href=\"#长度不小于f的最大连续子序列问题\" class=\"headerlink\" title=\"长度不小于f的最大连续子序列问题\"></a>长度不小于f的最大连续子序列问题</h5><p>我们可以先求出[0,n]的前缀和sum[i] i=0,1,2…n。由于子序列的长度不能小于f，则以i结尾的连续子序列dp[i] (i&gt;=f)，前f个数一定是要的。先让dp[i]=sum[i],则sum[i]-sum[i-k-1]这段肯定要留在dp[i]里面。所以只需要找到sum[0] ~ sum[i-k]中小于0的最小值sum[m]，然后令dp=sum[i]-sum[m]即为以i结尾的连续子序列的最大值（就是把前面连续的最自己没有正作用的子序列干掉）。则我们要维护从sum[0]~sum[i-k]的最小值，并且每次用dp[i]更新整个区间内连续子序列的最大值即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=f;i&lt;n;++i)&#123;</span><br><span class=\"line\">           Min=<span class=\"built_in\">min</span>(Min,sum[i-f]);   </span><br><span class=\"line\">           Max=<span class=\"built_in\">max</span>(Max,sum[i]-Min);   <span class=\"comment\">// sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和</span></span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>先假定二分区间为很大，然后二分假设答案mid，令原数组所有的数减去mid得到新数组。求新数组中长度不小于k的连续子序列的最大和，如果结果大于0，说明ans设小了，区间往右边分，否则区间往左边分。直到最后区间逼近一个数为止。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">double</span> a[<span class=\"number\">100002</span>];</span><br><span class=\"line\"><span class=\"keyword\">double</span> b[<span class=\"number\">100002</span>];</span><br><span class=\"line\"><span class=\"keyword\">double</span> sum[<span class=\"number\">100002</span>]; <span class=\"comment\">// 记录第i个数之前的和</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1A.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> mid;       <span class=\"comment\">// 假设的答案 </span></span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;f;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//scanf(&quot;%lf&quot;,&amp;a[i]);  // 用cin会套老鹅</span></span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> l=<span class=\"number\">-1e6</span>;    <span class=\"comment\">// 答案区间的左边</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r=<span class=\"number\">1e6</span>;     <span class=\"comment\">// 答案区间的右边</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r-l&gt;<span class=\"number\">1e-4</span>)&#123;</span><br><span class=\"line\">       mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">       <span class=\"comment\">// 先求出减去平均值后的数组</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">           b[i]=a[i]-mid;   </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       sum[<span class=\"number\">0</span>]=b[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">            sum[i]=sum[i<span class=\"number\">-1</span>]+b[i];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">double</span> Min=<span class=\"number\">0</span>;     <span class=\"comment\">// 记录以j(0&lt;=j&lt;i-f)结尾大子段和的最小值，初始值应该为0，因为比0小的我们才不要</span></span><br><span class=\"line\">                         <span class=\"comment\">// 如果这里初始化为一个很大的值，那么若sum[0]大于0，就会被认为是要被抛弃的，然而我们只需要抛弃小于0的</span></span><br><span class=\"line\">       <span class=\"keyword\">double</span> Max=<span class=\"number\">-1e9</span>;      <span class=\"comment\">// 记录长度大于f的最大子段和</span></span><br><span class=\"line\">       <span class=\"comment\">// 求限定长度为f的最大连续子段和</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=f;i&lt;n;++i)&#123;</span><br><span class=\"line\">           Min=<span class=\"built_in\">min</span>(Min,sum[i-f]);   </span><br><span class=\"line\">           Max=<span class=\"built_in\">max</span>(Max,sum[i]-Min);   <span class=\"comment\">// sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       Max=<span class=\"built_in\">max</span>(Max,sum[f<span class=\"number\">-1</span>]);   <span class=\"comment\">// 观察可知上面没有判断sum[f-1]的情况</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Max&gt;<span class=\"number\">0</span>)&#123;  <span class=\"comment\">// Max&gt;0说明答案不够大</span></span><br><span class=\"line\">         l=mid;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;      <span class=\"comment\">// 否则就是答案不够小</span></span><br><span class=\"line\">         r=mid;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;(<span class=\"keyword\">int</span>)(<span class=\"number\">1000</span>*r)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/13/BestCowFences/BestCowFence.png\" class=\"\">\n<h3 id=\"题目简介\"><a href=\"#题目简介\" class=\"headerlink\" title=\"题目简介\"></a>题目简介</h3><p>题目大概就是围起连续不小于f的数，使他们的平均值最大，求出这个最大值。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p> 如果是求连续子序列最大和，那么问题就很简单。但是他这里要求的是最大平均数，由于最大平均数不仅和连续子序列的和有关，还和连续子序列的长度有关。即average=sum/length。则事情就变得不那么简单了。</p>\n<h5 id=\"二分答案\"><a href=\"#二分答案\" class=\"headerlink\" title=\"二分答案\"></a>二分答案</h5><p>这里用到二分答案策略，所谓的二分答案，就是假设所求的值刚开始在一个区间段[l,r]，然后选取这个区间段的中间值mid作为答案，如果算出这个中间值取大了，就从左半区间[l,mid],否则从[mid,r]找最后直到区间缩到无穷小，则此时区间的逼近值即为正确答案。这个其实在数值分析里面学过。</p>\n<h5 id=\"变向思维\"><a href=\"#变向思维\" class=\"headerlink\" title=\"变向思维\"></a>变向思维</h5><p>我们要求连续区间的最大平均值，很困难，因为这个平均值不仅和连续区间和sum有关，还与区间长度length有关，这就需要我们将问题进行转换。</p>\n<p>假设最大平均值为ans，则对于平均值最大的那段区间[i,j]有(a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>)/length=ans。即(a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>)-ans*length=0。</p>\n<ul>\n<li><p>如果有大于ans的区间段平均值，则对于最大的区间段[p,q],有(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)/length&gt;ans，即(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)-ans*length&gt;0。那么我们的ans就偏小了。这就是一个二分的判断偏小依据。</p>\n</li>\n<li><p>如果全部的区间段平均值都小于ans，则对于最大的区间段，有(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)/length&lt;ans,即(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)-ans*length&lt;0,则此时ans偏大了。得到一个二分偏大的判断。</p>\n</li>\n</ul>\n<p>那么问题就从求连续子序列最大平均值，转换成了求(a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>)-ans * length的值。我们将整个区间段[0,n-1]的值全部减去ans，那么我们在求连续子序列的和时，就相当于求a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>-ans * lengths的值。则问题最终变成了一个连续子序列求和问题。</p>\n<h5 id=\"长度不小于f的最大连续子序列问题\"><a href=\"#长度不小于f的最大连续子序列问题\" class=\"headerlink\" title=\"长度不小于f的最大连续子序列问题\"></a>长度不小于f的最大连续子序列问题</h5><p>我们可以先求出[0,n]的前缀和sum[i] i=0,1,2…n。由于子序列的长度不能小于f，则以i结尾的连续子序列dp[i] (i&gt;=f)，前f个数一定是要的。先让dp[i]=sum[i],则sum[i]-sum[i-k-1]这段肯定要留在dp[i]里面。所以只需要找到sum[0] ~ sum[i-k]中小于0的最小值sum[m]，然后令dp=sum[i]-sum[m]即为以i结尾的连续子序列的最大值（就是把前面连续的最自己没有正作用的子序列干掉）。则我们要维护从sum[0]~sum[i-k]的最小值，并且每次用dp[i]更新整个区间内连续子序列的最大值即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=f;i&lt;n;++i)&#123;</span><br><span class=\"line\">           Min=<span class=\"built_in\">min</span>(Min,sum[i-f]);   </span><br><span class=\"line\">           Max=<span class=\"built_in\">max</span>(Max,sum[i]-Min);   <span class=\"comment\">// sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和</span></span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>先假定二分区间为很大，然后二分假设答案mid，令原数组所有的数减去mid得到新数组。求新数组中长度不小于k的连续子序列的最大和，如果结果大于0，说明ans设小了，区间往右边分，否则区间往左边分。直到最后区间逼近一个数为止。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">double</span> a[<span class=\"number\">100002</span>];</span><br><span class=\"line\"><span class=\"keyword\">double</span> b[<span class=\"number\">100002</span>];</span><br><span class=\"line\"><span class=\"keyword\">double</span> sum[<span class=\"number\">100002</span>]; <span class=\"comment\">// 记录第i个数之前的和</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1A.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> mid;       <span class=\"comment\">// 假设的答案 </span></span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;f;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//scanf(&quot;%lf&quot;,&amp;a[i]);  // 用cin会套老鹅</span></span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> l=<span class=\"number\">-1e6</span>;    <span class=\"comment\">// 答案区间的左边</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r=<span class=\"number\">1e6</span>;     <span class=\"comment\">// 答案区间的右边</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r-l&gt;<span class=\"number\">1e-4</span>)&#123;</span><br><span class=\"line\">       mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">       <span class=\"comment\">// 先求出减去平均值后的数组</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">           b[i]=a[i]-mid;   </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       sum[<span class=\"number\">0</span>]=b[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">            sum[i]=sum[i<span class=\"number\">-1</span>]+b[i];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">double</span> Min=<span class=\"number\">0</span>;     <span class=\"comment\">// 记录以j(0&lt;=j&lt;i-f)结尾大子段和的最小值，初始值应该为0，因为比0小的我们才不要</span></span><br><span class=\"line\">                         <span class=\"comment\">// 如果这里初始化为一个很大的值，那么若sum[0]大于0，就会被认为是要被抛弃的，然而我们只需要抛弃小于0的</span></span><br><span class=\"line\">       <span class=\"keyword\">double</span> Max=<span class=\"number\">-1e9</span>;      <span class=\"comment\">// 记录长度大于f的最大子段和</span></span><br><span class=\"line\">       <span class=\"comment\">// 求限定长度为f的最大连续子段和</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=f;i&lt;n;++i)&#123;</span><br><span class=\"line\">           Min=<span class=\"built_in\">min</span>(Min,sum[i-f]);   </span><br><span class=\"line\">           Max=<span class=\"built_in\">max</span>(Max,sum[i]-Min);   <span class=\"comment\">// sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       Max=<span class=\"built_in\">max</span>(Max,sum[f<span class=\"number\">-1</span>]);   <span class=\"comment\">// 观察可知上面没有判断sum[f-1]的情况</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Max&gt;<span class=\"number\">0</span>)&#123;  <span class=\"comment\">// Max&gt;0说明答案不够大</span></span><br><span class=\"line\">         l=mid;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;      <span class=\"comment\">// 否则就是答案不够小</span></span><br><span class=\"line\">         r=mid;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;(<span class=\"keyword\">int</span>)(<span class=\"number\">1000</span>*r)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"IDEApush到github被拒绝的问题","date":"2021-03-22T14:49:21.000Z","_content":"\n##  上传时被拒绝\n\n上传代码到github出现rejected的问题是因为新传的文件和原来的不是同一时间上传等，解决办法：\n\n```\ngit pull --rebase origin master\ngit push -u origin master -f     //这句不一定要\n```\n\n\n##  删除Github上面的文件夹\n\n先pull（把github上的文件pull下来）\n再执行\n```\ngit rm --cached -r \"要删除的文件夹\"\n```\n然后再commit，再push就行了。\n","source":"_posts/IDEApush到github被拒绝的问题.md","raw":"---\ntitle: IDEApush到github被拒绝的问题\ndate: 2021-03-22 22:49:21\ncategories:\n- Diary\ntags:\n- JAVA\n---\n\n##  上传时被拒绝\n\n上传代码到github出现rejected的问题是因为新传的文件和原来的不是同一时间上传等，解决办法：\n\n```\ngit pull --rebase origin master\ngit push -u origin master -f     //这句不一定要\n```\n\n\n##  删除Github上面的文件夹\n\n先pull（把github上的文件pull下来）\n再执行\n```\ngit rm --cached -r \"要删除的文件夹\"\n```\n然后再commit，再push就行了。\n","slug":"IDEApush到github被拒绝的问题","published":1,"updated":"2021-06-25T11:01:08.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqcf2glv00041ktk37iy2tw3","content":"<h2 id=\"上传时被拒绝\"><a href=\"#上传时被拒绝\" class=\"headerlink\" title=\"上传时被拒绝\"></a>上传时被拒绝</h2><p>上传代码到github出现rejected的问题是因为新传的文件和原来的不是同一时间上传等，解决办法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull --rebase origin master</span><br><span class=\"line\">git push -u origin master -f     &#x2F;&#x2F;这句不一定要</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"删除Github上面的文件夹\"><a href=\"#删除Github上面的文件夹\" class=\"headerlink\" title=\"删除Github上面的文件夹\"></a>删除Github上面的文件夹</h2><p>先pull（把github上的文件pull下来）<br>再执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached -r &quot;要删除的文件夹&quot;</span><br></pre></td></tr></table></figure>\n<p>然后再commit，再push就行了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"上传时被拒绝\"><a href=\"#上传时被拒绝\" class=\"headerlink\" title=\"上传时被拒绝\"></a>上传时被拒绝</h2><p>上传代码到github出现rejected的问题是因为新传的文件和原来的不是同一时间上传等，解决办法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull --rebase origin master</span><br><span class=\"line\">git push -u origin master -f     &#x2F;&#x2F;这句不一定要</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"删除Github上面的文件夹\"><a href=\"#删除Github上面的文件夹\" class=\"headerlink\" title=\"删除Github上面的文件夹\"></a>删除Github上面的文件夹</h2><p>先pull（把github上的文件pull下来）<br>再执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached -r &quot;要删除的文件夹&quot;</span><br></pre></td></tr></table></figure>\n<p>然后再commit，再push就行了。</p>\n"},{"title":"MaxMedian","date":"2021-06-13T03:57:10.000Z","_content":"# 题目\n{% asset_img MaxMedian.png %}\n\n### 题目简述\n这题是长度不小于k连续子序列排队后的最大中位数。其中排序后+中位数定义下标为$\\lfloor(r-l+1)/2\\rfloor$.\n\n###分析\n这是一道求长度不小于k的连续子序列问题，但它又不是简单求连续子序列的问题。而是求中位数，而且是子序列排序后的中位数，并且要中位数最大。这种场景很难不让人想到二分答案+问题转化。\n通过观察不难发现\n- 如果连续子序列长度是偶数，如[1,2,3,4,5,6],那么大于等于中位数的数会比小于中位数的数多两个。\n- 如果连续子序列的长度是奇数，如[1,2,3,4,5]那么大于等于中位数的数会比小于中位数的数一两个。\n除上面所述两中情况之外不会有其他情况。\n\n## 算法\n根据分析可以巧妙设计算法，假设答案ans，如果序列中的值大于等于ans，令其等于1，否等于-1。如果变换后的序列中长度不小于k的最大连续子序列的值小于0，就说明中位数ans设大了，则答案往小取，否则答案往大取，直到二分区间无穷小。\n\n```c++\n#include<iostream>\nusing namespace std;\nint a[200002];\nint sum[200002];\nint main(){\n    int n,k;\n    //freopen(\"test/div1C.txt\",\"r\",stdin);\n    // 关同步流\n     ios::sync_with_stdio(false);\n     cin.tie(0);\n    cin>>n>>k;\n    for(int i = 0;i<n;++i){\n        cin>>a[i];\n    }\n    double l=-1e9;   // 答案左区间\n    double r=1e9;    // 答案右区间\n    while(r-l>1e-5){\n        //cout<<l<<\" \"<<r<<endl;\n        double mid=(l+r)/2;\n        //求变形之后地前缀和\n        if(a[0]>=mid){\n            sum[0]=1;\n        }else{\n            sum[0]=-1;\n        }\n        for(int j = 1;j<n;++j){\n           if(a[j]>=mid){\n               sum[j]=sum[j-1]+1;\n           }else{\n               sum[j]=sum[j-1]-1;\n           }\n        }\n\n       // 求最大子段和\n       int Min=0;\n       int Max=-1e9;\n       for(int i = k;i<n;++i){\n           Min=min(Min,sum[i-k]);\n           Max=max(Max,sum[i]-Min);\n       }\n\n       Max=max(Max,sum[k-1]);\n       if(Max>0){\n           l=mid;\n       }else{\n           r=mid;\n       }\n       \n    }\n    cout<<(int)r<<endl;\n}\n```\n\n\n\n\n","source":"_posts/MaxMedian.md","raw":"---\ntitle: MaxMedian\ndate: 2021-06-13 11:57:10\ncategories:\n    - div1\ntags:\n    - 限定长度最大子段和\n    - 思维\n    - 二分答案\n---\n# 题目\n{% asset_img MaxMedian.png %}\n\n### 题目简述\n这题是长度不小于k连续子序列排队后的最大中位数。其中排序后+中位数定义下标为$\\lfloor(r-l+1)/2\\rfloor$.\n\n###分析\n这是一道求长度不小于k的连续子序列问题，但它又不是简单求连续子序列的问题。而是求中位数，而且是子序列排序后的中位数，并且要中位数最大。这种场景很难不让人想到二分答案+问题转化。\n通过观察不难发现\n- 如果连续子序列长度是偶数，如[1,2,3,4,5,6],那么大于等于中位数的数会比小于中位数的数多两个。\n- 如果连续子序列的长度是奇数，如[1,2,3,4,5]那么大于等于中位数的数会比小于中位数的数一两个。\n除上面所述两中情况之外不会有其他情况。\n\n## 算法\n根据分析可以巧妙设计算法，假设答案ans，如果序列中的值大于等于ans，令其等于1，否等于-1。如果变换后的序列中长度不小于k的最大连续子序列的值小于0，就说明中位数ans设大了，则答案往小取，否则答案往大取，直到二分区间无穷小。\n\n```c++\n#include<iostream>\nusing namespace std;\nint a[200002];\nint sum[200002];\nint main(){\n    int n,k;\n    //freopen(\"test/div1C.txt\",\"r\",stdin);\n    // 关同步流\n     ios::sync_with_stdio(false);\n     cin.tie(0);\n    cin>>n>>k;\n    for(int i = 0;i<n;++i){\n        cin>>a[i];\n    }\n    double l=-1e9;   // 答案左区间\n    double r=1e9;    // 答案右区间\n    while(r-l>1e-5){\n        //cout<<l<<\" \"<<r<<endl;\n        double mid=(l+r)/2;\n        //求变形之后地前缀和\n        if(a[0]>=mid){\n            sum[0]=1;\n        }else{\n            sum[0]=-1;\n        }\n        for(int j = 1;j<n;++j){\n           if(a[j]>=mid){\n               sum[j]=sum[j-1]+1;\n           }else{\n               sum[j]=sum[j-1]-1;\n           }\n        }\n\n       // 求最大子段和\n       int Min=0;\n       int Max=-1e9;\n       for(int i = k;i<n;++i){\n           Min=min(Min,sum[i-k]);\n           Max=max(Max,sum[i]-Min);\n       }\n\n       Max=max(Max,sum[k-1]);\n       if(Max>0){\n           l=mid;\n       }else{\n           r=mid;\n       }\n       \n    }\n    cout<<(int)r<<endl;\n}\n```\n\n\n\n\n","slug":"MaxMedian","published":1,"updated":"2021-06-25T11:01:08.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqcf2gly00071ktkemwq35if","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/13/MaxMedian/MaxMedian.png\" class=\"\">\n\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>这题是长度不小于k连续子序列排队后的最大中位数。其中排序后+中位数定义下标为$\\lfloor(r-l+1)/2\\rfloor$.</p>\n<p>###分析<br>这是一道求长度不小于k的连续子序列问题，但它又不是简单求连续子序列的问题。而是求中位数，而且是子序列排序后的中位数，并且要中位数最大。这种场景很难不让人想到二分答案+问题转化。<br>通过观察不难发现</p>\n<ul>\n<li>如果连续子序列长度是偶数，如[1,2,3,4,5,6],那么大于等于中位数的数会比小于中位数的数多两个。</li>\n<li>如果连续子序列的长度是奇数，如[1,2,3,4,5]那么大于等于中位数的数会比小于中位数的数一两个。<br>除上面所述两中情况之外不会有其他情况。</li>\n</ul>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>根据分析可以巧妙设计算法，假设答案ans，如果序列中的值大于等于ans，令其等于1，否等于-1。如果变换后的序列中长度不小于k的最大连续子序列的值小于0，就说明中位数ans设大了，则答案往小取，否则答案往大取，直到二分区间无穷小。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">200002</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum[<span class=\"number\">200002</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1C.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// 关同步流</span></span><br><span class=\"line\">     ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">     cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> l=<span class=\"number\">-1e9</span>;   <span class=\"comment\">// 答案左区间</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r=<span class=\"number\">1e9</span>;    <span class=\"comment\">// 答案右区间</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r-l&gt;<span class=\"number\">1e-5</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//求变形之后地前缀和</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[<span class=\"number\">0</span>]&gt;=mid)&#123;</span><br><span class=\"line\">            sum[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            sum[<span class=\"number\">0</span>]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;n;++j)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(a[j]&gt;=mid)&#123;</span><br><span class=\"line\">               sum[j]=sum[j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               sum[j]=sum[j<span class=\"number\">-1</span>]<span class=\"number\">-1</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 求最大子段和</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> Min=<span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> Max=<span class=\"number\">-1e9</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = k;i&lt;n;++i)&#123;</span><br><span class=\"line\">           Min=<span class=\"built_in\">min</span>(Min,sum[i-k]);</span><br><span class=\"line\">           Max=<span class=\"built_in\">max</span>(Max,sum[i]-Min);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       Max=<span class=\"built_in\">max</span>(Max,sum[k<span class=\"number\">-1</span>]);</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Max&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           l=mid;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           r=mid;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;(<span class=\"keyword\">int</span>)r&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/13/MaxMedian/MaxMedian.png\" class=\"\">\n\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>这题是长度不小于k连续子序列排队后的最大中位数。其中排序后+中位数定义下标为$\\lfloor(r-l+1)/2\\rfloor$.</p>\n<p>###分析<br>这是一道求长度不小于k的连续子序列问题，但它又不是简单求连续子序列的问题。而是求中位数，而且是子序列排序后的中位数，并且要中位数最大。这种场景很难不让人想到二分答案+问题转化。<br>通过观察不难发现</p>\n<ul>\n<li>如果连续子序列长度是偶数，如[1,2,3,4,5,6],那么大于等于中位数的数会比小于中位数的数多两个。</li>\n<li>如果连续子序列的长度是奇数，如[1,2,3,4,5]那么大于等于中位数的数会比小于中位数的数一两个。<br>除上面所述两中情况之外不会有其他情况。</li>\n</ul>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>根据分析可以巧妙设计算法，假设答案ans，如果序列中的值大于等于ans，令其等于1，否等于-1。如果变换后的序列中长度不小于k的最大连续子序列的值小于0，就说明中位数ans设大了，则答案往小取，否则答案往大取，直到二分区间无穷小。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">200002</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum[<span class=\"number\">200002</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1C.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// 关同步流</span></span><br><span class=\"line\">     ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">     cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> l=<span class=\"number\">-1e9</span>;   <span class=\"comment\">// 答案左区间</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r=<span class=\"number\">1e9</span>;    <span class=\"comment\">// 答案右区间</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r-l&gt;<span class=\"number\">1e-5</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//求变形之后地前缀和</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[<span class=\"number\">0</span>]&gt;=mid)&#123;</span><br><span class=\"line\">            sum[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            sum[<span class=\"number\">0</span>]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;n;++j)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(a[j]&gt;=mid)&#123;</span><br><span class=\"line\">               sum[j]=sum[j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               sum[j]=sum[j<span class=\"number\">-1</span>]<span class=\"number\">-1</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 求最大子段和</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> Min=<span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> Max=<span class=\"number\">-1e9</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = k;i&lt;n;++i)&#123;</span><br><span class=\"line\">           Min=<span class=\"built_in\">min</span>(Min,sum[i-k]);</span><br><span class=\"line\">           Max=<span class=\"built_in\">max</span>(Max,sum[i]-Min);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       Max=<span class=\"built_in\">max</span>(Max,sum[k<span class=\"number\">-1</span>]);</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Max&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           l=mid;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           r=mid;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;(<span class=\"keyword\">int</span>)r&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"Postons","date":"2021-06-09T06:44:47.000Z","_content":"\n# 题目\n{% asset_img Potions(Hard_version).png %}\n#### 题目分析\n题目大概意思就是给出n个药水，每种药水会让生命值变化，你从左到右走，经过这个位置的时候可以拿起这瓶药水也可以忽略这瓶药水。你的初始生命值为0，并且整个过程中你的生命值不能低于0，问你最多能拿多少药水。\n\n#### 题解\n这个题目和最大连续子序列不同，这个是可以不连续的。\n\n- 贪心：使用贪心的策略，每次只要生命值允许，就拿这瓶药，并且记录自己拿了那些药。\n\n- 反悔：如果走到一个地方，拿了这瓶药之后，自己的生命会比0小，则比较：\n     - 若将之前所有药中生命值最小的一瓶比现在碰到的这瓶还小，那么丢弃之前那瓶药，而选择这瓶药，即反悔。\n     - 否则跳过这瓶药\n\n- 优先队列：由于每次都要比较之前已经拿了的药最小的，所以要用小根堆来记录之前已经喝过的药。\n\n#### 代码\n```c++\n#include<iostream>\n#include<queue>\nusing namespace std;\nlong long Now=0;    // 当前生命值\nint ans=0;    // 能够捡起的数量 \nint a[200004];\nint n;     // position数\nint main(){\n    //freopen(\"test/div1A.txt\",\"r\",stdin);\n    cin>>n;\n    priority_queue<int,vector<int>,greater<int>> Q;   // 小根堆\n    for(int i = 0;i<n;++i){\n        cin>>a[i];\n    }\n\n    for(int i =0;i<n;++i){\n        if(Now+a[i]<0){\n            if(!Q.empty()&&Q.top()<a[i]){\n                // 将小根堆顶部替换掉，由于Now本来就大于0，所以反悔后Now也大于0\n                Now=Now+a[i]-Q.top();\n                Q.pop();\n                Q.push(a[i]);\n                \n            }else{\n                continue;\n            }\n        }else{\n            Now+=a[i];\n            Q.push(a[i]);    // 把之前要的记录下来\n            ans++;\n        }\n    }\n    cout<<ans<<endl;\n}\n```\n\n\n","source":"_posts/Postons.md","raw":"---\ntitle: Postons\ndate: 2021-06-09 14:44:47\ncategories:\n   - div1\ntags:\n   - 反悔\n   - 贪心\n   - 优先队列\n---\n\n# 题目\n{% asset_img Potions(Hard_version).png %}\n#### 题目分析\n题目大概意思就是给出n个药水，每种药水会让生命值变化，你从左到右走，经过这个位置的时候可以拿起这瓶药水也可以忽略这瓶药水。你的初始生命值为0，并且整个过程中你的生命值不能低于0，问你最多能拿多少药水。\n\n#### 题解\n这个题目和最大连续子序列不同，这个是可以不连续的。\n\n- 贪心：使用贪心的策略，每次只要生命值允许，就拿这瓶药，并且记录自己拿了那些药。\n\n- 反悔：如果走到一个地方，拿了这瓶药之后，自己的生命会比0小，则比较：\n     - 若将之前所有药中生命值最小的一瓶比现在碰到的这瓶还小，那么丢弃之前那瓶药，而选择这瓶药，即反悔。\n     - 否则跳过这瓶药\n\n- 优先队列：由于每次都要比较之前已经拿了的药最小的，所以要用小根堆来记录之前已经喝过的药。\n\n#### 代码\n```c++\n#include<iostream>\n#include<queue>\nusing namespace std;\nlong long Now=0;    // 当前生命值\nint ans=0;    // 能够捡起的数量 \nint a[200004];\nint n;     // position数\nint main(){\n    //freopen(\"test/div1A.txt\",\"r\",stdin);\n    cin>>n;\n    priority_queue<int,vector<int>,greater<int>> Q;   // 小根堆\n    for(int i = 0;i<n;++i){\n        cin>>a[i];\n    }\n\n    for(int i =0;i<n;++i){\n        if(Now+a[i]<0){\n            if(!Q.empty()&&Q.top()<a[i]){\n                // 将小根堆顶部替换掉，由于Now本来就大于0，所以反悔后Now也大于0\n                Now=Now+a[i]-Q.top();\n                Q.pop();\n                Q.push(a[i]);\n                \n            }else{\n                continue;\n            }\n        }else{\n            Now+=a[i];\n            Q.push(a[i]);    // 把之前要的记录下来\n            ans++;\n        }\n    }\n    cout<<ans<<endl;\n}\n```\n\n\n","slug":"Postons","published":1,"updated":"2021-06-25T11:01:08.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqcf2glz00081ktk9b063mno","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/09/Postons/Potions(Hard_version).png\" class=\"\">\n<h4 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h4><p>题目大概意思就是给出n个药水，每种药水会让生命值变化，你从左到右走，经过这个位置的时候可以拿起这瓶药水也可以忽略这瓶药水。你的初始生命值为0，并且整个过程中你的生命值不能低于0，问你最多能拿多少药水。</p>\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><p>这个题目和最大连续子序列不同，这个是可以不连续的。</p>\n<ul>\n<li><p>贪心：使用贪心的策略，每次只要生命值允许，就拿这瓶药，并且记录自己拿了那些药。</p>\n</li>\n<li><p>反悔：如果走到一个地方，拿了这瓶药之后，自己的生命会比0小，则比较：</p>\n<ul>\n<li>若将之前所有药中生命值最小的一瓶比现在碰到的这瓶还小，那么丢弃之前那瓶药，而选择这瓶药，即反悔。</li>\n<li>否则跳过这瓶药</li>\n</ul>\n</li>\n<li><p>优先队列：由于每次都要比较之前已经拿了的药最小的，所以要用小根堆来记录之前已经喝过的药。</p>\n</li>\n</ul>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> Now=<span class=\"number\">0</span>;    <span class=\"comment\">// 当前生命值</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;    <span class=\"comment\">// 能够捡起的数量 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">200004</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;     <span class=\"comment\">// position数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1A.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    priority_queue&lt;<span class=\"keyword\">int</span>,vector&lt;<span class=\"keyword\">int</span>&gt;,greater&lt;<span class=\"keyword\">int</span>&gt;&gt; Q;   <span class=\"comment\">// 小根堆</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Now+a[i]&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Q.<span class=\"built_in\">empty</span>()&amp;&amp;Q.<span class=\"built_in\">top</span>()&lt;a[i])&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将小根堆顶部替换掉，由于Now本来就大于0，所以反悔后Now也大于0</span></span><br><span class=\"line\">                Now=Now+a[i]-Q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Now+=a[i];</span><br><span class=\"line\">            Q.<span class=\"built_in\">push</span>(a[i]);    <span class=\"comment\">// 把之前要的记录下来</span></span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/09/Postons/Potions(Hard_version).png\" class=\"\">\n<h4 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h4><p>题目大概意思就是给出n个药水，每种药水会让生命值变化，你从左到右走，经过这个位置的时候可以拿起这瓶药水也可以忽略这瓶药水。你的初始生命值为0，并且整个过程中你的生命值不能低于0，问你最多能拿多少药水。</p>\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><p>这个题目和最大连续子序列不同，这个是可以不连续的。</p>\n<ul>\n<li><p>贪心：使用贪心的策略，每次只要生命值允许，就拿这瓶药，并且记录自己拿了那些药。</p>\n</li>\n<li><p>反悔：如果走到一个地方，拿了这瓶药之后，自己的生命会比0小，则比较：</p>\n<ul>\n<li>若将之前所有药中生命值最小的一瓶比现在碰到的这瓶还小，那么丢弃之前那瓶药，而选择这瓶药，即反悔。</li>\n<li>否则跳过这瓶药</li>\n</ul>\n</li>\n<li><p>优先队列：由于每次都要比较之前已经拿了的药最小的，所以要用小根堆来记录之前已经喝过的药。</p>\n</li>\n</ul>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> Now=<span class=\"number\">0</span>;    <span class=\"comment\">// 当前生命值</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;    <span class=\"comment\">// 能够捡起的数量 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">200004</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;     <span class=\"comment\">// position数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1A.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    priority_queue&lt;<span class=\"keyword\">int</span>,vector&lt;<span class=\"keyword\">int</span>&gt;,greater&lt;<span class=\"keyword\">int</span>&gt;&gt; Q;   <span class=\"comment\">// 小根堆</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Now+a[i]&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Q.<span class=\"built_in\">empty</span>()&amp;&amp;Q.<span class=\"built_in\">top</span>()&lt;a[i])&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将小根堆顶部替换掉，由于Now本来就大于0，所以反悔后Now也大于0</span></span><br><span class=\"line\">                Now=Now+a[i]-Q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Now+=a[i];</span><br><span class=\"line\">            Q.<span class=\"built_in\">push</span>(a[i]);    <span class=\"comment\">// 把之前要的记录下来</span></span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"sptingboot集成mybatis","date":"2021-03-30T04:23:17.000Z","catagories":["springboot"],"_content":"\n\n# SpringBoot集成mybatis\n\n\n> ### 添加依赖\n\n&emsp;&emsp;在pom.xml文件中添加MySQL驱动依赖和mybatis依赖,MySQL不用加版本号，继承了父类的版本号，也可以自己指定版本号。\n```\n<!--MySQL驱动-->\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t</dependency>\n\n\n<!--MyBatis整合springboot框架的起步依赖-->\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t\t<version>2.0.0</version>\n\t\t</dependency>\n```\n>### 属性设置\n&emsp;&emsp;在GeneratorMapper.xml文件中进行连接数据库的属性设置，设置完成后生成即可。","source":"_posts/sptingboot集成mybatis.md","raw":"---\ntitle: sptingboot集成mybatis\ndate: 2021-03-30 12:23:17\ncatagories:\n- springboot\ntags:\n- JAVA\n- SptingBoot\n- 数据库\n---\n\n\n# SpringBoot集成mybatis\n\n\n> ### 添加依赖\n\n&emsp;&emsp;在pom.xml文件中添加MySQL驱动依赖和mybatis依赖,MySQL不用加版本号，继承了父类的版本号，也可以自己指定版本号。\n```\n<!--MySQL驱动-->\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t</dependency>\n\n\n<!--MyBatis整合springboot框架的起步依赖-->\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t\t<version>2.0.0</version>\n\t\t</dependency>\n```\n>### 属性设置\n&emsp;&emsp;在GeneratorMapper.xml文件中进行连接数据库的属性设置，设置完成后生成即可。","slug":"sptingboot集成mybatis","published":1,"updated":"2021-06-25T11:01:08.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqcf2gm000091ktkft4x4d8y","content":"<h1 id=\"SpringBoot集成mybatis\"><a href=\"#SpringBoot集成mybatis\" class=\"headerlink\" title=\"SpringBoot集成mybatis\"></a>SpringBoot集成mybatis</h1><blockquote>\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3></blockquote>\n<p>&emsp;&emsp;在pom.xml文件中添加MySQL驱动依赖和mybatis依赖,MySQL不用加版本号，继承了父类的版本号，也可以自己指定版本号。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--MySQL驱动--&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--MyBatis整合springboot框架的起步依赖--&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.0.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"属性设置\"><a href=\"#属性设置\" class=\"headerlink\" title=\"属性设置\"></a>属性设置</h3><p>&emsp;&emsp;在GeneratorMapper.xml文件中进行连接数据库的属性设置，设置完成后生成即可。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot集成mybatis\"><a href=\"#SpringBoot集成mybatis\" class=\"headerlink\" title=\"SpringBoot集成mybatis\"></a>SpringBoot集成mybatis</h1><blockquote>\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3></blockquote>\n<p>&emsp;&emsp;在pom.xml文件中添加MySQL驱动依赖和mybatis依赖,MySQL不用加版本号，继承了父类的版本号，也可以自己指定版本号。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--MySQL驱动--&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--MyBatis整合springboot框架的起步依赖--&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.0.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"属性设置\"><a href=\"#属性设置\" class=\"headerlink\" title=\"属性设置\"></a>属性设置</h3><p>&emsp;&emsp;在GeneratorMapper.xml文件中进行连接数据库的属性设置，设置完成后生成即可。</p>\n</blockquote>\n"},{"title":"USST题解报告","date":"2021-06-25T08:44:06.000Z","catagories":["题解报告"],"_content":"# 上海理工校赛题解报告\n\n## 小结\n数学题，不会\n\n## B题 [Bheith i ngra le](https://ac.nowcoder.com/acm/contest/17574/B)\n当初挣扎了一下，然后不会求给定i行j列的格子有多少单调曲线，就放弃了。\n\n## 分析\n* 题目的核心是是求给定i行j列的格子能够构造多少调单调曲线。可以用dp或者组合求解，不喜欢数学的我毅然投奔了dp。  \n* 不难发现，当给定了宽为i，高为j的格子矩阵的时候，我们分析右上角那块，如果这块不画，那么所有情况就会变成dp[i][j-1],如果这块画上，那么情况就会是dp[i-1][j]。则得到状态转移方程dp[i][j]=dp[i][j-1]+dp[i-1][j]。当然，边界条件还是值得考虑一下的。\n* 算出dp数组后，性高彩烈的用n<sup>3</sup>去套老鹅。其实我们确定了山顶左边位置l之后不用去确定右边的r，dp[n-l][h]就是右边包含山顶在内的全部可能。所以ans=ans+dp[l-1][h-1]*dp[n-l][h]即可。\n```c++\n#include<iostream>\nusing namespace std;\nlong long dp[2003][2003];\nlong long mod=1e9+7;\nlong long ans;\nint main(){\n\tint n,m;\n\tcin >>n>>m;\n    // 初始化高度为1时\n\tdp[1][1]=2;\n\tfor(int i = 2;i<=n;++i){\n\t\tdp[i][1]=dp[i-1][1]+1;\n\t}\n\t// 初始化宽度为1的时候\n\tfor(int j = 2;j<=m;++j){\n\t\tdp[1][j]=dp[1][j-1]+1;\n\t} \n    // 求dp，i为宽，j为高\n\tfor(int i = 2;i<=n;++i){\n\t\tfor(int j = 2;j<=m;++j){\n           dp[i][j]=(dp[i][j-1]+dp[i-1][j])%mod;\n\t\t}\n\t}\n\t\n\t// 宽度为0时答案应该为1，因为下面用的乘法\n\tfor(int j=0;j<=m;++j){\n\t\tdp[0][j]=1;\n\t} \n\n   // 高度为0时，也应该是1，即取0\n   for(int i = 0;i<=n;++i){\n\t   dp[i][0]=1;\n   }\n\t\n\t// cout<<dp[1][1]<<endl<<dp[2][1]<<endl<<dp[1][2]<<endl<<dp[2][2]<<endl<<dp[1][3]<<endl<<dp[2][3]<<endl; \n\n\t// 枚举山顶的情况,l是左边，r是右边，h是山高\n\tfor(int l = 1;l<=n;++l){\n\t\t\tfor(int h = 1;h<=m;++h){\n               ans = (ans+(dp[l-1][h-1]*dp[n-l][h])%mod)%mod;   // 是左边的情况乘以右边的情况\n\t\t\t}\n\t}\n\t\n\t// 加上山顶全为0的情况，只有一种\n\t ans=(ans+1)%mod;\n\n\tcout<<ans<<endl;\n}\n```\n\n## J题 [JXC&JESUS](https://ac.nowcoder.com/acm/contest/17574/J)\n这是一个数学题\n## 分析\n题目大概的意思是定义了一个函数  \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; <b>f(i,m)=p<sub>1</sub><sup> $\\lfloor  \\frac{a1}{m}  \\rfloor$</sup> * p<sub>2</sub><sup>a<sub>2<sub></sup> * ... * p<sub>k</sub><sup> a<sub>k</sub></sup></b>   \n其中p<sub>1</sub>,p<sub>2</sub> ...p<sub>k</sub>为i的质因数。给定参数n,m,L求  \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$\\sum\\limits_{i=L+1}^{L+n}$&nbsp;i&nbsp;-&nbsp;f(i,m)  \n这关系到i的质因数的问题，可以用线性筛求质因数。又f(i,m)只和m与其最小质因子有关，我们在线性筛的时候合数也是被其最小质因子筛掉。所以想到从线性筛的基础上进行状态转移，由小的质数推出合数的f(i,m)，从而使求答案也变成线性。另一种是求出了素数之后直接暴力，也能过。  \n根据以下算法枚举&nbsp;i&nbsp;进行计算\n* 当i是质数的时候，当m=1时，f[i]=i,否则f[i]=1。（注意：1不是质因数）  \n* 枚举质数prime[j]利用i对i*prime[j]进行推算。\n   * 当prime[j]不能整除i时，则prime[j]是i*prime[j]的最小质因子，且只有一个，cnt[i * prime[j]]&nbsp;=&nbsp;1。当m&nbsp;=&nbsp;1时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。(因为此时$\\lfloor  \\frac{a1}{m}  \\rfloor$为0)\n   * 当prime[j]能整除i时，则prime[j]也是i的最小质因子，此时cnt[i * prime[j]]&nbsp;=&nbsp;cnt[i]&nbsp;+&nbsp;1。当cnt[i * prime[j]]%m&nbsp;=0&nbsp;时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。（此时应该枚举新的i，就如线性筛那样。）  \n\n```c++\n#include <iostream>\n#include<cstring>\nusing namespace std;\n#define MAX 20000003\nint prime[MAX];   // 存素数\nbool isprime[MAX]; // 判断是否素数\nint n,m,L;\nint ans=0;   // 存放答案\nint cnt[MAX]; // 存放最小质因数的个数\nint CNT=1;\nint f[MAX];  // f存起来，因为可能提前求得\nint minp[MAX]; // 记录合数的最小质因子\n\n// 求素数\nvoid calPrime(){\n    prime[0]=1;\n    isprime[0]=isprime[1]=isprime[2]=true;\n    for(int i = 2;i<=MAX;++i){\n        if(isprime[i]){\n            prime[CNT++]=i;\n        }\n        // 将i的倍数标记为合数，合数只会被其最小质因子标记，所以很方便可求出最小质因子\n        for(int j = 1;j<CNT&&i*prime[j]<=MAX;++j){\n            isprime[i*prime[j]]=false;\n            // 如果i能够整除prime[j]，则退出\n            if(i%prime[j]==0){\n                break;\n            }\n        }\n    }\n}\n// 直接求f\nvoid  F(){\n    for(int i =2;i<=L+n;++i){\n       \n        // i是质数的情况,其最小质因数为其本身,则根据m讨论f\n        if(isprime[i]){\n            if(m==1){\n                f[i]=i;\n                cnt[i]=1;\n            }else{\n                f[i]=1;\n                cnt[i]=1;\n            }\n        }\n        // i不是质数的情况,枚举质数，不包括1\n        for(int j = 1;j<CNT&&i*prime[j]<=L+n;++j){\n            // 如果i不能整除prime[j],此时prime[j]是i*prime[j]的最小质因子，因为i非质数\n           if(i%prime[j]!=0){  \n               if(m==1){\n                   f[i*prime[j]]=i*prime[j];\n               }else{   //m!=1时，最最小质因数就无贡献了\n                   f[i*prime[j]]=i;\n               }\n               cnt[i*prime[j]]=1;\n           }else{ // 如果prime[j]能整除当前的i，则prime[j]也是i的最小质因子\n               cnt[i*prime[j]]=cnt[i]+1;\n               // 只有当cnt是m的倍数的时候，prime[j]才有贡献\n               if(cnt[i*prime[j]]%m==0){  \n                   f[i*prime[j]]=f[i]*prime[j];\n               }else{\n                   f[i*prime[j]]=f[i];\n               }\n               break;\n               \n           }\n        }\n    }\n}\n\nint main(){\n    memset(isprime,true,sizeof(isprime));\n    memset(cnt,1,sizeof(cnt));\n    memset(f,0,sizeof(f));\n    cin>>n>>m>>L;\n    calPrime(); //求素数\n    F();\n    for(int i = L+1;i<=L+n;++i){\n        ans+=i-f[i];\n    }\n    cout<<ans<<endl;\n}\n```\n\n## M题 [Minecraft](https://ac.nowcoder.com/acm/contest/17574/M)\n这题挺简单，毕竟人家说了时签到题，不过这个输入格式确实有点费脑。\n\n## 分析\n根据题目，差不多重点就是下面\n* 每次从房子的每根“柱子”最底下建起方块(因为不能流沙)。\n* 每次选定一个字母之后所以该字母的位置都要建方块！  \n* 最后要以最大字典序输出！  \n\n可以通过有向图和拓扑排序解决，先填充入度为0的字母，然后更新图，如果全部入度为0的都已经访问了还有入度不为0，就重建失败。  \n对于字典序问题，没有用优先队列，直接在while里面套一个for即可，并且要从字母Z遍历到A，特别注意的是，一旦找到一个字母后，要重新进行for循环，不然达不到字典序。就因为这个卡88.9%给我整吐了。\n\n``` c++\n#include<iostream>\n#include<cstring>\nusing namespace std;\n#define MAX 27     \nint t;   // 测试数\nint n,m,h;  // 长宽高\nint let[35][35][35];   // 在房子某个坐标的字母,用int存\nchar c;\ntypedef struct NODE{\n    int in=0;   // 入度\n    int out=0;  // 出度\n    int next[30000];  // 连接的下一个点，注意点的个数\n    bool isused=false;  // 记录是否已经访问过 \n    bool isExit=false;\n}NODE;\nchar ans[MAX]; // 存放答案的字母\nint  cnt=0;   // 答案中共有多少个字母\nNODE Node[MAX];    // 设置结点\nint main(){\n    //freopen(\"test/USSTM.txt\",\"r\",stdin);\n    cin>>t;\n    while(t--){\n        // 每次开始的时候记得还原\n\n        cnt=0;\n        c=0;\n        for(int i = 0;i<MAX;++i){\n            Node[i].in=0;\n            Node[i].isExit=false;\n            Node[i].isused=false;\n            Node[i].out=0;\n        }\n        cin>>n>>m>>h;\n        if(n==0||m==0||h==0){\n            cout<<\"-1\"<<endl;\n            continue;\n        }\n\n       // 输入考了一波理解\n        for(int k = h-1;k>=0;--k){\n        for(int i = 0;i<n;++i){\n            for(int j = 0;j<m;++j){\n                \n                cin>>c;\n               let[i][j][k]=(int)c-'A';\n               Node[let[i][j][k]].isExit=true;\n               \n            }\n         }\n         \n        }\n\n\n        // 开始构造图\n        for(int k = 1;k<h;++k){\n        for(int i = 0;i<n;++i){\n            for(int j = 0;j<m;++j){\n                // 如果和下面的不相等，则要生成边\n                if(let[i][j][k]!=let[i][j][k-1]){\n                    int tempU=let[i][j][k];\n                    int tempL=let[i][j][k-1];\n                    Node[tempU].in++;\n                    Node[tempL].next[Node[tempL].out++]=tempU;\n                }\n            }\n        }\n    }\n\n        bool canUsed=true;    // 记录能否找到入度为0且没有访问过的结点\n\n        while(canUsed){\n        canUsed=false;\n        // 从字母大的找起,这里就不用优先队列了\n        for(int i = 25;i>=0;--i){\n           // 本来有这个点才去判断\n           if(Node[i].isExit){\n                // 入度为0且没有访问过\n                if(Node[i].in==0&&!Node[i].isused){\n                    canUsed=true;\n                    ans[cnt++]=char(i+'A');\n                    // 更新结点状态,并更新其连接的边的状态\n                     Node[i].isused=true; \n                    for(int j = 0;j<Node[i].out;++j){\n                         Node[Node[i].next[j]].in--;\n                    }\n\n                    // 找到一个之后，一定要重新再来，不然达不到字典序\n                    break;\n                }\n           }\n        }\n\n    }\n\n        // 判断是否还有没有访问过的本来存在的点\n        bool flag=false;\n        for(int i = 25;i>=0;--i){\n           // 本来有这个点才去判断\n           if(Node[i].isExit){\n                if(!Node[i].isused){\n                    flag =true;\n                    break;\n                }\n           }\n        }\n        \n        if(flag){\n            cout<<\"-1\"<<endl;\n        }else{\n            for(int i = 0;i<cnt;++i){\n                cout<<ans[i];\n            }\n            cout<<endl;\n        }\n   \n    }\n\n}\n```\n\n","source":"_posts/USST题解报告.md","raw":"---\ntitle: USST题解报告\ndate: 2021-06-25 16:44:06\ncatagories:\n  - 题解报告\n---\n# 上海理工校赛题解报告\n\n## 小结\n数学题，不会\n\n## B题 [Bheith i ngra le](https://ac.nowcoder.com/acm/contest/17574/B)\n当初挣扎了一下，然后不会求给定i行j列的格子有多少单调曲线，就放弃了。\n\n## 分析\n* 题目的核心是是求给定i行j列的格子能够构造多少调单调曲线。可以用dp或者组合求解，不喜欢数学的我毅然投奔了dp。  \n* 不难发现，当给定了宽为i，高为j的格子矩阵的时候，我们分析右上角那块，如果这块不画，那么所有情况就会变成dp[i][j-1],如果这块画上，那么情况就会是dp[i-1][j]。则得到状态转移方程dp[i][j]=dp[i][j-1]+dp[i-1][j]。当然，边界条件还是值得考虑一下的。\n* 算出dp数组后，性高彩烈的用n<sup>3</sup>去套老鹅。其实我们确定了山顶左边位置l之后不用去确定右边的r，dp[n-l][h]就是右边包含山顶在内的全部可能。所以ans=ans+dp[l-1][h-1]*dp[n-l][h]即可。\n```c++\n#include<iostream>\nusing namespace std;\nlong long dp[2003][2003];\nlong long mod=1e9+7;\nlong long ans;\nint main(){\n\tint n,m;\n\tcin >>n>>m;\n    // 初始化高度为1时\n\tdp[1][1]=2;\n\tfor(int i = 2;i<=n;++i){\n\t\tdp[i][1]=dp[i-1][1]+1;\n\t}\n\t// 初始化宽度为1的时候\n\tfor(int j = 2;j<=m;++j){\n\t\tdp[1][j]=dp[1][j-1]+1;\n\t} \n    // 求dp，i为宽，j为高\n\tfor(int i = 2;i<=n;++i){\n\t\tfor(int j = 2;j<=m;++j){\n           dp[i][j]=(dp[i][j-1]+dp[i-1][j])%mod;\n\t\t}\n\t}\n\t\n\t// 宽度为0时答案应该为1，因为下面用的乘法\n\tfor(int j=0;j<=m;++j){\n\t\tdp[0][j]=1;\n\t} \n\n   // 高度为0时，也应该是1，即取0\n   for(int i = 0;i<=n;++i){\n\t   dp[i][0]=1;\n   }\n\t\n\t// cout<<dp[1][1]<<endl<<dp[2][1]<<endl<<dp[1][2]<<endl<<dp[2][2]<<endl<<dp[1][3]<<endl<<dp[2][3]<<endl; \n\n\t// 枚举山顶的情况,l是左边，r是右边，h是山高\n\tfor(int l = 1;l<=n;++l){\n\t\t\tfor(int h = 1;h<=m;++h){\n               ans = (ans+(dp[l-1][h-1]*dp[n-l][h])%mod)%mod;   // 是左边的情况乘以右边的情况\n\t\t\t}\n\t}\n\t\n\t// 加上山顶全为0的情况，只有一种\n\t ans=(ans+1)%mod;\n\n\tcout<<ans<<endl;\n}\n```\n\n## J题 [JXC&JESUS](https://ac.nowcoder.com/acm/contest/17574/J)\n这是一个数学题\n## 分析\n题目大概的意思是定义了一个函数  \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; <b>f(i,m)=p<sub>1</sub><sup> $\\lfloor  \\frac{a1}{m}  \\rfloor$</sup> * p<sub>2</sub><sup>a<sub>2<sub></sup> * ... * p<sub>k</sub><sup> a<sub>k</sub></sup></b>   \n其中p<sub>1</sub>,p<sub>2</sub> ...p<sub>k</sub>为i的质因数。给定参数n,m,L求  \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$\\sum\\limits_{i=L+1}^{L+n}$&nbsp;i&nbsp;-&nbsp;f(i,m)  \n这关系到i的质因数的问题，可以用线性筛求质因数。又f(i,m)只和m与其最小质因子有关，我们在线性筛的时候合数也是被其最小质因子筛掉。所以想到从线性筛的基础上进行状态转移，由小的质数推出合数的f(i,m)，从而使求答案也变成线性。另一种是求出了素数之后直接暴力，也能过。  \n根据以下算法枚举&nbsp;i&nbsp;进行计算\n* 当i是质数的时候，当m=1时，f[i]=i,否则f[i]=1。（注意：1不是质因数）  \n* 枚举质数prime[j]利用i对i*prime[j]进行推算。\n   * 当prime[j]不能整除i时，则prime[j]是i*prime[j]的最小质因子，且只有一个，cnt[i * prime[j]]&nbsp;=&nbsp;1。当m&nbsp;=&nbsp;1时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。(因为此时$\\lfloor  \\frac{a1}{m}  \\rfloor$为0)\n   * 当prime[j]能整除i时，则prime[j]也是i的最小质因子，此时cnt[i * prime[j]]&nbsp;=&nbsp;cnt[i]&nbsp;+&nbsp;1。当cnt[i * prime[j]]%m&nbsp;=0&nbsp;时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。（此时应该枚举新的i，就如线性筛那样。）  \n\n```c++\n#include <iostream>\n#include<cstring>\nusing namespace std;\n#define MAX 20000003\nint prime[MAX];   // 存素数\nbool isprime[MAX]; // 判断是否素数\nint n,m,L;\nint ans=0;   // 存放答案\nint cnt[MAX]; // 存放最小质因数的个数\nint CNT=1;\nint f[MAX];  // f存起来，因为可能提前求得\nint minp[MAX]; // 记录合数的最小质因子\n\n// 求素数\nvoid calPrime(){\n    prime[0]=1;\n    isprime[0]=isprime[1]=isprime[2]=true;\n    for(int i = 2;i<=MAX;++i){\n        if(isprime[i]){\n            prime[CNT++]=i;\n        }\n        // 将i的倍数标记为合数，合数只会被其最小质因子标记，所以很方便可求出最小质因子\n        for(int j = 1;j<CNT&&i*prime[j]<=MAX;++j){\n            isprime[i*prime[j]]=false;\n            // 如果i能够整除prime[j]，则退出\n            if(i%prime[j]==0){\n                break;\n            }\n        }\n    }\n}\n// 直接求f\nvoid  F(){\n    for(int i =2;i<=L+n;++i){\n       \n        // i是质数的情况,其最小质因数为其本身,则根据m讨论f\n        if(isprime[i]){\n            if(m==1){\n                f[i]=i;\n                cnt[i]=1;\n            }else{\n                f[i]=1;\n                cnt[i]=1;\n            }\n        }\n        // i不是质数的情况,枚举质数，不包括1\n        for(int j = 1;j<CNT&&i*prime[j]<=L+n;++j){\n            // 如果i不能整除prime[j],此时prime[j]是i*prime[j]的最小质因子，因为i非质数\n           if(i%prime[j]!=0){  \n               if(m==1){\n                   f[i*prime[j]]=i*prime[j];\n               }else{   //m!=1时，最最小质因数就无贡献了\n                   f[i*prime[j]]=i;\n               }\n               cnt[i*prime[j]]=1;\n           }else{ // 如果prime[j]能整除当前的i，则prime[j]也是i的最小质因子\n               cnt[i*prime[j]]=cnt[i]+1;\n               // 只有当cnt是m的倍数的时候，prime[j]才有贡献\n               if(cnt[i*prime[j]]%m==0){  \n                   f[i*prime[j]]=f[i]*prime[j];\n               }else{\n                   f[i*prime[j]]=f[i];\n               }\n               break;\n               \n           }\n        }\n    }\n}\n\nint main(){\n    memset(isprime,true,sizeof(isprime));\n    memset(cnt,1,sizeof(cnt));\n    memset(f,0,sizeof(f));\n    cin>>n>>m>>L;\n    calPrime(); //求素数\n    F();\n    for(int i = L+1;i<=L+n;++i){\n        ans+=i-f[i];\n    }\n    cout<<ans<<endl;\n}\n```\n\n## M题 [Minecraft](https://ac.nowcoder.com/acm/contest/17574/M)\n这题挺简单，毕竟人家说了时签到题，不过这个输入格式确实有点费脑。\n\n## 分析\n根据题目，差不多重点就是下面\n* 每次从房子的每根“柱子”最底下建起方块(因为不能流沙)。\n* 每次选定一个字母之后所以该字母的位置都要建方块！  \n* 最后要以最大字典序输出！  \n\n可以通过有向图和拓扑排序解决，先填充入度为0的字母，然后更新图，如果全部入度为0的都已经访问了还有入度不为0，就重建失败。  \n对于字典序问题，没有用优先队列，直接在while里面套一个for即可，并且要从字母Z遍历到A，特别注意的是，一旦找到一个字母后，要重新进行for循环，不然达不到字典序。就因为这个卡88.9%给我整吐了。\n\n``` c++\n#include<iostream>\n#include<cstring>\nusing namespace std;\n#define MAX 27     \nint t;   // 测试数\nint n,m,h;  // 长宽高\nint let[35][35][35];   // 在房子某个坐标的字母,用int存\nchar c;\ntypedef struct NODE{\n    int in=0;   // 入度\n    int out=0;  // 出度\n    int next[30000];  // 连接的下一个点，注意点的个数\n    bool isused=false;  // 记录是否已经访问过 \n    bool isExit=false;\n}NODE;\nchar ans[MAX]; // 存放答案的字母\nint  cnt=0;   // 答案中共有多少个字母\nNODE Node[MAX];    // 设置结点\nint main(){\n    //freopen(\"test/USSTM.txt\",\"r\",stdin);\n    cin>>t;\n    while(t--){\n        // 每次开始的时候记得还原\n\n        cnt=0;\n        c=0;\n        for(int i = 0;i<MAX;++i){\n            Node[i].in=0;\n            Node[i].isExit=false;\n            Node[i].isused=false;\n            Node[i].out=0;\n        }\n        cin>>n>>m>>h;\n        if(n==0||m==0||h==0){\n            cout<<\"-1\"<<endl;\n            continue;\n        }\n\n       // 输入考了一波理解\n        for(int k = h-1;k>=0;--k){\n        for(int i = 0;i<n;++i){\n            for(int j = 0;j<m;++j){\n                \n                cin>>c;\n               let[i][j][k]=(int)c-'A';\n               Node[let[i][j][k]].isExit=true;\n               \n            }\n         }\n         \n        }\n\n\n        // 开始构造图\n        for(int k = 1;k<h;++k){\n        for(int i = 0;i<n;++i){\n            for(int j = 0;j<m;++j){\n                // 如果和下面的不相等，则要生成边\n                if(let[i][j][k]!=let[i][j][k-1]){\n                    int tempU=let[i][j][k];\n                    int tempL=let[i][j][k-1];\n                    Node[tempU].in++;\n                    Node[tempL].next[Node[tempL].out++]=tempU;\n                }\n            }\n        }\n    }\n\n        bool canUsed=true;    // 记录能否找到入度为0且没有访问过的结点\n\n        while(canUsed){\n        canUsed=false;\n        // 从字母大的找起,这里就不用优先队列了\n        for(int i = 25;i>=0;--i){\n           // 本来有这个点才去判断\n           if(Node[i].isExit){\n                // 入度为0且没有访问过\n                if(Node[i].in==0&&!Node[i].isused){\n                    canUsed=true;\n                    ans[cnt++]=char(i+'A');\n                    // 更新结点状态,并更新其连接的边的状态\n                     Node[i].isused=true; \n                    for(int j = 0;j<Node[i].out;++j){\n                         Node[Node[i].next[j]].in--;\n                    }\n\n                    // 找到一个之后，一定要重新再来，不然达不到字典序\n                    break;\n                }\n           }\n        }\n\n    }\n\n        // 判断是否还有没有访问过的本来存在的点\n        bool flag=false;\n        for(int i = 25;i>=0;--i){\n           // 本来有这个点才去判断\n           if(Node[i].isExit){\n                if(!Node[i].isused){\n                    flag =true;\n                    break;\n                }\n           }\n        }\n        \n        if(flag){\n            cout<<\"-1\"<<endl;\n        }else{\n            for(int i = 0;i<cnt;++i){\n                cout<<ans[i];\n            }\n            cout<<endl;\n        }\n   \n    }\n\n}\n```\n\n","slug":"USST题解报告","published":1,"updated":"2021-06-25T11:01:08.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqcf2gm1000c1ktkcb2abe4b","content":"<h1 id=\"上海理工校赛题解报告\"><a href=\"#上海理工校赛题解报告\" class=\"headerlink\" title=\"上海理工校赛题解报告\"></a>上海理工校赛题解报告</h1><h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>数学题，不会</p>\n<h2 id=\"B题-Bheith-i-ngra-le\"><a href=\"#B题-Bheith-i-ngra-le\" class=\"headerlink\" title=\"B题 Bheith i ngra le\"></a>B题 <a href=\"https://ac.nowcoder.com/acm/contest/17574/B\">Bheith i ngra le</a></h2><p>当初挣扎了一下，然后不会求给定i行j列的格子有多少单调曲线，就放弃了。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>题目的核心是是求给定i行j列的格子能够构造多少调单调曲线。可以用dp或者组合求解，不喜欢数学的我毅然投奔了dp。  </li>\n<li>不难发现，当给定了宽为i，高为j的格子矩阵的时候，我们分析右上角那块，如果这块不画，那么所有情况就会变成dp[i][j-1],如果这块画上，那么情况就会是dp[i-1][j]。则得到状态转移方程dp[i][j]=dp[i][j-1]+dp[i-1][j]。当然，边界条件还是值得考虑一下的。</li>\n<li>算出dp数组后，性高彩烈的用n<sup>3</sup>去套老鹅。其实我们确定了山顶左边位置l之后不用去确定右边的r，dp[n-l][h]就是右边包含山顶在内的全部可能。所以ans=ans+dp[l-1][h-1]*dp[n-l][h]即可。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[<span class=\"number\">2003</span>][<span class=\"number\">2003</span>];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">\tcin &gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化高度为1时</span></span><br><span class=\"line\">\tdp[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t\tdp[i][<span class=\"number\">1</span>]=dp[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化宽度为1的时候</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>;j&lt;=m;++j)&#123;</span><br><span class=\"line\">\t\tdp[<span class=\"number\">1</span>][j]=dp[<span class=\"number\">1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">    <span class=\"comment\">// 求dp，i为宽，j为高</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>;j&lt;=m;++j)&#123;</span><br><span class=\"line\">           dp[i][j]=(dp[i][j<span class=\"number\">-1</span>]+dp[i<span class=\"number\">-1</span>][j])%mod;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 宽度为0时答案应该为1，因为下面用的乘法</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=m;++j)&#123;</span><br><span class=\"line\">\t\tdp[<span class=\"number\">0</span>][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 高度为0时，也应该是1，即取0</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t   dp[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// cout&lt;&lt;dp[1][1]&lt;&lt;endl&lt;&lt;dp[2][1]&lt;&lt;endl&lt;&lt;dp[1][2]&lt;&lt;endl&lt;&lt;dp[2][2]&lt;&lt;endl&lt;&lt;dp[1][3]&lt;&lt;endl&lt;&lt;dp[2][3]&lt;&lt;endl; </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 枚举山顶的情况,l是左边，r是右边，h是山高</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>;l&lt;=n;++l)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;h&lt;=m;++h)&#123;</span><br><span class=\"line\">               ans = (ans+(dp[l<span class=\"number\">-1</span>][h<span class=\"number\">-1</span>]*dp[n-l][h])%mod)%mod;   <span class=\"comment\">// 是左边的情况乘以右边的情况</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 加上山顶全为0的情况，只有一种</span></span><br><span class=\"line\">\t ans=(ans+<span class=\"number\">1</span>)%mod;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"J题-JXC-amp-JESUS\"><a href=\"#J题-JXC-amp-JESUS\" class=\"headerlink\" title=\"J题 JXC&amp;JESUS\"></a>J题 <a href=\"https://ac.nowcoder.com/acm/contest/17574/J\">JXC&amp;JESUS</a></h2><p>这是一个数学题</p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>题目大概的意思是定义了一个函数<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; <b>f(i,m)=p<sub>1</sub><sup> $\\lfloor  \\frac{a1}{m}  \\rfloor$</sup> * p<sub>2</sub><sup>a<sub>2<sub></sup> * … * p<sub>k</sub><sup> a<sub>k</sub></sup></b><br>其中p<sub>1</sub>,p<sub>2</sub> …p<sub>k</sub>为i的质因数。给定参数n,m,L求<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$\\sum\\limits_{i=L+1}^{L+n}$&nbsp;i&nbsp;-&nbsp;f(i,m)<br>这关系到i的质因数的问题，可以用线性筛求质因数。又f(i,m)只和m与其最小质因子有关，我们在线性筛的时候合数也是被其最小质因子筛掉。所以想到从线性筛的基础上进行状态转移，由小的质数推出合数的f(i,m)，从而使求答案也变成线性。另一种是求出了素数之后直接暴力，也能过。<br>根据以下算法枚举&nbsp;i&nbsp;进行计算</p>\n<ul>\n<li>当i是质数的时候，当m=1时，f[i]=i,否则f[i]=1。（注意：1不是质因数）  </li>\n<li>枚举质数prime[j]利用i对i*prime[j]进行推算。<ul>\n<li>当prime[j]不能整除i时，则prime[j]是i*prime[j]的最小质因子，且只有一个，cnt[i * prime[j]]&nbsp;=&nbsp;1。当m&nbsp;=&nbsp;1时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。(因为此时$\\lfloor  \\frac{a1}{m}  \\rfloor$为0)</li>\n<li>当prime[j]能整除i时，则prime[j]也是i的最小质因子，此时cnt[i * prime[j]]&nbsp;=&nbsp;cnt[i]&nbsp;+&nbsp;1。当cnt[i * prime[j]]%m&nbsp;=0&nbsp;时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。（此时应该枚举新的i，就如线性筛那样。）  </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 20000003</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> prime[MAX];   <span class=\"comment\">// 存素数</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> isprime[MAX]; <span class=\"comment\">// 判断是否素数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,L;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;   <span class=\"comment\">// 存放答案</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[MAX]; <span class=\"comment\">// 存放最小质因数的个数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> CNT=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[MAX];  <span class=\"comment\">// f存起来，因为可能提前求得</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> minp[MAX]; <span class=\"comment\">// 记录合数的最小质因子</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求素数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calPrime</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    prime[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    isprime[<span class=\"number\">0</span>]=isprime[<span class=\"number\">1</span>]=isprime[<span class=\"number\">2</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;=MAX;++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isprime[i])&#123;</span><br><span class=\"line\">            prime[CNT++]=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将i的倍数标记为合数，合数只会被其最小质因子标记，所以很方便可求出最小质因子</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;CNT&amp;&amp;i*prime[j]&lt;=MAX;++j)&#123;</span><br><span class=\"line\">            isprime[i*prime[j]]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 如果i能够整除prime[j]，则退出</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 直接求f</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>  <span class=\"title\">F</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">2</span>;i&lt;=L+n;++i)&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"comment\">// i是质数的情况,其最小质因数为其本身,则根据m讨论f</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isprime[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(m==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                f[i]=i;</span><br><span class=\"line\">                cnt[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                f[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                cnt[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// i不是质数的情况,枚举质数，不包括1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;CNT&amp;&amp;i*prime[j]&lt;=L+n;++j)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果i不能整除prime[j],此时prime[j]是i*prime[j]的最小质因子，因为i非质数</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(i%prime[j]!=<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">               <span class=\"keyword\">if</span>(m==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                   f[i*prime[j]]=i*prime[j];</span><br><span class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;   <span class=\"comment\">//m!=1时，最最小质因数就无贡献了</span></span><br><span class=\"line\">                   f[i*prime[j]]=i;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               cnt[i*prime[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">// 如果prime[j]能整除当前的i，则prime[j]也是i的最小质因子</span></span><br><span class=\"line\">               cnt[i*prime[j]]=cnt[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">               <span class=\"comment\">// 只有当cnt是m的倍数的时候，prime[j]才有贡献</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span>(cnt[i*prime[j]]%m==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">                   f[i*prime[j]]=f[i]*prime[j];</span><br><span class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                   f[i*prime[j]]=f[i];</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(isprime,<span class=\"literal\">true</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(isprime));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(cnt,<span class=\"number\">1</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(cnt));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(f,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(f));</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;L;</span><br><span class=\"line\">    <span class=\"built_in\">calPrime</span>(); <span class=\"comment\">//求素数</span></span><br><span class=\"line\">    <span class=\"built_in\">F</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = L+<span class=\"number\">1</span>;i&lt;=L+n;++i)&#123;</span><br><span class=\"line\">        ans+=i-f[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"M题-Minecraft\"><a href=\"#M题-Minecraft\" class=\"headerlink\" title=\"M题 Minecraft\"></a>M题 <a href=\"https://ac.nowcoder.com/acm/contest/17574/M\">Minecraft</a></h2><p>这题挺简单，毕竟人家说了时签到题，不过这个输入格式确实有点费脑。</p>\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>根据题目，差不多重点就是下面</p>\n<ul>\n<li>每次从房子的每根“柱子”最底下建起方块(因为不能流沙)。</li>\n<li>每次选定一个字母之后所以该字母的位置都要建方块！  </li>\n<li>最后要以最大字典序输出！  </li>\n</ul>\n<p>可以通过有向图和拓扑排序解决，先填充入度为0的字母，然后更新图，如果全部入度为0的都已经访问了还有入度不为0，就重建失败。<br>对于字典序问题，没有用优先队列，直接在while里面套一个for即可，并且要从字母Z遍历到A，特别注意的是，一旦找到一个字母后，要重新进行for循环，不然达不到字典序。就因为这个卡88.9%给我整吐了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 27     </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> t;   <span class=\"comment\">// 测试数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,h;  <span class=\"comment\">// 长宽高</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> let[<span class=\"number\">35</span>][<span class=\"number\">35</span>][<span class=\"number\">35</span>];   <span class=\"comment\">// 在房子某个坐标的字母,用int存</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NODE</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> in=<span class=\"number\">0</span>;   <span class=\"comment\">// 入度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> out=<span class=\"number\">0</span>;  <span class=\"comment\">// 出度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> next[<span class=\"number\">30000</span>];  <span class=\"comment\">// 连接的下一个点，注意点的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isused=<span class=\"literal\">false</span>;  <span class=\"comment\">// 记录是否已经访问过 </span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isExit=<span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;NODE;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ans[MAX]; <span class=\"comment\">// 存放答案的字母</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>  cnt=<span class=\"number\">0</span>;   <span class=\"comment\">// 答案中共有多少个字母</span></span><br><span class=\"line\">NODE Node[MAX];    <span class=\"comment\">// 设置结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/USSTM.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每次开始的时候记得还原</span></span><br><span class=\"line\"></span><br><span class=\"line\">        cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">        c=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;MAX;++i)&#123;</span><br><span class=\"line\">            Node[i].in=<span class=\"number\">0</span>;</span><br><span class=\"line\">            Node[i].isExit=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            Node[i].isused=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            Node[i].out=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cin&gt;&gt;n&gt;&gt;m&gt;&gt;h;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>||m==<span class=\"number\">0</span>||h==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 输入考了一波理解</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = h<span class=\"number\">-1</span>;k&gt;=<span class=\"number\">0</span>;--k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;m;++j)&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                cin&gt;&gt;c;</span><br><span class=\"line\">               let[i][j][k]=(<span class=\"keyword\">int</span>)c-<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">               Node[let[i][j][k]].isExit=<span class=\"literal\">true</span>;</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 开始构造图</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>;k&lt;h;++k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;m;++j)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果和下面的不相等，则要生成边</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(let[i][j][k]!=let[i][j][k<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tempU=let[i][j][k];</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tempL=let[i][j][k<span class=\"number\">-1</span>];</span><br><span class=\"line\">                    Node[tempU].in++;</span><br><span class=\"line\">                    Node[tempL].next[Node[tempL].out++]=tempU;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> canUsed=<span class=\"literal\">true</span>;    <span class=\"comment\">// 记录能否找到入度为0且没有访问过的结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(canUsed)&#123;</span><br><span class=\"line\">        canUsed=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从字母大的找起,这里就不用优先队列了</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">25</span>;i&gt;=<span class=\"number\">0</span>;--i)&#123;</span><br><span class=\"line\">           <span class=\"comment\">// 本来有这个点才去判断</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(Node[i].isExit)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 入度为0且没有访问过</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Node[i].in==<span class=\"number\">0</span>&amp;&amp;!Node[i].isused)&#123;</span><br><span class=\"line\">                    canUsed=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                    ans[cnt++]=<span class=\"built_in\"><span class=\"keyword\">char</span></span>(i+<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 更新结点状态,并更新其连接的边的状态</span></span><br><span class=\"line\">                     Node[i].isused=<span class=\"literal\">true</span>; </span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;Node[i].out;++j)&#123;</span><br><span class=\"line\">                         Node[Node[i].next[j]].in--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 找到一个之后，一定要重新再来，不然达不到字典序</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断是否还有没有访问过的本来存在的点</span></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">25</span>;i&gt;=<span class=\"number\">0</span>;--i)&#123;</span><br><span class=\"line\">           <span class=\"comment\">// 本来有这个点才去判断</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(Node[i].isExit)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!Node[i].isused)&#123;</span><br><span class=\"line\">                    flag =<span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;cnt;++i)&#123;</span><br><span class=\"line\">                cout&lt;&lt;ans[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"上海理工校赛题解报告\"><a href=\"#上海理工校赛题解报告\" class=\"headerlink\" title=\"上海理工校赛题解报告\"></a>上海理工校赛题解报告</h1><h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>数学题，不会</p>\n<h2 id=\"B题-Bheith-i-ngra-le\"><a href=\"#B题-Bheith-i-ngra-le\" class=\"headerlink\" title=\"B题 Bheith i ngra le\"></a>B题 <a href=\"https://ac.nowcoder.com/acm/contest/17574/B\">Bheith i ngra le</a></h2><p>当初挣扎了一下，然后不会求给定i行j列的格子有多少单调曲线，就放弃了。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>题目的核心是是求给定i行j列的格子能够构造多少调单调曲线。可以用dp或者组合求解，不喜欢数学的我毅然投奔了dp。  </li>\n<li>不难发现，当给定了宽为i，高为j的格子矩阵的时候，我们分析右上角那块，如果这块不画，那么所有情况就会变成dp[i][j-1],如果这块画上，那么情况就会是dp[i-1][j]。则得到状态转移方程dp[i][j]=dp[i][j-1]+dp[i-1][j]。当然，边界条件还是值得考虑一下的。</li>\n<li>算出dp数组后，性高彩烈的用n<sup>3</sup>去套老鹅。其实我们确定了山顶左边位置l之后不用去确定右边的r，dp[n-l][h]就是右边包含山顶在内的全部可能。所以ans=ans+dp[l-1][h-1]*dp[n-l][h]即可。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[<span class=\"number\">2003</span>][<span class=\"number\">2003</span>];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">\tcin &gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化高度为1时</span></span><br><span class=\"line\">\tdp[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t\tdp[i][<span class=\"number\">1</span>]=dp[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化宽度为1的时候</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>;j&lt;=m;++j)&#123;</span><br><span class=\"line\">\t\tdp[<span class=\"number\">1</span>][j]=dp[<span class=\"number\">1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">    <span class=\"comment\">// 求dp，i为宽，j为高</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>;j&lt;=m;++j)&#123;</span><br><span class=\"line\">           dp[i][j]=(dp[i][j<span class=\"number\">-1</span>]+dp[i<span class=\"number\">-1</span>][j])%mod;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 宽度为0时答案应该为1，因为下面用的乘法</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=m;++j)&#123;</span><br><span class=\"line\">\t\tdp[<span class=\"number\">0</span>][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 高度为0时，也应该是1，即取0</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t   dp[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// cout&lt;&lt;dp[1][1]&lt;&lt;endl&lt;&lt;dp[2][1]&lt;&lt;endl&lt;&lt;dp[1][2]&lt;&lt;endl&lt;&lt;dp[2][2]&lt;&lt;endl&lt;&lt;dp[1][3]&lt;&lt;endl&lt;&lt;dp[2][3]&lt;&lt;endl; </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 枚举山顶的情况,l是左边，r是右边，h是山高</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>;l&lt;=n;++l)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;h&lt;=m;++h)&#123;</span><br><span class=\"line\">               ans = (ans+(dp[l<span class=\"number\">-1</span>][h<span class=\"number\">-1</span>]*dp[n-l][h])%mod)%mod;   <span class=\"comment\">// 是左边的情况乘以右边的情况</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 加上山顶全为0的情况，只有一种</span></span><br><span class=\"line\">\t ans=(ans+<span class=\"number\">1</span>)%mod;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"J题-JXC-amp-JESUS\"><a href=\"#J题-JXC-amp-JESUS\" class=\"headerlink\" title=\"J题 JXC&amp;JESUS\"></a>J题 <a href=\"https://ac.nowcoder.com/acm/contest/17574/J\">JXC&amp;JESUS</a></h2><p>这是一个数学题</p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>题目大概的意思是定义了一个函数<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; <b>f(i,m)=p<sub>1</sub><sup> $\\lfloor  \\frac{a1}{m}  \\rfloor$</sup> * p<sub>2</sub><sup>a<sub>2<sub></sup> * … * p<sub>k</sub><sup> a<sub>k</sub></sup></b><br>其中p<sub>1</sub>,p<sub>2</sub> …p<sub>k</sub>为i的质因数。给定参数n,m,L求<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$\\sum\\limits_{i=L+1}^{L+n}$&nbsp;i&nbsp;-&nbsp;f(i,m)<br>这关系到i的质因数的问题，可以用线性筛求质因数。又f(i,m)只和m与其最小质因子有关，我们在线性筛的时候合数也是被其最小质因子筛掉。所以想到从线性筛的基础上进行状态转移，由小的质数推出合数的f(i,m)，从而使求答案也变成线性。另一种是求出了素数之后直接暴力，也能过。<br>根据以下算法枚举&nbsp;i&nbsp;进行计算</p>\n<ul>\n<li>当i是质数的时候，当m=1时，f[i]=i,否则f[i]=1。（注意：1不是质因数）  </li>\n<li>枚举质数prime[j]利用i对i*prime[j]进行推算。<ul>\n<li>当prime[j]不能整除i时，则prime[j]是i*prime[j]的最小质因子，且只有一个，cnt[i * prime[j]]&nbsp;=&nbsp;1。当m&nbsp;=&nbsp;1时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。(因为此时$\\lfloor  \\frac{a1}{m}  \\rfloor$为0)</li>\n<li>当prime[j]能整除i时，则prime[j]也是i的最小质因子，此时cnt[i * prime[j]]&nbsp;=&nbsp;cnt[i]&nbsp;+&nbsp;1。当cnt[i * prime[j]]%m&nbsp;=0&nbsp;时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。（此时应该枚举新的i，就如线性筛那样。）  </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 20000003</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> prime[MAX];   <span class=\"comment\">// 存素数</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> isprime[MAX]; <span class=\"comment\">// 判断是否素数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,L;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;   <span class=\"comment\">// 存放答案</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[MAX]; <span class=\"comment\">// 存放最小质因数的个数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> CNT=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[MAX];  <span class=\"comment\">// f存起来，因为可能提前求得</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> minp[MAX]; <span class=\"comment\">// 记录合数的最小质因子</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求素数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calPrime</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    prime[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    isprime[<span class=\"number\">0</span>]=isprime[<span class=\"number\">1</span>]=isprime[<span class=\"number\">2</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;=MAX;++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isprime[i])&#123;</span><br><span class=\"line\">            prime[CNT++]=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将i的倍数标记为合数，合数只会被其最小质因子标记，所以很方便可求出最小质因子</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;CNT&amp;&amp;i*prime[j]&lt;=MAX;++j)&#123;</span><br><span class=\"line\">            isprime[i*prime[j]]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 如果i能够整除prime[j]，则退出</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 直接求f</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>  <span class=\"title\">F</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">2</span>;i&lt;=L+n;++i)&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"comment\">// i是质数的情况,其最小质因数为其本身,则根据m讨论f</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isprime[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(m==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                f[i]=i;</span><br><span class=\"line\">                cnt[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                f[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                cnt[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// i不是质数的情况,枚举质数，不包括1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;CNT&amp;&amp;i*prime[j]&lt;=L+n;++j)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果i不能整除prime[j],此时prime[j]是i*prime[j]的最小质因子，因为i非质数</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(i%prime[j]!=<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">               <span class=\"keyword\">if</span>(m==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                   f[i*prime[j]]=i*prime[j];</span><br><span class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;   <span class=\"comment\">//m!=1时，最最小质因数就无贡献了</span></span><br><span class=\"line\">                   f[i*prime[j]]=i;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               cnt[i*prime[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">// 如果prime[j]能整除当前的i，则prime[j]也是i的最小质因子</span></span><br><span class=\"line\">               cnt[i*prime[j]]=cnt[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">               <span class=\"comment\">// 只有当cnt是m的倍数的时候，prime[j]才有贡献</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span>(cnt[i*prime[j]]%m==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">                   f[i*prime[j]]=f[i]*prime[j];</span><br><span class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                   f[i*prime[j]]=f[i];</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(isprime,<span class=\"literal\">true</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(isprime));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(cnt,<span class=\"number\">1</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(cnt));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(f,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(f));</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;L;</span><br><span class=\"line\">    <span class=\"built_in\">calPrime</span>(); <span class=\"comment\">//求素数</span></span><br><span class=\"line\">    <span class=\"built_in\">F</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = L+<span class=\"number\">1</span>;i&lt;=L+n;++i)&#123;</span><br><span class=\"line\">        ans+=i-f[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"M题-Minecraft\"><a href=\"#M题-Minecraft\" class=\"headerlink\" title=\"M题 Minecraft\"></a>M题 <a href=\"https://ac.nowcoder.com/acm/contest/17574/M\">Minecraft</a></h2><p>这题挺简单，毕竟人家说了时签到题，不过这个输入格式确实有点费脑。</p>\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>根据题目，差不多重点就是下面</p>\n<ul>\n<li>每次从房子的每根“柱子”最底下建起方块(因为不能流沙)。</li>\n<li>每次选定一个字母之后所以该字母的位置都要建方块！  </li>\n<li>最后要以最大字典序输出！  </li>\n</ul>\n<p>可以通过有向图和拓扑排序解决，先填充入度为0的字母，然后更新图，如果全部入度为0的都已经访问了还有入度不为0，就重建失败。<br>对于字典序问题，没有用优先队列，直接在while里面套一个for即可，并且要从字母Z遍历到A，特别注意的是，一旦找到一个字母后，要重新进行for循环，不然达不到字典序。就因为这个卡88.9%给我整吐了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 27     </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> t;   <span class=\"comment\">// 测试数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,h;  <span class=\"comment\">// 长宽高</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> let[<span class=\"number\">35</span>][<span class=\"number\">35</span>][<span class=\"number\">35</span>];   <span class=\"comment\">// 在房子某个坐标的字母,用int存</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NODE</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> in=<span class=\"number\">0</span>;   <span class=\"comment\">// 入度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> out=<span class=\"number\">0</span>;  <span class=\"comment\">// 出度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> next[<span class=\"number\">30000</span>];  <span class=\"comment\">// 连接的下一个点，注意点的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isused=<span class=\"literal\">false</span>;  <span class=\"comment\">// 记录是否已经访问过 </span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isExit=<span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;NODE;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ans[MAX]; <span class=\"comment\">// 存放答案的字母</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>  cnt=<span class=\"number\">0</span>;   <span class=\"comment\">// 答案中共有多少个字母</span></span><br><span class=\"line\">NODE Node[MAX];    <span class=\"comment\">// 设置结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/USSTM.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每次开始的时候记得还原</span></span><br><span class=\"line\"></span><br><span class=\"line\">        cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">        c=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;MAX;++i)&#123;</span><br><span class=\"line\">            Node[i].in=<span class=\"number\">0</span>;</span><br><span class=\"line\">            Node[i].isExit=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            Node[i].isused=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            Node[i].out=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cin&gt;&gt;n&gt;&gt;m&gt;&gt;h;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>||m==<span class=\"number\">0</span>||h==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 输入考了一波理解</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = h<span class=\"number\">-1</span>;k&gt;=<span class=\"number\">0</span>;--k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;m;++j)&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                cin&gt;&gt;c;</span><br><span class=\"line\">               let[i][j][k]=(<span class=\"keyword\">int</span>)c-<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">               Node[let[i][j][k]].isExit=<span class=\"literal\">true</span>;</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 开始构造图</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>;k&lt;h;++k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;m;++j)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果和下面的不相等，则要生成边</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(let[i][j][k]!=let[i][j][k<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tempU=let[i][j][k];</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tempL=let[i][j][k<span class=\"number\">-1</span>];</span><br><span class=\"line\">                    Node[tempU].in++;</span><br><span class=\"line\">                    Node[tempL].next[Node[tempL].out++]=tempU;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> canUsed=<span class=\"literal\">true</span>;    <span class=\"comment\">// 记录能否找到入度为0且没有访问过的结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(canUsed)&#123;</span><br><span class=\"line\">        canUsed=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从字母大的找起,这里就不用优先队列了</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">25</span>;i&gt;=<span class=\"number\">0</span>;--i)&#123;</span><br><span class=\"line\">           <span class=\"comment\">// 本来有这个点才去判断</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(Node[i].isExit)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 入度为0且没有访问过</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Node[i].in==<span class=\"number\">0</span>&amp;&amp;!Node[i].isused)&#123;</span><br><span class=\"line\">                    canUsed=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                    ans[cnt++]=<span class=\"built_in\"><span class=\"keyword\">char</span></span>(i+<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 更新结点状态,并更新其连接的边的状态</span></span><br><span class=\"line\">                     Node[i].isused=<span class=\"literal\">true</span>; </span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;Node[i].out;++j)&#123;</span><br><span class=\"line\">                         Node[Node[i].next[j]].in--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 找到一个之后，一定要重新再来，不然达不到字典序</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断是否还有没有访问过的本来存在的点</span></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">25</span>;i&gt;=<span class=\"number\">0</span>;--i)&#123;</span><br><span class=\"line\">           <span class=\"comment\">// 本来有这个点才去判断</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(Node[i].isExit)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!Node[i].isused)&#123;</span><br><span class=\"line\">                    flag =<span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;cnt;++i)&#123;</span><br><span class=\"line\">                cout&lt;&lt;ans[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"关于对floyd算法的质疑","date":"2021-04-17T16:24:38.000Z","_content":"# floyd算法\n所谓floyd算法，就是求图的每两个顶点的最短路径问题。算法用的是动态规划。\n循环N次，每次选取一个顶点K，比较图的每个顶点经过K到达其他顶点的距离和本来该顶点到达其他顶点的距离，并进行距离的更新。最后可求出每两个点的最短距离。\n\n#### 疑惑\n例如一个有向图，只有1->2和1->0->4->3->2这两条路径。前者长度8，后者总长度6。那么在选取0作起始点的时候，0->2没有更新成为最短路径，并且后来会把0抛弃掉，不考虑经过0，所以在选择经过0的时候，我们就没能求出1经过0到达2的最短路径。那么怎么还能算出1->2的最短路径？\n#### 理解\n在对0进行考虑的时候，我们已经更新了1->4的路径，而这条路径是从1经过0到达2的最短路径的一部分。所以其实经过0到达2的最短路径就已经被求出了一部分，所以接下来和0就没关系了。接下来的求法也同理。\n\n","source":"_posts/关于对floyd算法的质疑.md","raw":"---\ntitle: 关于对floyd算法的质疑\ndate: 2021-04-18 00:24:38\ntags:\n  - 动态规划\n---\n# floyd算法\n所谓floyd算法，就是求图的每两个顶点的最短路径问题。算法用的是动态规划。\n循环N次，每次选取一个顶点K，比较图的每个顶点经过K到达其他顶点的距离和本来该顶点到达其他顶点的距离，并进行距离的更新。最后可求出每两个点的最短距离。\n\n#### 疑惑\n例如一个有向图，只有1->2和1->0->4->3->2这两条路径。前者长度8，后者总长度6。那么在选取0作起始点的时候，0->2没有更新成为最短路径，并且后来会把0抛弃掉，不考虑经过0，所以在选择经过0的时候，我们就没能求出1经过0到达2的最短路径。那么怎么还能算出1->2的最短路径？\n#### 理解\n在对0进行考虑的时候，我们已经更新了1->4的路径，而这条路径是从1经过0到达2的最短路径的一部分。所以其实经过0到达2的最短路径就已经被求出了一部分，所以接下来和0就没关系了。接下来的求法也同理。\n\n","slug":"关于对floyd算法的质疑","published":1,"updated":"2021-06-25T11:01:08.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqcf2gm4000d1ktk6spshlk3","content":"<h1 id=\"floyd算法\"><a href=\"#floyd算法\" class=\"headerlink\" title=\"floyd算法\"></a>floyd算法</h1><p>所谓floyd算法，就是求图的每两个顶点的最短路径问题。算法用的是动态规划。<br>循环N次，每次选取一个顶点K，比较图的每个顶点经过K到达其他顶点的距离和本来该顶点到达其他顶点的距离，并进行距离的更新。最后可求出每两个点的最短距离。</p>\n<h4 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h4><p>例如一个有向图，只有1-&gt;2和1-&gt;0-&gt;4-&gt;3-&gt;2这两条路径。前者长度8，后者总长度6。那么在选取0作起始点的时候，0-&gt;2没有更新成为最短路径，并且后来会把0抛弃掉，不考虑经过0，所以在选择经过0的时候，我们就没能求出1经过0到达2的最短路径。那么怎么还能算出1-&gt;2的最短路径？</p>\n<h4 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h4><p>在对0进行考虑的时候，我们已经更新了1-&gt;4的路径，而这条路径是从1经过0到达2的最短路径的一部分。所以其实经过0到达2的最短路径就已经被求出了一部分，所以接下来和0就没关系了。接下来的求法也同理。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"floyd算法\"><a href=\"#floyd算法\" class=\"headerlink\" title=\"floyd算法\"></a>floyd算法</h1><p>所谓floyd算法，就是求图的每两个顶点的最短路径问题。算法用的是动态规划。<br>循环N次，每次选取一个顶点K，比较图的每个顶点经过K到达其他顶点的距离和本来该顶点到达其他顶点的距离，并进行距离的更新。最后可求出每两个点的最短距离。</p>\n<h4 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h4><p>例如一个有向图，只有1-&gt;2和1-&gt;0-&gt;4-&gt;3-&gt;2这两条路径。前者长度8，后者总长度6。那么在选取0作起始点的时候，0-&gt;2没有更新成为最短路径，并且后来会把0抛弃掉，不考虑经过0，所以在选择经过0的时候，我们就没能求出1经过0到达2的最短路径。那么怎么还能算出1-&gt;2的最短路径？</p>\n<h4 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h4><p>在对0进行考虑的时候，我们已经更新了1-&gt;4的路径，而这条路径是从1经过0到达2的最短路径的一部分。所以其实经过0到达2的最短路径就已经被求出了一部分，所以接下来和0就没关系了。接下来的求法也同理。</p>\n"},{"title":"数据备份","date":"2021-06-11T07:52:27.000Z","_content":"# 题目\n{% asset_img backUp.png %}\n### 题目简述\n大概就是有n个办公楼，要找出k对，每对之间拉一个电缆，并且每个楼只能用一次，求出最小的距离之和\n\n### 分析\n- 首先要明确，找出的n对楼里面，每对肯定是相邻的，若不相邻，则令其中间的任一一对代替，能得到更优结果\n- 如果每次只选择最小那对，也是不行的，如：\n    - 现在有一个原始的对序列 2 1 2 5 6，要找两队。则放到优先队列中有 1 2 2 5 6，如果先选最小的，则现在选的是1，由于1中两个城市在2 2 这两队中，所以2 2 要丢掉。则优先队列中能用的只剩下 5 6，则下次应该选择5。不难发现，如果不选1的话，选2 2明显会比选1 5好。到这里不难发现，我们要后悔。、\n- 那么怎么进行后悔呢？\n    - 我们在选择最小的1之后，2 2 本来是要废掉的，但是我们不直接丢掉他们，而是创建一个新的数为 2+2-1=3 放入优先队列中。则优先队列中剩下的为 3 5 6，这样我们下次选3就相当于选了 2+2-1+1，即 2 2，后悔成功。\n\n### 算法\n每次取最小的一个区间，然后将这个数两边得区间合并，并减去这个数，构成后悔结点（则原区间最左边和最右边还应该加一段无穷大）。一直做下去，最终即可得到结果。\n区间段用链表维护。需要注意的是链表的更新。\n\n### 代码\n```c++\n#include<iostream>\n#include<cstring>\n#include<queue>\nusing namespace std;\nlong long s[100002];     // 每个公司到起点的距离\n\n// 每个相邻区间作为一个结点\ntypedef struct Node{\n      long long  Len;            // 区间的长度\n      int pos;                   // 当前结点的位置c\n}NODE;\n\n// 仿函数\nstruct tmp{\n    bool operator() (Node a,Node b){\n        return a.Len>b.Len;\n    }\n};\n\nbool isUsed[100002];// 判断某个结点是否已经使用过\nint Next[100002];   // 存放某个结点的下一个结点\nint Prio[100002];   // 存放某个节点的一个结点 \nlong long val[100002]; // 要得到某个位置的值信息，不能从队列里获得，要另存  \n\nNODE sNode;\nint main(){\n    //freopen(\"test/div1C.txt\",\"r\",stdin);\n    // 初始化标记数组\n    memset(isUsed,false,sizeof(isUsed));\n    int n,k;    // 办公楼数和可以铺设的电网数\n    long long ans=0;\n    cin>>n>>k;\n    for(int i =0;i<n;++i){\n        cin>>s[i];\n    }\n    priority_queue<NODE,vector<NODE>,tmp> Q;    // 设置一个小根堆存放现有结点\n    \n    \n\n    // 初始化第一个结点\n    sNode.Len=s[1]-s[0];\n    sNode.pos=1;    // 从1开始\n    Prio[1]=0;     // 第一个结点前驱为空\n    Next[1]=2;       // 后继为1\n    val[1]=sNode.Len;\n    Q.push(sNode);  // 第一个结点入队\n\n    // 初始化其他结点,最后一个结点的下标是n-1，因为一共有n-1个结点\n    for(int i =1; i<n-1;++i){\n        sNode.Len=s[i+1]-s[i];\n        sNode.pos=i+1;    \n        Prio[i+1]=i;     \n        Next[i+1]=i+2;       \n        val[i+1]=sNode.Len;\n        Q.push(sNode);     \n    }\n\n    // 两端设极大\n    val[0]=2e9;\n    val[n]=2e9;\n\n\n    // 进行贪心选择\n    while(k!=0){\n        // 跳过无效结点\n        while(isUsed[Q.top().pos]){\n            Q.pop();\n        }\n        sNode=Q.top();  // 取出长度最小的那个有效结点\n        Q.pop();\n        ans+=sNode.Len;  // 取了这个点，答案要加上\n        \n        // 求新的结点的长度，实现隐式反悔\n        sNode.Len=val[Prio[sNode.pos]]+val[Next[sNode.pos]]-val[sNode.pos];\n        val[sNode.pos]=sNode.Len;\n        \n      \n        // 两端设置为已使用\n        isUsed[Prio[sNode.pos]]=true;\n        isUsed[Next[sNode.pos]]=true;\n        //更新新结点的前驱后继\n        Prio[sNode.pos]=Prio[Prio[sNode.pos]];\n        Next[sNode.pos]=Next[Next[sNode.pos]];\n\n        // 更新前面的前面的后继和后面的后面的前驱\n        // 注意Prio[sNode.pos]和Next[sNode.pos]已经变了\n        Next[Prio[sNode.pos]]=sNode.pos;\n        Prio[Next[sNode.pos]]=sNode.pos;\n\n        // 新结点入队\n        Q.push(sNode);\n        --k;\n    }\n    cout<<ans<<endl;\n}\n```","source":"_posts/数据备份.md","raw":"---\ntitle: 数据备份\ndate: 2021-06-11 15:52:27\ncategories:\n    -div1\ntags:\n    -贪心\n    -反悔\n    -优先队列\n---\n# 题目\n{% asset_img backUp.png %}\n### 题目简述\n大概就是有n个办公楼，要找出k对，每对之间拉一个电缆，并且每个楼只能用一次，求出最小的距离之和\n\n### 分析\n- 首先要明确，找出的n对楼里面，每对肯定是相邻的，若不相邻，则令其中间的任一一对代替，能得到更优结果\n- 如果每次只选择最小那对，也是不行的，如：\n    - 现在有一个原始的对序列 2 1 2 5 6，要找两队。则放到优先队列中有 1 2 2 5 6，如果先选最小的，则现在选的是1，由于1中两个城市在2 2 这两队中，所以2 2 要丢掉。则优先队列中能用的只剩下 5 6，则下次应该选择5。不难发现，如果不选1的话，选2 2明显会比选1 5好。到这里不难发现，我们要后悔。、\n- 那么怎么进行后悔呢？\n    - 我们在选择最小的1之后，2 2 本来是要废掉的，但是我们不直接丢掉他们，而是创建一个新的数为 2+2-1=3 放入优先队列中。则优先队列中剩下的为 3 5 6，这样我们下次选3就相当于选了 2+2-1+1，即 2 2，后悔成功。\n\n### 算法\n每次取最小的一个区间，然后将这个数两边得区间合并，并减去这个数，构成后悔结点（则原区间最左边和最右边还应该加一段无穷大）。一直做下去，最终即可得到结果。\n区间段用链表维护。需要注意的是链表的更新。\n\n### 代码\n```c++\n#include<iostream>\n#include<cstring>\n#include<queue>\nusing namespace std;\nlong long s[100002];     // 每个公司到起点的距离\n\n// 每个相邻区间作为一个结点\ntypedef struct Node{\n      long long  Len;            // 区间的长度\n      int pos;                   // 当前结点的位置c\n}NODE;\n\n// 仿函数\nstruct tmp{\n    bool operator() (Node a,Node b){\n        return a.Len>b.Len;\n    }\n};\n\nbool isUsed[100002];// 判断某个结点是否已经使用过\nint Next[100002];   // 存放某个结点的下一个结点\nint Prio[100002];   // 存放某个节点的一个结点 \nlong long val[100002]; // 要得到某个位置的值信息，不能从队列里获得，要另存  \n\nNODE sNode;\nint main(){\n    //freopen(\"test/div1C.txt\",\"r\",stdin);\n    // 初始化标记数组\n    memset(isUsed,false,sizeof(isUsed));\n    int n,k;    // 办公楼数和可以铺设的电网数\n    long long ans=0;\n    cin>>n>>k;\n    for(int i =0;i<n;++i){\n        cin>>s[i];\n    }\n    priority_queue<NODE,vector<NODE>,tmp> Q;    // 设置一个小根堆存放现有结点\n    \n    \n\n    // 初始化第一个结点\n    sNode.Len=s[1]-s[0];\n    sNode.pos=1;    // 从1开始\n    Prio[1]=0;     // 第一个结点前驱为空\n    Next[1]=2;       // 后继为1\n    val[1]=sNode.Len;\n    Q.push(sNode);  // 第一个结点入队\n\n    // 初始化其他结点,最后一个结点的下标是n-1，因为一共有n-1个结点\n    for(int i =1; i<n-1;++i){\n        sNode.Len=s[i+1]-s[i];\n        sNode.pos=i+1;    \n        Prio[i+1]=i;     \n        Next[i+1]=i+2;       \n        val[i+1]=sNode.Len;\n        Q.push(sNode);     \n    }\n\n    // 两端设极大\n    val[0]=2e9;\n    val[n]=2e9;\n\n\n    // 进行贪心选择\n    while(k!=0){\n        // 跳过无效结点\n        while(isUsed[Q.top().pos]){\n            Q.pop();\n        }\n        sNode=Q.top();  // 取出长度最小的那个有效结点\n        Q.pop();\n        ans+=sNode.Len;  // 取了这个点，答案要加上\n        \n        // 求新的结点的长度，实现隐式反悔\n        sNode.Len=val[Prio[sNode.pos]]+val[Next[sNode.pos]]-val[sNode.pos];\n        val[sNode.pos]=sNode.Len;\n        \n      \n        // 两端设置为已使用\n        isUsed[Prio[sNode.pos]]=true;\n        isUsed[Next[sNode.pos]]=true;\n        //更新新结点的前驱后继\n        Prio[sNode.pos]=Prio[Prio[sNode.pos]];\n        Next[sNode.pos]=Next[Next[sNode.pos]];\n\n        // 更新前面的前面的后继和后面的后面的前驱\n        // 注意Prio[sNode.pos]和Next[sNode.pos]已经变了\n        Next[Prio[sNode.pos]]=sNode.pos;\n        Prio[Next[sNode.pos]]=sNode.pos;\n\n        // 新结点入队\n        Q.push(sNode);\n        --k;\n    }\n    cout<<ans<<endl;\n}\n```","slug":"数据备份","published":1,"updated":"2021-06-25T11:01:08.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqcf2gmd00191ktkfyq75dnp","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/11/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/backUp.png\" class=\"\">\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>大概就是有n个办公楼，要找出k对，每对之间拉一个电缆，并且每个楼只能用一次，求出最小的距离之和</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>首先要明确，找出的n对楼里面，每对肯定是相邻的，若不相邻，则令其中间的任一一对代替，能得到更优结果</li>\n<li>如果每次只选择最小那对，也是不行的，如：<ul>\n<li>现在有一个原始的对序列 2 1 2 5 6，要找两队。则放到优先队列中有 1 2 2 5 6，如果先选最小的，则现在选的是1，由于1中两个城市在2 2 这两队中，所以2 2 要丢掉。则优先队列中能用的只剩下 5 6，则下次应该选择5。不难发现，如果不选1的话，选2 2明显会比选1 5好。到这里不难发现，我们要后悔。、</li>\n</ul>\n</li>\n<li>那么怎么进行后悔呢？<ul>\n<li>我们在选择最小的1之后，2 2 本来是要废掉的，但是我们不直接丢掉他们，而是创建一个新的数为 2+2-1=3 放入优先队列中。则优先队列中剩下的为 3 5 6，这样我们下次选3就相当于选了 2+2-1+1，即 2 2，后悔成功。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>每次取最小的一个区间，然后将这个数两边得区间合并，并减去这个数，构成后悔结点（则原区间最左边和最右边还应该加一段无穷大）。一直做下去，最终即可得到结果。<br>区间段用链表维护。需要注意的是链表的更新。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> s[<span class=\"number\">100002</span>];     <span class=\"comment\">// 每个公司到起点的距离</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个相邻区间作为一个结点</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">      <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>  Len;            <span class=\"comment\">// 区间的长度</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> pos;                   <span class=\"comment\">// 当前结点的位置c</span></span><br><span class=\"line\">&#125;NODE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 仿函数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tmp</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(Node a,Node b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.Len&gt;b.Len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> isUsed[<span class=\"number\">100002</span>];<span class=\"comment\">// 判断某个结点是否已经使用过</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Next[<span class=\"number\">100002</span>];   <span class=\"comment\">// 存放某个结点的下一个结点</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Prio[<span class=\"number\">100002</span>];   <span class=\"comment\">// 存放某个节点的一个结点 </span></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val[<span class=\"number\">100002</span>]; <span class=\"comment\">// 要得到某个位置的值信息，不能从队列里获得，要另存  </span></span><br><span class=\"line\"></span><br><span class=\"line\">NODE sNode;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1C.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化标记数组</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(isUsed,<span class=\"literal\">false</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(isUsed));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k;    <span class=\"comment\">// 办公楼数和可以铺设的电网数</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    priority_queue&lt;NODE,vector&lt;NODE&gt;,tmp&gt; Q;    <span class=\"comment\">// 设置一个小根堆存放现有结点</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化第一个结点</span></span><br><span class=\"line\">    sNode.Len=s[<span class=\"number\">1</span>]-s[<span class=\"number\">0</span>];</span><br><span class=\"line\">    sNode.pos=<span class=\"number\">1</span>;    <span class=\"comment\">// 从1开始</span></span><br><span class=\"line\">    Prio[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;     <span class=\"comment\">// 第一个结点前驱为空</span></span><br><span class=\"line\">    Next[<span class=\"number\">1</span>]=<span class=\"number\">2</span>;       <span class=\"comment\">// 后继为1</span></span><br><span class=\"line\">    val[<span class=\"number\">1</span>]=sNode.Len;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(sNode);  <span class=\"comment\">// 第一个结点入队</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化其他结点,最后一个结点的下标是n-1，因为一共有n-1个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>; i&lt;n<span class=\"number\">-1</span>;++i)&#123;</span><br><span class=\"line\">        sNode.Len=s[i+<span class=\"number\">1</span>]-s[i];</span><br><span class=\"line\">        sNode.pos=i+<span class=\"number\">1</span>;    </span><br><span class=\"line\">        Prio[i+<span class=\"number\">1</span>]=i;     </span><br><span class=\"line\">        Next[i+<span class=\"number\">1</span>]=i+<span class=\"number\">2</span>;       </span><br><span class=\"line\">        val[i+<span class=\"number\">1</span>]=sNode.Len;</span><br><span class=\"line\">        Q.<span class=\"built_in\">push</span>(sNode);     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 两端设极大</span></span><br><span class=\"line\">    val[<span class=\"number\">0</span>]=<span class=\"number\">2e9</span>;</span><br><span class=\"line\">    val[n]=<span class=\"number\">2e9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进行贪心选择</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳过无效结点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(isUsed[Q.<span class=\"built_in\">top</span>().pos])&#123;</span><br><span class=\"line\">            Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sNode=Q.<span class=\"built_in\">top</span>();  <span class=\"comment\">// 取出长度最小的那个有效结点</span></span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        ans+=sNode.Len;  <span class=\"comment\">// 取了这个点，答案要加上</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 求新的结点的长度，实现隐式反悔</span></span><br><span class=\"line\">        sNode.Len=val[Prio[sNode.pos]]+val[Next[sNode.pos]]-val[sNode.pos];</span><br><span class=\"line\">        val[sNode.pos]=sNode.Len;</span><br><span class=\"line\">        </span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">// 两端设置为已使用</span></span><br><span class=\"line\">        isUsed[Prio[sNode.pos]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        isUsed[Next[sNode.pos]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//更新新结点的前驱后继</span></span><br><span class=\"line\">        Prio[sNode.pos]=Prio[Prio[sNode.pos]];</span><br><span class=\"line\">        Next[sNode.pos]=Next[Next[sNode.pos]];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新前面的前面的后继和后面的后面的前驱</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意Prio[sNode.pos]和Next[sNode.pos]已经变了</span></span><br><span class=\"line\">        Next[Prio[sNode.pos]]=sNode.pos;</span><br><span class=\"line\">        Prio[Next[sNode.pos]]=sNode.pos;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 新结点入队</span></span><br><span class=\"line\">        Q.<span class=\"built_in\">push</span>(sNode);</span><br><span class=\"line\">        --k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/11/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/backUp.png\" class=\"\">\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>大概就是有n个办公楼，要找出k对，每对之间拉一个电缆，并且每个楼只能用一次，求出最小的距离之和</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>首先要明确，找出的n对楼里面，每对肯定是相邻的，若不相邻，则令其中间的任一一对代替，能得到更优结果</li>\n<li>如果每次只选择最小那对，也是不行的，如：<ul>\n<li>现在有一个原始的对序列 2 1 2 5 6，要找两队。则放到优先队列中有 1 2 2 5 6，如果先选最小的，则现在选的是1，由于1中两个城市在2 2 这两队中，所以2 2 要丢掉。则优先队列中能用的只剩下 5 6，则下次应该选择5。不难发现，如果不选1的话，选2 2明显会比选1 5好。到这里不难发现，我们要后悔。、</li>\n</ul>\n</li>\n<li>那么怎么进行后悔呢？<ul>\n<li>我们在选择最小的1之后，2 2 本来是要废掉的，但是我们不直接丢掉他们，而是创建一个新的数为 2+2-1=3 放入优先队列中。则优先队列中剩下的为 3 5 6，这样我们下次选3就相当于选了 2+2-1+1，即 2 2，后悔成功。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>每次取最小的一个区间，然后将这个数两边得区间合并，并减去这个数，构成后悔结点（则原区间最左边和最右边还应该加一段无穷大）。一直做下去，最终即可得到结果。<br>区间段用链表维护。需要注意的是链表的更新。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> s[<span class=\"number\">100002</span>];     <span class=\"comment\">// 每个公司到起点的距离</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个相邻区间作为一个结点</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">      <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>  Len;            <span class=\"comment\">// 区间的长度</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> pos;                   <span class=\"comment\">// 当前结点的位置c</span></span><br><span class=\"line\">&#125;NODE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 仿函数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tmp</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(Node a,Node b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.Len&gt;b.Len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> isUsed[<span class=\"number\">100002</span>];<span class=\"comment\">// 判断某个结点是否已经使用过</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Next[<span class=\"number\">100002</span>];   <span class=\"comment\">// 存放某个结点的下一个结点</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Prio[<span class=\"number\">100002</span>];   <span class=\"comment\">// 存放某个节点的一个结点 </span></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val[<span class=\"number\">100002</span>]; <span class=\"comment\">// 要得到某个位置的值信息，不能从队列里获得，要另存  </span></span><br><span class=\"line\"></span><br><span class=\"line\">NODE sNode;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1C.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化标记数组</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(isUsed,<span class=\"literal\">false</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(isUsed));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k;    <span class=\"comment\">// 办公楼数和可以铺设的电网数</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    priority_queue&lt;NODE,vector&lt;NODE&gt;,tmp&gt; Q;    <span class=\"comment\">// 设置一个小根堆存放现有结点</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化第一个结点</span></span><br><span class=\"line\">    sNode.Len=s[<span class=\"number\">1</span>]-s[<span class=\"number\">0</span>];</span><br><span class=\"line\">    sNode.pos=<span class=\"number\">1</span>;    <span class=\"comment\">// 从1开始</span></span><br><span class=\"line\">    Prio[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;     <span class=\"comment\">// 第一个结点前驱为空</span></span><br><span class=\"line\">    Next[<span class=\"number\">1</span>]=<span class=\"number\">2</span>;       <span class=\"comment\">// 后继为1</span></span><br><span class=\"line\">    val[<span class=\"number\">1</span>]=sNode.Len;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(sNode);  <span class=\"comment\">// 第一个结点入队</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化其他结点,最后一个结点的下标是n-1，因为一共有n-1个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>; i&lt;n<span class=\"number\">-1</span>;++i)&#123;</span><br><span class=\"line\">        sNode.Len=s[i+<span class=\"number\">1</span>]-s[i];</span><br><span class=\"line\">        sNode.pos=i+<span class=\"number\">1</span>;    </span><br><span class=\"line\">        Prio[i+<span class=\"number\">1</span>]=i;     </span><br><span class=\"line\">        Next[i+<span class=\"number\">1</span>]=i+<span class=\"number\">2</span>;       </span><br><span class=\"line\">        val[i+<span class=\"number\">1</span>]=sNode.Len;</span><br><span class=\"line\">        Q.<span class=\"built_in\">push</span>(sNode);     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 两端设极大</span></span><br><span class=\"line\">    val[<span class=\"number\">0</span>]=<span class=\"number\">2e9</span>;</span><br><span class=\"line\">    val[n]=<span class=\"number\">2e9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进行贪心选择</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳过无效结点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(isUsed[Q.<span class=\"built_in\">top</span>().pos])&#123;</span><br><span class=\"line\">            Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sNode=Q.<span class=\"built_in\">top</span>();  <span class=\"comment\">// 取出长度最小的那个有效结点</span></span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        ans+=sNode.Len;  <span class=\"comment\">// 取了这个点，答案要加上</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 求新的结点的长度，实现隐式反悔</span></span><br><span class=\"line\">        sNode.Len=val[Prio[sNode.pos]]+val[Next[sNode.pos]]-val[sNode.pos];</span><br><span class=\"line\">        val[sNode.pos]=sNode.Len;</span><br><span class=\"line\">        </span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">// 两端设置为已使用</span></span><br><span class=\"line\">        isUsed[Prio[sNode.pos]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        isUsed[Next[sNode.pos]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//更新新结点的前驱后继</span></span><br><span class=\"line\">        Prio[sNode.pos]=Prio[Prio[sNode.pos]];</span><br><span class=\"line\">        Next[sNode.pos]=Next[Next[sNode.pos]];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新前面的前面的后继和后面的后面的前驱</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意Prio[sNode.pos]和Next[sNode.pos]已经变了</span></span><br><span class=\"line\">        Next[Prio[sNode.pos]]=sNode.pos;</span><br><span class=\"line\">        Prio[Next[sNode.pos]]=sNode.pos;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 新结点入队</span></span><br><span class=\"line\">        Q.<span class=\"built_in\">push</span>(sNode);</span><br><span class=\"line\">        --k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"在O(logn)的复杂度下两数组的混合中位数","date":"2021-04-10T15:32:41.000Z","_content":"### 题目 \n设X[ 0 : n - 1]和Y[ 0 : n – 1 ]为两个数组，每个数组中含有n个已排好序的数。找出X和Y的2n个数的中位数。要求：O(logn)时间内\n\n##### 解析\n要在O(logn)时间内求解，则自然想到分治算法。求解思路与如下：\n先分别求数组X和Y的两个中位数MedX和MedY。则会有以下情况\n* （1）MedX==MedY。则很明显MedX即是2n个数的中位数。因为两个数组是完全等长的，所以两个数组中位数两边的数的个数，也是完全一样的。\n\n* （2）MedX>MedY\n  * 如果n是奇数\n这种情况下，比X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,...,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,...,X<sub>n-1</sub>一定比中位数大。所以中位数不会在X<sub>(n-1)/2+1</sub>,X(n-1)/2+2</sub>,...,X<sub>n-1</sub>中。同样Y<sub>0</sub>,Y<sub>1</sub>,...,Y<sub>(n-1)/2-1</sub>一定比中位数小。所以中位数在X<sub>0</sub>,X<sub>1</sub>,...,X<sub>(n-1)/2</sub>和Y<sub>(n-1)/2</sub>,Y<sub>n/2+2</sub>,...,Y<sub>n-1</sub>中。则只需要考察X[0:(n-1)/2:n-1]和Y[0:(n-1)/2]。\n  * 如果n是偶数\n  则X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,...,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,...,X<sub>n-1</sub>一定比中位数大。同样Y<sub>0</sub>,Y<sub>1</sub>,...,Y<sub>(n-)/2-2</sub>一定比中位数小。则只需要考察X[0:(n-1)/2+1]和Y[(n-1)/2-1:n-1]。\n\n由于在中位数两边加上或减去任意等数量的数并不影响中位数的取值,所以上述方法成立。\n* （3）MedX<MedY\n这种情况和上面的同理\n\n分到最后每个数组只有两个元素，则不可以再分下去，利用X和Y的中位数用直接方法求解。\n  \n``` c++\n#include<iostream>\nusing namespace std;\n/*\n函数名：FindMedian\n功能：  求数组的某一区间的中位数\n参数：  double Z[]-所求数组，int zl-数组的最小下标，int zr-数组的最大下标\n返回值：double-中位数\n*/\ndouble FindMedian(double Z[],int zl,int zr){\n       if((zr-zl)%2==0){\n           return Z[(zr+zl)/2];\n       }else{\n           return (Z[(zr+zl)/2]+Z[(zr+zl)/2+1])/2;\n       }\n}\n/*\n函数名：FindMedian\n功能：  求分别有序数组X某一区间和有序数组Y某一区间的混合中位数\n参数：  int X[]-数组X，int xl-数组X要考察的最小下标，int xr-数组x要考察的最大下标\n返回值：double-混合中位数\n*/\ndouble FindMixMedian(double X[],int xl,int xr,double Y[],int yl,int yr){\n    \n    double MedX=FindMedian(X,xl,xr);// 求X考察区域的中位数\n    double MedY=FindMedian(Y,yl,yr);// 求y所考察区域的中位数\n    // 若两个中位数相等，则所求便是混合区间的中位数\n    if(abs(MedX-MedY)<0.00001){\n        return MedY;\n    }\n    // 若两边都只剩一个了，就取平均\n    if(xl==xr&&yl==yr){\n        return (X[xl]+Y[xl])/2;\n    }\n    // 若每个数组只剩两个，则讨论求出中位数\n    if(xr-xl+1==2&&yr-yl+1==2){\n        // 若MedX大，则X[xr]大于X[xl]和Y[YL],则判断X[xr]和Y[yr]\n        if(MedX>MedY){    \n            if(X[xr]>=Y[yr]){     // 若X[xr]>=Y[yr],则可以确定地关系是Y[yl]<=Y[yr]<=X[xr]\n                if(X[xl]<Y[yl]){  // X[xl]<Y[yl]<=Y[yr]<=X[xr] \n                    return ((Y[yl]+Y[yr])/2);\n                }else{            // Y[yl]<=Y[yr]<X[xl]<=X[xr]或 Y[yl]<=X[xl]<=Y[yr]<=X[xr]\n                    return ((X[xl]+Y[yr])/2);\n                }\n            }else{ // 如果X[xr]比Y[Yr]小，则X[xl]一定比Y[yl]大,则 Y[yl]<X[xl]<=X[xr]<Y[yr]\n             return MedX;\n            }\n        }\n        // 若MedY大，则与上面的对称\n        if(MedX<MedY){     \n            if(Y[yr]>=X[xr]){\n                if(Y[yl]<X[xl]){\n                    return ((X[xl]+X[xr])/2);\n                }else{    \n                    return ((Y[yl]+X[xr])/2);\n                }  \n            } else{\n                return MedY;\n            }\n         }\n\n    }\n    // 区间划分\n    if(MedX>MedY){   // MedX大时，X取小的部分，Y取大的部分\n        if((xl-xr+1)%2!=0){    // 若区间个数为奇数\n           return FindMixMedian(X,xl,(xl+xr)/2,Y,(yl+yr)/2,yr);\n        }else{\n           return FindMixMedian(X,xl,(xl+xr)/2+1,Y,(yl+yr)/2,yr);\n        }\n    }else{           // MedX小时，X取大的部分，Y取小的部分\n        if((xl-xr+1)%2!=0){    // 若区间个数为奇数\n           return FindMixMedian(X,(xl+xr)/2,xr,Y,yl,(yl+yr)/2);\n        }else{\n           return FindMixMedian(X,(xl+xr)/2,xr,Y,yl,(yl+yr)/2+1);\n        }\n    }\n}\nint main(){\n    freopen(\"input1.txt\",\"r\",stdin);\n    freopen(\"output1.txt\",\"w\",stdout);\n    int n;     // 数组X和Y中每个数组所含有的元素个数   \n    double X[202]; \n    double Y[202];\n    double ans;\n    cin>>n;\n    for(int i = 0;i<n;++i){\n        cin>>X[i];\n    }\n    for(int i = 0;i<n;++i){\n        cin>>Y[i];\n    }\n    ans = FindMixMedian(X,0,n-1,Y,0,n-1);\n    cout<<ans<<endl;\n}\n```","source":"_posts/在O-logn-的复杂度下两数组的混合中位数.md","raw":"---\ntitle: 在O(logn)的复杂度下两数组的混合中位数\ndate: 2021-04-10 23:32:41\ncategories:\n  -算法\ntags:\n  -分治法\n---\n### 题目 \n设X[ 0 : n - 1]和Y[ 0 : n – 1 ]为两个数组，每个数组中含有n个已排好序的数。找出X和Y的2n个数的中位数。要求：O(logn)时间内\n\n##### 解析\n要在O(logn)时间内求解，则自然想到分治算法。求解思路与如下：\n先分别求数组X和Y的两个中位数MedX和MedY。则会有以下情况\n* （1）MedX==MedY。则很明显MedX即是2n个数的中位数。因为两个数组是完全等长的，所以两个数组中位数两边的数的个数，也是完全一样的。\n\n* （2）MedX>MedY\n  * 如果n是奇数\n这种情况下，比X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,...,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,...,X<sub>n-1</sub>一定比中位数大。所以中位数不会在X<sub>(n-1)/2+1</sub>,X(n-1)/2+2</sub>,...,X<sub>n-1</sub>中。同样Y<sub>0</sub>,Y<sub>1</sub>,...,Y<sub>(n-1)/2-1</sub>一定比中位数小。所以中位数在X<sub>0</sub>,X<sub>1</sub>,...,X<sub>(n-1)/2</sub>和Y<sub>(n-1)/2</sub>,Y<sub>n/2+2</sub>,...,Y<sub>n-1</sub>中。则只需要考察X[0:(n-1)/2:n-1]和Y[0:(n-1)/2]。\n  * 如果n是偶数\n  则X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,...,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,...,X<sub>n-1</sub>一定比中位数大。同样Y<sub>0</sub>,Y<sub>1</sub>,...,Y<sub>(n-)/2-2</sub>一定比中位数小。则只需要考察X[0:(n-1)/2+1]和Y[(n-1)/2-1:n-1]。\n\n由于在中位数两边加上或减去任意等数量的数并不影响中位数的取值,所以上述方法成立。\n* （3）MedX<MedY\n这种情况和上面的同理\n\n分到最后每个数组只有两个元素，则不可以再分下去，利用X和Y的中位数用直接方法求解。\n  \n``` c++\n#include<iostream>\nusing namespace std;\n/*\n函数名：FindMedian\n功能：  求数组的某一区间的中位数\n参数：  double Z[]-所求数组，int zl-数组的最小下标，int zr-数组的最大下标\n返回值：double-中位数\n*/\ndouble FindMedian(double Z[],int zl,int zr){\n       if((zr-zl)%2==0){\n           return Z[(zr+zl)/2];\n       }else{\n           return (Z[(zr+zl)/2]+Z[(zr+zl)/2+1])/2;\n       }\n}\n/*\n函数名：FindMedian\n功能：  求分别有序数组X某一区间和有序数组Y某一区间的混合中位数\n参数：  int X[]-数组X，int xl-数组X要考察的最小下标，int xr-数组x要考察的最大下标\n返回值：double-混合中位数\n*/\ndouble FindMixMedian(double X[],int xl,int xr,double Y[],int yl,int yr){\n    \n    double MedX=FindMedian(X,xl,xr);// 求X考察区域的中位数\n    double MedY=FindMedian(Y,yl,yr);// 求y所考察区域的中位数\n    // 若两个中位数相等，则所求便是混合区间的中位数\n    if(abs(MedX-MedY)<0.00001){\n        return MedY;\n    }\n    // 若两边都只剩一个了，就取平均\n    if(xl==xr&&yl==yr){\n        return (X[xl]+Y[xl])/2;\n    }\n    // 若每个数组只剩两个，则讨论求出中位数\n    if(xr-xl+1==2&&yr-yl+1==2){\n        // 若MedX大，则X[xr]大于X[xl]和Y[YL],则判断X[xr]和Y[yr]\n        if(MedX>MedY){    \n            if(X[xr]>=Y[yr]){     // 若X[xr]>=Y[yr],则可以确定地关系是Y[yl]<=Y[yr]<=X[xr]\n                if(X[xl]<Y[yl]){  // X[xl]<Y[yl]<=Y[yr]<=X[xr] \n                    return ((Y[yl]+Y[yr])/2);\n                }else{            // Y[yl]<=Y[yr]<X[xl]<=X[xr]或 Y[yl]<=X[xl]<=Y[yr]<=X[xr]\n                    return ((X[xl]+Y[yr])/2);\n                }\n            }else{ // 如果X[xr]比Y[Yr]小，则X[xl]一定比Y[yl]大,则 Y[yl]<X[xl]<=X[xr]<Y[yr]\n             return MedX;\n            }\n        }\n        // 若MedY大，则与上面的对称\n        if(MedX<MedY){     \n            if(Y[yr]>=X[xr]){\n                if(Y[yl]<X[xl]){\n                    return ((X[xl]+X[xr])/2);\n                }else{    \n                    return ((Y[yl]+X[xr])/2);\n                }  \n            } else{\n                return MedY;\n            }\n         }\n\n    }\n    // 区间划分\n    if(MedX>MedY){   // MedX大时，X取小的部分，Y取大的部分\n        if((xl-xr+1)%2!=0){    // 若区间个数为奇数\n           return FindMixMedian(X,xl,(xl+xr)/2,Y,(yl+yr)/2,yr);\n        }else{\n           return FindMixMedian(X,xl,(xl+xr)/2+1,Y,(yl+yr)/2,yr);\n        }\n    }else{           // MedX小时，X取大的部分，Y取小的部分\n        if((xl-xr+1)%2!=0){    // 若区间个数为奇数\n           return FindMixMedian(X,(xl+xr)/2,xr,Y,yl,(yl+yr)/2);\n        }else{\n           return FindMixMedian(X,(xl+xr)/2,xr,Y,yl,(yl+yr)/2+1);\n        }\n    }\n}\nint main(){\n    freopen(\"input1.txt\",\"r\",stdin);\n    freopen(\"output1.txt\",\"w\",stdout);\n    int n;     // 数组X和Y中每个数组所含有的元素个数   \n    double X[202]; \n    double Y[202];\n    double ans;\n    cin>>n;\n    for(int i = 0;i<n;++i){\n        cin>>X[i];\n    }\n    for(int i = 0;i<n;++i){\n        cin>>Y[i];\n    }\n    ans = FindMixMedian(X,0,n-1,Y,0,n-1);\n    cout<<ans<<endl;\n}\n```","slug":"在O-logn-的复杂度下两数组的混合中位数","published":1,"updated":"2021-06-25T11:01:08.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqcf2gme001a1ktkeuwygld2","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>设X[ 0 : n - 1]和Y[ 0 : n – 1 ]为两个数组，每个数组中含有n个已排好序的数。找出X和Y的2n个数的中位数。要求：O(logn)时间内</p>\n<h5 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h5><p>要在O(logn)时间内求解，则自然想到分治算法。求解思路与如下：<br>先分别求数组X和Y的两个中位数MedX和MedY。则会有以下情况</p>\n<ul>\n<li><p>（1）MedX==MedY。则很明显MedX即是2n个数的中位数。因为两个数组是完全等长的，所以两个数组中位数两边的数的个数，也是完全一样的。</p>\n</li>\n<li><p>（2）MedX&gt;MedY</p>\n<ul>\n<li>如果n是奇数<br>这种情况下，比X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,…,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,…,X<sub>n-1</sub>一定比中位数大。所以中位数不会在X<sub>(n-1)/2+1</sub>,X(n-1)/2+2</sub>,…,X<sub>n-1</sub>中。同样Y<sub>0</sub>,Y<sub>1</sub>,…,Y<sub>(n-1)/2-1</sub>一定比中位数小。所以中位数在X<sub>0</sub>,X<sub>1</sub>,…,X<sub>(n-1)/2</sub>和Y<sub>(n-1)/2</sub>,Y<sub>n/2+2</sub>,…,Y<sub>n-1</sub>中。则只需要考察X[0:(n-1)/2:n-1]和Y[0:(n-1)/2]。</li>\n<li>如果n是偶数<br>则X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,…,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,…,X<sub>n-1</sub>一定比中位数大。同样Y<sub>0</sub>,Y<sub>1</sub>,…,Y<sub>(n-)/2-2</sub>一定比中位数小。则只需要考察X[0:(n-1)/2+1]和Y[(n-1)/2-1:n-1]。</li>\n</ul>\n</li>\n</ul>\n<p>由于在中位数两边加上或减去任意等数量的数并不影响中位数的取值,所以上述方法成立。</p>\n<ul>\n<li>（3）MedX&lt;MedY<br>这种情况和上面的同理</li>\n</ul>\n<p>分到最后每个数组只有两个元素，则不可以再分下去，利用X和Y的中位数用直接方法求解。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">函数名：FindMedian</span></span><br><span class=\"line\"><span class=\"comment\">功能：  求数组的某一区间的中位数</span></span><br><span class=\"line\"><span class=\"comment\">参数：  double Z[]-所求数组，int zl-数组的最小下标，int zr-数组的最大下标</span></span><br><span class=\"line\"><span class=\"comment\">返回值：double-中位数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">FindMedian</span><span class=\"params\">(<span class=\"keyword\">double</span> Z[],<span class=\"keyword\">int</span> zl,<span class=\"keyword\">int</span> zr)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>((zr-zl)%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> Z[(zr+zl)/<span class=\"number\">2</span>];</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"built_in\"><span class=\"keyword\">return</span></span> (Z[(zr+zl)/<span class=\"number\">2</span>]+Z[(zr+zl)/<span class=\"number\">2</span>+<span class=\"number\">1</span>])/<span class=\"number\">2</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">函数名：FindMedian</span></span><br><span class=\"line\"><span class=\"comment\">功能：  求分别有序数组X某一区间和有序数组Y某一区间的混合中位数</span></span><br><span class=\"line\"><span class=\"comment\">参数：  int X[]-数组X，int xl-数组X要考察的最小下标，int xr-数组x要考察的最大下标</span></span><br><span class=\"line\"><span class=\"comment\">返回值：double-混合中位数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">FindMixMedian</span><span class=\"params\">(<span class=\"keyword\">double</span> X[],<span class=\"keyword\">int</span> xl,<span class=\"keyword\">int</span> xr,<span class=\"keyword\">double</span> Y[],<span class=\"keyword\">int</span> yl,<span class=\"keyword\">int</span> yr)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">double</span> MedX=<span class=\"built_in\">FindMedian</span>(X,xl,xr);<span class=\"comment\">// 求X考察区域的中位数</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> MedY=<span class=\"built_in\">FindMedian</span>(Y,yl,yr);<span class=\"comment\">// 求y所考察区域的中位数</span></span><br><span class=\"line\">    <span class=\"comment\">// 若两个中位数相等，则所求便是混合区间的中位数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(MedX-MedY)&lt;<span class=\"number\">0.00001</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MedY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 若两边都只剩一个了，就取平均</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xl==xr&amp;&amp;yl==yr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (X[xl]+Y[xl])/<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 若每个数组只剩两个，则讨论求出中位数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xr-xl+<span class=\"number\">1</span>==<span class=\"number\">2</span>&amp;&amp;yr-yl+<span class=\"number\">1</span>==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若MedX大，则X[xr]大于X[xl]和Y[YL],则判断X[xr]和Y[yr]</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MedX&gt;MedY)&#123;    </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(X[xr]&gt;=Y[yr])&#123;     <span class=\"comment\">// 若X[xr]&gt;=Y[yr],则可以确定地关系是Y[yl]&lt;=Y[yr]&lt;=X[xr]</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(X[xl]&lt;Y[yl])&#123;  <span class=\"comment\">// X[xl]&lt;Y[yl]&lt;=Y[yr]&lt;=X[xr] </span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ((Y[yl]+Y[yr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;            <span class=\"comment\">// Y[yl]&lt;=Y[yr]&lt;X[xl]&lt;=X[xr]或 Y[yl]&lt;=X[xl]&lt;=Y[yr]&lt;=X[xr]</span></span><br><span class=\"line\">                    <span class=\"built_in\"><span class=\"keyword\">return</span></span> ((X[xl]+Y[yr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">// 如果X[xr]比Y[Yr]小，则X[xl]一定比Y[yl]大,则 Y[yl]&lt;X[xl]&lt;=X[xr]&lt;Y[yr]</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> MedX;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 若MedY大，则与上面的对称</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MedX&lt;MedY)&#123;     </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Y[yr]&gt;=X[xr])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Y[yl]&lt;X[xl])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ((X[xl]+X[xr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;    </span><br><span class=\"line\">                    <span class=\"built_in\"><span class=\"keyword\">return</span></span> ((Y[yl]+X[xr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> MedY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 区间划分</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(MedX&gt;MedY)&#123;   <span class=\"comment\">// MedX大时，X取小的部分，Y取大的部分</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xl-xr+<span class=\"number\">1</span>)%<span class=\"number\">2</span>!=<span class=\"number\">0</span>)&#123;    <span class=\"comment\">// 若区间个数为奇数</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,xl,(xl+xr)/<span class=\"number\">2</span>,Y,(yl+yr)/<span class=\"number\">2</span>,yr);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,xl,(xl+xr)/<span class=\"number\">2</span>+<span class=\"number\">1</span>,Y,(yl+yr)/<span class=\"number\">2</span>,yr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;           <span class=\"comment\">// MedX小时，X取大的部分，Y取小的部分</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xl-xr+<span class=\"number\">1</span>)%<span class=\"number\">2</span>!=<span class=\"number\">0</span>)&#123;    <span class=\"comment\">// 若区间个数为奇数</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,(xl+xr)/<span class=\"number\">2</span>,xr,Y,yl,(yl+yr)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,(xl+xr)/<span class=\"number\">2</span>,xr,Y,yl,(yl+yr)/<span class=\"number\">2</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input1.txt&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output1.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;     <span class=\"comment\">// 数组X和Y中每个数组所含有的元素个数   </span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> X[<span class=\"number\">202</span>]; </span><br><span class=\"line\">    <span class=\"keyword\">double</span> Y[<span class=\"number\">202</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;X[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;Y[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans = <span class=\"built_in\">FindMixMedian</span>(X,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>,Y,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>设X[ 0 : n - 1]和Y[ 0 : n – 1 ]为两个数组，每个数组中含有n个已排好序的数。找出X和Y的2n个数的中位数。要求：O(logn)时间内</p>\n<h5 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h5><p>要在O(logn)时间内求解，则自然想到分治算法。求解思路与如下：<br>先分别求数组X和Y的两个中位数MedX和MedY。则会有以下情况</p>\n<ul>\n<li><p>（1）MedX==MedY。则很明显MedX即是2n个数的中位数。因为两个数组是完全等长的，所以两个数组中位数两边的数的个数，也是完全一样的。</p>\n</li>\n<li><p>（2）MedX&gt;MedY</p>\n<ul>\n<li>如果n是奇数<br>这种情况下，比X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,…,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,…,X<sub>n-1</sub>一定比中位数大。所以中位数不会在X<sub>(n-1)/2+1</sub>,X(n-1)/2+2</sub>,…,X<sub>n-1</sub>中。同样Y<sub>0</sub>,Y<sub>1</sub>,…,Y<sub>(n-1)/2-1</sub>一定比中位数小。所以中位数在X<sub>0</sub>,X<sub>1</sub>,…,X<sub>(n-1)/2</sub>和Y<sub>(n-1)/2</sub>,Y<sub>n/2+2</sub>,…,Y<sub>n-1</sub>中。则只需要考察X[0:(n-1)/2:n-1]和Y[0:(n-1)/2]。</li>\n<li>如果n是偶数<br>则X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,…,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,…,X<sub>n-1</sub>一定比中位数大。同样Y<sub>0</sub>,Y<sub>1</sub>,…,Y<sub>(n-)/2-2</sub>一定比中位数小。则只需要考察X[0:(n-1)/2+1]和Y[(n-1)/2-1:n-1]。</li>\n</ul>\n</li>\n</ul>\n<p>由于在中位数两边加上或减去任意等数量的数并不影响中位数的取值,所以上述方法成立。</p>\n<ul>\n<li>（3）MedX&lt;MedY<br>这种情况和上面的同理</li>\n</ul>\n<p>分到最后每个数组只有两个元素，则不可以再分下去，利用X和Y的中位数用直接方法求解。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">函数名：FindMedian</span></span><br><span class=\"line\"><span class=\"comment\">功能：  求数组的某一区间的中位数</span></span><br><span class=\"line\"><span class=\"comment\">参数：  double Z[]-所求数组，int zl-数组的最小下标，int zr-数组的最大下标</span></span><br><span class=\"line\"><span class=\"comment\">返回值：double-中位数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">FindMedian</span><span class=\"params\">(<span class=\"keyword\">double</span> Z[],<span class=\"keyword\">int</span> zl,<span class=\"keyword\">int</span> zr)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>((zr-zl)%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> Z[(zr+zl)/<span class=\"number\">2</span>];</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"built_in\"><span class=\"keyword\">return</span></span> (Z[(zr+zl)/<span class=\"number\">2</span>]+Z[(zr+zl)/<span class=\"number\">2</span>+<span class=\"number\">1</span>])/<span class=\"number\">2</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">函数名：FindMedian</span></span><br><span class=\"line\"><span class=\"comment\">功能：  求分别有序数组X某一区间和有序数组Y某一区间的混合中位数</span></span><br><span class=\"line\"><span class=\"comment\">参数：  int X[]-数组X，int xl-数组X要考察的最小下标，int xr-数组x要考察的最大下标</span></span><br><span class=\"line\"><span class=\"comment\">返回值：double-混合中位数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">FindMixMedian</span><span class=\"params\">(<span class=\"keyword\">double</span> X[],<span class=\"keyword\">int</span> xl,<span class=\"keyword\">int</span> xr,<span class=\"keyword\">double</span> Y[],<span class=\"keyword\">int</span> yl,<span class=\"keyword\">int</span> yr)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">double</span> MedX=<span class=\"built_in\">FindMedian</span>(X,xl,xr);<span class=\"comment\">// 求X考察区域的中位数</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> MedY=<span class=\"built_in\">FindMedian</span>(Y,yl,yr);<span class=\"comment\">// 求y所考察区域的中位数</span></span><br><span class=\"line\">    <span class=\"comment\">// 若两个中位数相等，则所求便是混合区间的中位数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(MedX-MedY)&lt;<span class=\"number\">0.00001</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MedY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 若两边都只剩一个了，就取平均</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xl==xr&amp;&amp;yl==yr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (X[xl]+Y[xl])/<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 若每个数组只剩两个，则讨论求出中位数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xr-xl+<span class=\"number\">1</span>==<span class=\"number\">2</span>&amp;&amp;yr-yl+<span class=\"number\">1</span>==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若MedX大，则X[xr]大于X[xl]和Y[YL],则判断X[xr]和Y[yr]</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MedX&gt;MedY)&#123;    </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(X[xr]&gt;=Y[yr])&#123;     <span class=\"comment\">// 若X[xr]&gt;=Y[yr],则可以确定地关系是Y[yl]&lt;=Y[yr]&lt;=X[xr]</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(X[xl]&lt;Y[yl])&#123;  <span class=\"comment\">// X[xl]&lt;Y[yl]&lt;=Y[yr]&lt;=X[xr] </span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ((Y[yl]+Y[yr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;            <span class=\"comment\">// Y[yl]&lt;=Y[yr]&lt;X[xl]&lt;=X[xr]或 Y[yl]&lt;=X[xl]&lt;=Y[yr]&lt;=X[xr]</span></span><br><span class=\"line\">                    <span class=\"built_in\"><span class=\"keyword\">return</span></span> ((X[xl]+Y[yr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">// 如果X[xr]比Y[Yr]小，则X[xl]一定比Y[yl]大,则 Y[yl]&lt;X[xl]&lt;=X[xr]&lt;Y[yr]</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> MedX;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 若MedY大，则与上面的对称</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MedX&lt;MedY)&#123;     </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Y[yr]&gt;=X[xr])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Y[yl]&lt;X[xl])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ((X[xl]+X[xr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;    </span><br><span class=\"line\">                    <span class=\"built_in\"><span class=\"keyword\">return</span></span> ((Y[yl]+X[xr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> MedY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 区间划分</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(MedX&gt;MedY)&#123;   <span class=\"comment\">// MedX大时，X取小的部分，Y取大的部分</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xl-xr+<span class=\"number\">1</span>)%<span class=\"number\">2</span>!=<span class=\"number\">0</span>)&#123;    <span class=\"comment\">// 若区间个数为奇数</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,xl,(xl+xr)/<span class=\"number\">2</span>,Y,(yl+yr)/<span class=\"number\">2</span>,yr);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,xl,(xl+xr)/<span class=\"number\">2</span>+<span class=\"number\">1</span>,Y,(yl+yr)/<span class=\"number\">2</span>,yr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;           <span class=\"comment\">// MedX小时，X取大的部分，Y取小的部分</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xl-xr+<span class=\"number\">1</span>)%<span class=\"number\">2</span>!=<span class=\"number\">0</span>)&#123;    <span class=\"comment\">// 若区间个数为奇数</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,(xl+xr)/<span class=\"number\">2</span>,xr,Y,yl,(yl+yr)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,(xl+xr)/<span class=\"number\">2</span>,xr,Y,yl,(yl+yr)/<span class=\"number\">2</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input1.txt&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output1.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;     <span class=\"comment\">// 数组X和Y中每个数组所含有的元素个数   </span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> X[<span class=\"number\">202</span>]; </span><br><span class=\"line\">    <span class=\"keyword\">double</span> Y[<span class=\"number\">202</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;X[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;Y[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans = <span class=\"built_in\">FindMixMedian</span>(X,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>,Y,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/BestCowFences/BestCowFence.png","slug":"BestCowFence.png","post":"ckqcf2gln00021ktk5wwagsyo","modified":0,"renderable":0},{"_id":"source/_posts/MaxMedian/MaxMedian.png","slug":"MaxMedian.png","post":"ckqcf2gly00071ktkemwq35if","modified":0,"renderable":0},{"_id":"source/_posts/Postons/Potions(Hard_version).png","slug":"Potions(Hard_version).png","post":"ckqcf2glz00081ktk9b063mno","modified":0,"renderable":0},{"_id":"source/_posts/数据备份/backUp.png","slug":"backUp.png","post":"ckqcf2gmd00191ktkfyq75dnp","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckqcf2glz00081ktk9b063mno","category_id":"ckqcf2glw00051ktk4kub65u9","_id":"ckqcf2gm5000e1ktkg2j27llf"},{"post_id":"ckqcf2gln00021ktk5wwagsyo","category_id":"ckqcf2glw00051ktk4kub65u9","_id":"ckqcf2gm7000h1ktk52qu4ai3"},{"post_id":"ckqcf2glv00041ktk37iy2tw3","category_id":"ckqcf2gm0000a1ktk4t0las94","_id":"ckqcf2gm7000i1ktkeux25hy5"},{"post_id":"ckqcf2gly00071ktkemwq35if","category_id":"ckqcf2glw00051ktk4kub65u9","_id":"ckqcf2gm8000l1ktk0uaee09t"},{"post_id":"ckqcf2gmd00191ktkfyq75dnp","category_id":"ckqcf2gmf001b1ktkcmne5mdf","_id":"ckqcf2gmg001g1ktkgy014hr5"},{"post_id":"ckqcf2gme001a1ktkeuwygld2","category_id":"ckqcf2gmg001d1ktke1y12mj3","_id":"ckqcf2gmh001i1ktk9cw19e29"}],"PostTag":[{"post_id":"ckqcf2gln00021ktk5wwagsyo","tag_id":"ckqcf2glx00061ktkfqhaey0z","_id":"ckqcf2gm7000k1ktkhfwn1e2t"},{"post_id":"ckqcf2gln00021ktk5wwagsyo","tag_id":"ckqcf2gm0000b1ktk8vjh3oei","_id":"ckqcf2gm8000m1ktk52xgfnjp"},{"post_id":"ckqcf2gln00021ktk5wwagsyo","tag_id":"ckqcf2gm6000g1ktkcdkc9cgq","_id":"ckqcf2gm8000o1ktk118ahipz"},{"post_id":"ckqcf2glv00041ktk37iy2tw3","tag_id":"ckqcf2gm7000j1ktk333g092d","_id":"ckqcf2gm8000p1ktk8idffsc1"},{"post_id":"ckqcf2gly00071ktkemwq35if","tag_id":"ckqcf2glx00061ktkfqhaey0z","_id":"ckqcf2gm9000t1ktk9xe18emm"},{"post_id":"ckqcf2gly00071ktkemwq35if","tag_id":"ckqcf2gm0000b1ktk8vjh3oei","_id":"ckqcf2gma000u1ktkaut0ekxr"},{"post_id":"ckqcf2gly00071ktkemwq35if","tag_id":"ckqcf2gm6000g1ktkcdkc9cgq","_id":"ckqcf2gma000w1ktk6xwufnsd"},{"post_id":"ckqcf2glz00081ktk9b063mno","tag_id":"ckqcf2gm9000s1ktkdni0bn9s","_id":"ckqcf2gmb000z1ktkcixp3r8a"},{"post_id":"ckqcf2glz00081ktk9b063mno","tag_id":"ckqcf2gma000v1ktk6pwq8ygv","_id":"ckqcf2gmb00101ktk8adz9cga"},{"post_id":"ckqcf2glz00081ktk9b063mno","tag_id":"ckqcf2gma000x1ktkg2nbe49d","_id":"ckqcf2gmb00121ktk3asd2y3w"},{"post_id":"ckqcf2gm000091ktkft4x4d8y","tag_id":"ckqcf2gm7000j1ktk333g092d","_id":"ckqcf2gmb00151ktkhjzi3pui"},{"post_id":"ckqcf2gm000091ktkft4x4d8y","tag_id":"ckqcf2gmb00111ktkesl4cvns","_id":"ckqcf2gmb00161ktk1u5ecnuz"},{"post_id":"ckqcf2gm000091ktkft4x4d8y","tag_id":"ckqcf2gmb00131ktk7l3ybniw","_id":"ckqcf2gmc00171ktkegguhzcz"},{"post_id":"ckqcf2gm4000d1ktk6spshlk3","tag_id":"ckqcf2gmb00141ktkaiyn6r2w","_id":"ckqcf2gmc00181ktk0d1p58m9"},{"post_id":"ckqcf2gmd00191ktkfyq75dnp","tag_id":"ckqcf2gmf001c1ktkb3bbc320","_id":"ckqcf2gmg001f1ktk2mwt5gag"},{"post_id":"ckqcf2gme001a1ktkeuwygld2","tag_id":"ckqcf2gmg001e1ktk69p6gdhl","_id":"ckqcf2gmh001h1ktk18i0equc"}],"Tag":[{"name":"限定长度最大子段和","_id":"ckqcf2glx00061ktkfqhaey0z"},{"name":"思维","_id":"ckqcf2gm0000b1ktk8vjh3oei"},{"name":"二分答案","_id":"ckqcf2gm6000g1ktkcdkc9cgq"},{"name":"JAVA","_id":"ckqcf2gm7000j1ktk333g092d"},{"name":"反悔","_id":"ckqcf2gm9000s1ktkdni0bn9s"},{"name":"贪心","_id":"ckqcf2gma000v1ktk6pwq8ygv"},{"name":"优先队列","_id":"ckqcf2gma000x1ktkg2nbe49d"},{"name":"SptingBoot","_id":"ckqcf2gmb00111ktkesl4cvns"},{"name":"数据库","_id":"ckqcf2gmb00131ktk7l3ybniw"},{"name":"动态规划","_id":"ckqcf2gmb00141ktkaiyn6r2w"},{"name":"-贪心 -反悔 -优先队列","_id":"ckqcf2gmf001c1ktkb3bbc320"},{"name":"-分治法","_id":"ckqcf2gmg001e1ktk69p6gdhl"}]}}