{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/meadow/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/meadow/source/css/iconfont.css","path":"css/iconfont.css","modified":0,"renderable":1},{"_id":"themes/meadow/source/css/mdui.min.v0.4.3.css","path":"css/mdui.min.v0.4.3.css","modified":0,"renderable":1},{"_id":"themes/meadow/source/css/mdui.min.v0.4.3.css.map","path":"css/mdui.min.v0.4.3.css.map","modified":0,"renderable":1},{"_id":"themes/meadow/source/css/mdui.min.v1.0.0.css","path":"css/mdui.min.v1.0.0.css","modified":0,"renderable":1},{"_id":"themes/meadow/source/icons/favicon.ico","path":"icons/favicon.ico","modified":0,"renderable":1},{"_id":"themes/meadow/source/css/mdui.min.v1.0.0.css.map","path":"css/mdui.min.v1.0.0.css.map","modified":0,"renderable":1},{"_id":"themes/meadow/source/icons/avatar.gif","path":"icons/avatar.gif","modified":0,"renderable":1},{"_id":"themes/meadow/source/js/mdui.min.v0.4.3.js","path":"js/mdui.min.v0.4.3.js","modified":0,"renderable":1},{"_id":"themes/meadow/source/js/mdui.min.v0.4.3.js.map","path":"js/mdui.min.v0.4.3.js.map","modified":0,"renderable":1},{"_id":"themes/meadow/source/js/meadow.js","path":"js/meadow.js","modified":0,"renderable":1},{"_id":"themes/meadow/source/js/mdui.min.v1.0.0.js","path":"js/mdui.min.v1.0.0.js","modified":0,"renderable":1},{"_id":"themes/meadow/source/js/mdui.min.v1.0.0.js.map","path":"js/mdui.min.v1.0.0.js.map","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Black.woff","path":"fonts/roboto/Roboto-Black.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Black.woff2","path":"fonts/roboto/Roboto-Black.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Bold.woff","path":"fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BlackItalic.woff","path":"fonts/roboto/Roboto-BlackItalic.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BlackItalic.woff2","path":"fonts/roboto/Roboto-BlackItalic.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Bold.woff2","path":"fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Light.woff","path":"fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BoldItalic.woff","path":"fonts/roboto/Roboto-BoldItalic.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BoldItalic.woff2","path":"fonts/roboto/Roboto-BoldItalic.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Light.woff2","path":"fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-LightItalic.woff","path":"fonts/roboto/Roboto-LightItalic.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Medium.woff","path":"fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-LightItalic.woff2","path":"fonts/roboto/Roboto-LightItalic.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Medium.woff2","path":"fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-MediumItalic.woff","path":"fonts/roboto/Roboto-MediumItalic.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-MediumItalic.woff2","path":"fonts/roboto/Roboto-MediumItalic.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Regular.woff2","path":"fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Regular.woff","path":"fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-RegularItalic.woff","path":"fonts/roboto/Roboto-RegularItalic.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-RegularItalic.woff2","path":"fonts/roboto/Roboto-RegularItalic.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Thin.woff","path":"fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-ThinItalic.woff","path":"fonts/roboto/Roboto-ThinItalic.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Thin.woff2","path":"fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-ThinItalic.woff2","path":"fonts/roboto/Roboto-ThinItalic.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/About-me/index.md","hash":"bdd50ca8bc5a0929c716cb6062d03aac63fb86b0","modified":1616339997227},{"_id":"source/_posts/IDEApush到github被拒绝的问题.md","hash":"387b272ebcd5e7464fe741be3e6bae36d5a1e33c","modified":1617029075959},{"_id":"source/_posts/sptingboot集成mybatis.md","hash":"67d7897e14760271d384d72e49e0730104ddd726","modified":1618151699138},{"_id":"source/_posts/Postons.md","hash":"08d50cf61a50bd4cb85418b32f02f7857a6f8015","modified":1623398100142},{"_id":"source/_posts/泥鳅.md","hash":"745355d8eb6f9549aef38690e804ede50cd400d0","modified":1623223118407},{"_id":"themes/meadow/.gitattributes","hash":"38d287cd5bebd7ae7a481a751417dbed6d35c004","modified":1622815351241},{"_id":"themes/meadow/languages/zh-CN.yml","hash":"6ea5c442674098d947bcba89f78fcefc4d763bb0","modified":1622815351241},{"_id":"themes/meadow/README.md","hash":"6fec37756e2262b22f1728f7b555a1f98463984e","modified":1622815351241},{"_id":"themes/meadow/languages/en.yml","hash":"81ae86203870165bcad70cd3f3dfb1b27dbd7b92","modified":1622815351241},{"_id":"themes/meadow/_config.yml","hash":"5265bcea86b5790196976b00566ba3e2aecb7b2d","modified":1622815351241},{"_id":"themes/meadow/layout/category.ejs","hash":"6d0e873f0909676e28f59ad555992791522f4840","modified":1622815351271},{"_id":"themes/meadow/layout/index.ejs","hash":"82a97dda77a3a03c1ebb353a25cda1045e9cf7ee","modified":1622815351271},{"_id":"themes/meadow/layout/archive.ejs","hash":"6433e5b310945c1a6dcd7a602ff295ce2d1a1b79","modified":1622815351271},{"_id":"themes/meadow/layout/layout.ejs","hash":"2e0b6785bfc80345117523c9d1163b297caa81f2","modified":1622815351271},{"_id":"themes/meadow/layout/post.ejs","hash":"9f916bc8338279f5f845d942fc14b480482e6e16","modified":1622815351271},{"_id":"themes/meadow/layout/page.ejs","hash":"e666c75c90e2e136879e3e9446a66b312b5cdd1e","modified":1622815351271},{"_id":"themes/meadow/layout/tag.ejs","hash":"d950c1ab3c962d780e32e7fd632c4ded7e23f3fe","modified":1622815351271},{"_id":"themes/meadow/LICENSE","hash":"3c1857af501da6d9e80179a05a9c2352f45d4e7c","modified":1622815351241},{"_id":"themes/meadow/source/css/main.styl","hash":"3129d8609e0269ec47f3e98e6172d62118d97c7c","modified":1622815351281},{"_id":"source/_posts/关于对floyd算法的质疑.md","hash":"92dc5fb804fbb3350c5cd91cf267d60c6999946c","modified":1618678004255},{"_id":"themes/meadow/source/icons/favicon.ico","hash":"fb79fb50e5a9da722f4de142a45c996ef437476d","modified":1622815351321},{"_id":"source/_posts/在O-logn-的复杂度下两数组的混合中位数.md","hash":"cd60e8ec8d5b28b35fe46258ec3834f88657bc2d","modified":1618638814414},{"_id":"themes/meadow/source/css/iconfont.css","hash":"8268b1456e8548a7628004ab7d763e8dcad68674","modified":1622815351281},{"_id":"themes/meadow/source/icons/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1622815351311},{"_id":"themes/meadow/source/js/mdui.min.v0.4.3.js","hash":"9a0619bbda818a6b566f72a2f313e8ae1b883d5a","modified":1622815351321},{"_id":"themes/meadow/layout/_partial/article.ejs","hash":"5efe8933c8aa341222f15cd5e0c3f6930d2e9ff0","modified":1622815351251},{"_id":"themes/meadow/layout/_adsense/footer.ejs","hash":"1d64c019eab8d68be033bc4a0d74b005b8fe4b29","modified":1622815351241},{"_id":"themes/meadow/layout/_partial/bodyload.ejs","hash":"5756943f2b5871e8e6083a58bec6c83ded9bf010","modified":1622815351251},{"_id":"themes/meadow/layout/_adsense/sidebar.ejs","hash":"ced3c5f3adcc307d657072f1cf37bb6422321585","modified":1622815351251},{"_id":"themes/meadow/layout/_adsense/banner.ejs","hash":"16066c42d668c8af77a751526f465946611181d9","modified":1622815351241},{"_id":"themes/meadow/layout/_partial/footer.ejs","hash":"c7c1aa4865a8845732c683431fa5020e48964984","modified":1622815351251},{"_id":"themes/meadow/layout/_partial/head.ejs","hash":"5d24021970d3aca2205fa9876c07f29181c2c029","modified":1622815351251},{"_id":"themes/meadow/layout/_partial/headload.ejs","hash":"4aec9983156b3f7bf9417e8d33b0db54c1ced7ed","modified":1622815351251},{"_id":"themes/meadow/layout/_partial/header.ejs","hash":"d0a47f273e3b9b3496049f9bb02ffa8e6e78123b","modified":1622815351251},{"_id":"themes/meadow/layout/_partial/pagination.ejs","hash":"3a46cd753076e88828346389e48d353dbc0e5980","modified":1622815351251},{"_id":"themes/meadow/layout/_partial/sidebar.ejs","hash":"9af6840f749907ba4de1e667dc497ef051fdb514","modified":1622815351261},{"_id":"themes/meadow/source/css/_partial/post.styl","hash":"e2692a989ce736172514b8dc0e2798accb9c7bb2","modified":1622815351271},{"_id":"themes/meadow/source/js/meadow.js","hash":"aeed9fa28ad119ee4c4edb2c399bbcdf84805806","modified":1622815351321},{"_id":"themes/meadow/source/css/_partial/search.styl","hash":"8e0bf924f0af39792d4846d9cad196016230639e","modified":1622815351271},{"_id":"themes/meadow/source/css/_partial/highlight.styl","hash":"475c8bd64ab87cf957d8f11c5adba7163c8b45f1","modified":1622815351271},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Black.woff2","hash":"36dd174e41242ff6318083409f7e6c700b25eba2","modified":1622815351291},{"_id":"themes/meadow/source/css/_partial/page.styl","hash":"19dc6d27283ad509ffc5b90491754eed1f70f857","modified":1622815351271},{"_id":"themes/meadow/source/css/_partial/sidebar.styl","hash":"fc0c737fe24175081c1f47417c89be69f552d905","modified":1622815351281},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Bold.woff2","hash":"9074123ec9d4d6a7e21c2bee3f0110ca9a73733d","modified":1622815351291},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Light.woff2","hash":"df835660087fc7421a7667d8b68d759e0e1dbbf8","modified":1622815351301},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Medium.woff2","hash":"9f358fd5f441565282b54e8dc072a7d68f71a2fc","modified":1622815351301},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Regular.woff2","hash":"a18bcf95ada923da31f176137b8add02b0ba60f3","modified":1622815351311},{"_id":"themes/meadow/layout/_partial/post/post-share.ejs","hash":"dc881daf56ea6f4ef8d029aa76019dd6a76ee800","modified":1622815351261},{"_id":"themes/meadow/layout/_partial/page/categories.ejs","hash":"0ecfbb477f63d02297dab02f170ae778be6e5e50","modified":1622815351251},{"_id":"themes/meadow/layout/_partial/page/tags.ejs","hash":"4119201c15f48ed0775fbfb42964c203a7c5ad09","modified":1622815351251},{"_id":"themes/meadow/layout/_partial/page/collapse.ejs","hash":"333c6e0b7ad3a1eb08dce92b50e33b670ea77081","modified":1622815351251},{"_id":"themes/meadow/layout/_partial/post/post-header.ejs","hash":"51ac7398b26898627b21dd2101fc7f4f69a33f32","modified":1622815351251},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Thin.woff2","hash":"0592332e221316fd8331110568df461e87689cca","modified":1622815351311},{"_id":"themes/meadow/layout/_plugin/analytics/baidu-analytics.ejs","hash":"3a945c492862264b9e7cd8f9584a3a1e98635f72","modified":1622815351261},{"_id":"themes/meadow/layout/_partial/post/post-tag.ejs","hash":"1a804fad651015ffc23640c20b3e3bba5cffa297","modified":1622815351261},{"_id":"themes/meadow/layout/_plugin/analytics/cnzz-analytics.ejs","hash":"4cd9b1845eae8e95f18865fd754b00eca5711d64","modified":1622815351261},{"_id":"themes/meadow/layout/_plugin/comment/changyan.ejs","hash":"b3a28ac1f177b61aebd341229b66666b8c082a5e","modified":1622815351261},{"_id":"themes/meadow/layout/_plugin/analytics/google-analytics.ejs","hash":"22ac48b05a43ad8475dee37941876bbe73f8b99b","modified":1622815351261},{"_id":"themes/meadow/layout/_plugin/analytics/tencent-analytics.ejs","hash":"a0a4e7c67028a354f267577ab2113cc4d9f36476","modified":1622815351261},{"_id":"themes/meadow/layout/_plugin/comment/livere.ejs","hash":"01c17bf42d2e2526d04c5c84b25aeb118431943c","modified":1622815351261},{"_id":"themes/meadow/layout/_plugin/comment/index.ejs","hash":"06162aa02ece76f43fa2f588b7d8381fe7512bbd","modified":1622815351261},{"_id":"themes/meadow/layout/_plugin/comment/gitalk.ejs","hash":"8cf21012c8c9c728063c8b51e95737bb0d2ecd6d","modified":1622815351261},{"_id":"themes/meadow/layout/_plugin/comment/disqus.ejs","hash":"f7c0ff05ef958cf24b226d25f0c4310683d4a54b","modified":1622815351261},{"_id":"themes/meadow/layout/_plugin/comment/valine.ejs","hash":"e0fb21c23df72a8ef14680c1c6e3bb8b23334cbb","modified":1622815351261},{"_id":"themes/meadow/layout/_plugin/math/mathjax.ejs","hash":"2d568afb78c41642f9dec8b03456243341ea19d4","modified":1622815351271},{"_id":"themes/meadow/layout/_plugin/math/katex.ejs","hash":"32c19e5886ce2454272037b018bb80e1841f97e7","modified":1622815351271},{"_id":"themes/meadow/source/js/mdui.min.v1.0.0.js","hash":"6a084e757718fa0a1f48f2ea968d8060b40127d5","modified":1622815351321},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Bold.woff","hash":"274d0176d3b2e324111d0f836625960bdf24a29a","modified":1622815351291},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Black.woff","hash":"100a2d03d89a0e3e027a1500e4f4d715d1ed52a0","modified":1622815351291},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BlackItalic.woff","hash":"d2f8acc7e66ff51cc180bd998056e68dec30b8c6","modified":1622815351291},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BlackItalic.woff2","hash":"45dc6a6ae29b2522ac98fc130d300d1c3ceee9b4","modified":1622815351291},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Light.woff","hash":"d6d654d36c6cf9053675860d00125d6c543560d8","modified":1622815351301},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BoldItalic.woff2","hash":"99eaed1b19b50aeb3866d9ce568c290d15c965fb","modified":1622815351301},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BoldItalic.woff","hash":"83739a927323a1c00a5e61ef6da84fff9e15fbc8","modified":1622815351291},{"_id":"themes/meadow/source/fonts/roboto/Roboto-LightItalic.woff","hash":"184f1fc46df99866d5dbe03b57f3f6d9b9981ea0","modified":1622815351301},{"_id":"themes/meadow/source/fonts/roboto/Roboto-LightItalic.woff2","hash":"d72aa4d470b5923b3f614dd8ca25fd230dda8206","modified":1622815351301},{"_id":"themes/meadow/source/fonts/roboto/Roboto-MediumItalic.woff2","hash":"2fbd77f1d63c3d339167aa754e716451d129e23f","modified":1622815351311},{"_id":"themes/meadow/source/fonts/roboto/Roboto-MediumItalic.woff","hash":"b1afeefecbee33ad50452ce3f728dfcf781c9d49","modified":1622815351301},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Medium.woff","hash":"d3564215ac8f29bbf8c3d0602e1299ebcbe26ea9","modified":1622815351301},{"_id":"themes/meadow/source/fonts/roboto/Roboto-RegularItalic.woff2","hash":"bd9360a27d99a093c2f06857c21fd6e98b57a8c0","modified":1622815351311},{"_id":"themes/meadow/source/fonts/roboto/Roboto-RegularItalic.woff","hash":"f3c32fd38c2f5fe34e54bdab2f238e469f48501a","modified":1622815351311},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Regular.woff","hash":"db6450746e5df1eb0636bc84f21aae94e1cafea4","modified":1622815351311},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Thin.woff","hash":"2d1c0c4d3ff8f91941499790d4fd63866e7c4852","modified":1622815351311},{"_id":"themes/meadow/source/fonts/roboto/Roboto-ThinItalic.woff","hash":"ea71e1a7f20df5de8048e06c70d0b756b83f867e","modified":1622815351311},{"_id":"themes/meadow/source/fonts/roboto/Roboto-ThinItalic.woff2","hash":"cf2e6e6e462a4ff1c980d2c0fdc7b9675a30c82b","modified":1622815351311},{"_id":"themes/meadow/source/css/mdui.min.v0.4.3.css","hash":"202c70d2d5d5a27b9c862992e3fe2932770aaf75","modified":1622815351281},{"_id":"themes/meadow/source/js/mdui.min.v0.4.3.js.map","hash":"7a92572e30f7b9bd09350efb04fd21f7b6230177","modified":1622815351321},{"_id":"themes/meadow/source/css/mdui.min.v1.0.0.css","hash":"5536f2d3270b74ee3b270281f08a3823494551ce","modified":1622815351281},{"_id":"themes/meadow/source/js/mdui.min.v1.0.0.js.map","hash":"29dbca6a99d7798fb46dcec4c9632e5c0ead4319","modified":1622815351321},{"_id":"themes/meadow/source/css/mdui.min.v0.4.3.css.map","hash":"925eb00f83a5d7b19304a426ea574dd4de69acd1","modified":1622815351281},{"_id":"themes/meadow/source/css/mdui.min.v1.0.0.css.map","hash":"96acfc653f0205b4127c309bab1c1d8f5180fd77","modified":1622815351291},{"_id":"source/_posts/Postons/Potions(Hard_version).png","hash":"33ffe55a747ea25b14fcda469327c8213ee6716a","modified":1623219774511},{"_id":"source/_posts/images/Week1/蚯蚓.png","hash":"ca8c6144b63833bd2ef91950ddd1bde12a7d06a5","modified":1623218201803},{"_id":"public/About-me/index.html","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1624618125765},{"_id":"public/2021/06/09/泥鳅/index.html","hash":"eeee4a703dfda36ef46ffd9c606dea36a5b528b9","modified":1623226610249},{"_id":"public/2021/06/09/Postons/index.html","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1624618125765},{"_id":"public/2021/04/18/关于对floyd算法的质疑/index.html","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1624618125765},{"_id":"public/2021/04/10/在O-logn-的复杂度下两数组的混合中位数/index.html","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1624618125765},{"_id":"public/categories/ACM/index.html","hash":"009aaecb0a7cb459ba5af8aa6c9baac698ddbfc3","modified":1623226610249},{"_id":"public/categories/算法/index.html","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1624618125765},{"_id":"public/categories/Diary/index.html","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1624618125765},{"_id":"public/archives/index.html","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1624618125765},{"_id":"public/archives/2021/index.html","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1624618125765},{"_id":"public/archives/2021/03/index.html","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1624618125765},{"_id":"public/archives/2021/04/index.html","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1624618125765},{"_id":"public/archives/2021/06/index.html","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1624618125765},{"_id":"public/tags/反悔/index.html","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1624618125765},{"_id":"public/tags/贪心/index.html","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1624618125765},{"_id":"public/tags/优先队列/index.html","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1624618125765},{"_id":"public/tags/JAVA/index.html","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1624618125765},{"_id":"public/tags/动态规划/index.html","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1624618125765},{"_id":"public/tags/SptingBoot/index.html","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1624618125765},{"_id":"public/tags/数据库/index.html","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1624618125765},{"_id":"public/tags/数学/index.html","hash":"707004562ead1afec1a28d717fdf0b711602a826","modified":1623226610249},{"_id":"public/tags/队列/index.html","hash":"1fd14e00d5576d54893a6d1665ebd391646fc6dd","modified":1623226610249},{"_id":"public/tags/分治法/index.html","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1624618125765},{"_id":"public/2021/03/30/sptingboot集成mybatis/index.html","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1624618125765},{"_id":"public/2021/03/22/IDEApush到github被拒绝的问题/index.html","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1624618125765},{"_id":"public/index.html","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1624618125765},{"_id":"public/icons/favicon.ico","hash":"fb79fb50e5a9da722f4de142a45c996ef437476d","modified":1623226610249},{"_id":"public/icons/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-Black.woff2","hash":"36dd174e41242ff6318083409f7e6c700b25eba2","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-Bold.woff2","hash":"9074123ec9d4d6a7e21c2bee3f0110ca9a73733d","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-Light.woff2","hash":"df835660087fc7421a7667d8b68d759e0e1dbbf8","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-Medium.woff2","hash":"9f358fd5f441565282b54e8dc072a7d68f71a2fc","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-Regular.woff2","hash":"a18bcf95ada923da31f176137b8add02b0ba60f3","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-Thin.woff2","hash":"0592332e221316fd8331110568df461e87689cca","modified":1623226610249},{"_id":"public/css/main.css","hash":"e0b05448d6567b1487c6f359eb3752c22267bdb2","modified":1624617644273},{"_id":"public/js/meadow.js","hash":"3fdfab667c0697354fc1ef96f6bc89d7331e404c","modified":1623226610249},{"_id":"public/css/iconfont.css","hash":"a8d1c687062f7f2adbdb5e4bdd8b53107047e23a","modified":1623226610249},{"_id":"public/js/mdui.min.v0.4.3.js","hash":"f64fd49e8cc1bb0679dd00cd1f11e9d111aac826","modified":1623226610249},{"_id":"public/js/mdui.min.v1.0.0.js","hash":"178ecc7437f1ec342762b0da74cbde3dd10342cd","modified":1623226610249},{"_id":"public/css/mdui.min.v0.4.3.css","hash":"7356f5d95c9d90254ea074ecaecae24e6a5a124e","modified":1623226610249},{"_id":"public/css/mdui.min.v1.0.0.css","hash":"5da28cd08e3bd4f759ee947e7e302e35a53831c2","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-Black.woff","hash":"100a2d03d89a0e3e027a1500e4f4d715d1ed52a0","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-Bold.woff","hash":"274d0176d3b2e324111d0f836625960bdf24a29a","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-BlackItalic.woff","hash":"d2f8acc7e66ff51cc180bd998056e68dec30b8c6","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-BlackItalic.woff2","hash":"45dc6a6ae29b2522ac98fc130d300d1c3ceee9b4","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-Light.woff","hash":"d6d654d36c6cf9053675860d00125d6c543560d8","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-BoldItalic.woff","hash":"83739a927323a1c00a5e61ef6da84fff9e15fbc8","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-BoldItalic.woff2","hash":"99eaed1b19b50aeb3866d9ce568c290d15c965fb","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-Medium.woff","hash":"d3564215ac8f29bbf8c3d0602e1299ebcbe26ea9","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-LightItalic.woff","hash":"184f1fc46df99866d5dbe03b57f3f6d9b9981ea0","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-LightItalic.woff2","hash":"d72aa4d470b5923b3f614dd8ca25fd230dda8206","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-MediumItalic.woff","hash":"b1afeefecbee33ad50452ce3f728dfcf781c9d49","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-MediumItalic.woff2","hash":"2fbd77f1d63c3d339167aa754e716451d129e23f","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-RegularItalic.woff","hash":"f3c32fd38c2f5fe34e54bdab2f238e469f48501a","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-RegularItalic.woff2","hash":"bd9360a27d99a093c2f06857c21fd6e98b57a8c0","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-Regular.woff","hash":"db6450746e5df1eb0636bc84f21aae94e1cafea4","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-Thin.woff","hash":"2d1c0c4d3ff8f91941499790d4fd63866e7c4852","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-ThinItalic.woff","hash":"ea71e1a7f20df5de8048e06c70d0b756b83f867e","modified":1623226610249},{"_id":"public/fonts/roboto/Roboto-ThinItalic.woff2","hash":"cf2e6e6e462a4ff1c980d2c0fdc7b9675a30c82b","modified":1623226610249},{"_id":"public/js/mdui.min.v0.4.3.js.map","hash":"7a92572e30f7b9bd09350efb04fd21f7b6230177","modified":1623226610249},{"_id":"public/js/mdui.min.v1.0.0.js.map","hash":"29dbca6a99d7798fb46dcec4c9632e5c0ead4319","modified":1623226610249},{"_id":"public/css/mdui.min.v0.4.3.css.map","hash":"925eb00f83a5d7b19304a426ea574dd4de69acd1","modified":1623226610249},{"_id":"public/css/mdui.min.v1.0.0.css.map","hash":"96acfc653f0205b4127c309bab1c1d8f5180fd77","modified":1623226610249},{"_id":"public/2021/06/09/Postons/Potions(Hard_version).png","hash":"33ffe55a747ea25b14fcda469327c8213ee6716a","modified":1623226610249},{"_id":"source/_posts/数据备份.md","hash":"889ea265d42011107f91d5458a938b85c69c940d","modified":1623399212887},{"_id":"source/_posts/数据备份/backUp.png","hash":"7591cff1c6a13315edb921cec93ef64d8781ae75","modified":1623398000042},{"_id":"public/categories/div1/index.html","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1624618125765},{"_id":"public/2021/06/11/数据备份/index.html","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1624618125765},{"_id":"public/tags/贪心-反悔-优先队列/index.html","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1624618125765},{"_id":"public/2021/06/11/数据备份/backUp.png","hash":"7591cff1c6a13315edb921cec93ef64d8781ae75","modified":1623399223425},{"_id":"source/_posts/BestCowFences.md","hash":"4cf2e2e5d23e65dd605f4d393912a03db68b0ec6","modified":1623557174728},{"_id":"source/_posts/BestCowFences/BestCowFence.png","hash":"cba042a07e1eed0b0ddd78e61fe006647bed5323","modified":1623515446697},{"_id":"public/2021/06/13/BestCowFences/index.html","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1624618125765},{"_id":"public/categories/div2/index.html","hash":"db3b96a6a3723e3985abd86585d68100a594f544","modified":1623555531733},{"_id":"public/tags/限定长度最大子段和/index.html","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1624618125765},{"_id":"public/tags/思维/index.html","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1624618125765},{"_id":"public/tags/二分答案/index.html","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1624618125765},{"_id":"public/2021/06/13/BestCowFences/BestCowFence.png","hash":"cba042a07e1eed0b0ddd78e61fe006647bed5323","modified":1623555531733},{"_id":"source/_posts/MaxMedian.md","hash":"52089e79cf97c0b80d858f140ed4aba525455350","modified":1623559240088},{"_id":"source/_posts/MaxMedian/MaxMedian.png","hash":"a51a9bbdc1ba4026d2073b0c4abe23ffdafb2f55","modified":1623515469291},{"_id":"public/2021/06/13/MaxMedian/index.html","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1624618125765},{"_id":"public/2021/06/13/MaxMedian/MaxMedian.png","hash":"a51a9bbdc1ba4026d2073b0c4abe23ffdafb2f55","modified":1623559687531},{"_id":"source/_posts/USST.md","hash":"9efe07eaa1feada921ff36db59c154c134afcbb7","modified":1624608481319},{"_id":"source/_posts/USST.pdf","hash":"e2b8386a3348825f3a9448f238a9e3b3ed508e71","modified":1624608487298},{"_id":"public/2021/06/23/USST/index.html","hash":"7fbf8ae6f0f64657d714cbe9bc0ff7b872df3d98","modified":1624610555987},{"_id":"source/_posts/USST题解.md","hash":"d92894bf6860fd610d02b27393928a083ba50252","modified":1624610510015},{"_id":"source/_posts/USST题解/M.png","hash":"fa97730a331a85a7e5e1055c0138e9d9767cd49b","modified":1624608716560},{"_id":"source/_posts/USST题解/M2.png","hash":"13dadca51a8f67b0b2fb83197f85d67a982f6fa2","modified":1624608732018},{"_id":"source/_posts/USST题解.pdf","hash":"16c57d22a76df9e7d02bc72cb9a427d5cd8d191a","modified":1624610527171},{"_id":"public/2021/06/25/USST题解/index.html","hash":"cddce0fee34a87155936a3f73beef4044a4e2692","modified":1624610712556},{"_id":"public/2021/06/25/USST题解/M.png","hash":"fa97730a331a85a7e5e1055c0138e9d9767cd49b","modified":1624610555987},{"_id":"public/2021/06/25/USST题解/M2.png","hash":"13dadca51a8f67b0b2fb83197f85d67a982f6fa2","modified":1624610555987},{"_id":"source/_posts/USST题解报告.md","hash":"299afedf194c5fc05a120d21cbca8afe20561749","modified":1624613666497},{"_id":"public/archives/page/2/index.html","hash":"f388b7661c86113bed0bb5c03f63d486ac46edcf","modified":1624610712556},{"_id":"public/archives/2021/page/2/index.html","hash":"b45055121fdd38c02f0a2f589ab37d06368bfc0c","modified":1624610712556},{"_id":"public/page/2/index.html","hash":"46c6d2d6de82f8292581f3d42c337f7a8a8e2b63","modified":1624610712556},{"_id":"public/2021/06/25/USST题解报告/index.html","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1624618125765},{"_id":"source/_posts/USST题解报告.pdf","hash":"b0faf3d82dd9313318bb7062708a8cad8c822970","modified":1624613350060},{"_id":"source/_posts/USST题解报告_tmp.html","hash":"f780cfba266d98d3eca18241dfc1efd5eaae6e0c","modified":1624613666974},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624613972047},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624613971939},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624613971939},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624613972025},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624613972025},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624613972026},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624613972044},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624613972046},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514806389000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514806389000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514806389000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514806389000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514806389000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514806389000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514806389000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514806389000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514806389000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514806389000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514806389000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"themes/next/_config.yml","hash":"5ff37e90e4d6812c8fc40c03fa6e1d903d743470","modified":1514806389000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514806389000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514806389000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514806389000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1624613971903},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514806389000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514806389000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514806389000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514806389000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514806389000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514806389000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514806389000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1624613972049},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1624613972049},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1624613972055},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1624613972055},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1624613972056},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1624613972054},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1624613972058},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514806389000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1624613972076},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1624613972080},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1624613972125},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1624613972124},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1624613972126},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1624613972125},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1624613972126},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1624613972127},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1624613972128},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1624613972127},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1624613972128},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1624613972129},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1624613972129},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1624613972130},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1624613972130},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1624613972083},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1624613972084},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1624613972085},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1624613972087},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1624613972085},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1624613972086},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1624613972097},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1624613972070},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1624613972069},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1624613972071},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1624613972072},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1624613972072},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1624613972088},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1624613972114},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1624613972114},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1624613972105},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1624613972107},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1624613972113},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1624617644273},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1624614020575},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1624617644273},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1624614020575},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1624617644273},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1624617644273},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1624617644273},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1624617644273},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1624617644273},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1624614020575},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1624614020575},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1624617644273},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1624614020575},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1624614020575},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1624617644273},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1624617644273},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1624617644273},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1624614020575},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1624617644273},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1624617644273},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1624614020575},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1624614020575},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1624614020575},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1624614020575},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1624614020575},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1624614020575},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1624617644273},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1624614020575},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1624614020575},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1624614020575},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1624614020575},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1624614020575},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1624614020575},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1624614020575},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1624614020575},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1624614020575},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1624614020575},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1624614020575},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1624614020575},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1624614020575},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1624614020575},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1624614020575},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1624614020575},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1624614020575},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1624614020575},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1624614020575},{"_id":"public/lib/fastclick/README.html","hash":"c88ed76304392b9e77b266fcbbc05f443c5df133","modified":1624614020575},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1624614020575},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1624614020575},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1624614020575},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"bc6cf8951a99074bdc6ec9172f03fb7c0e412729","modified":1624614020575},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1624614020575},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1624614020575},{"_id":"public/lib/jquery_lazyload/README.html","hash":"96a5c2cc00de5b338ae972c1e8de879d2d919608","modified":1624614020575},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1624614020575},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1624614020575},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1624614020575},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1624614020575},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1624614020575},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1624614020575},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1624614020575},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1624614020575},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1624614020575},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1624614020575},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1624614020575},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1624614020575},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1624614020575},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1624614020575},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1624614020575},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1624614020575},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1624614020575},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1624614020575},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1624614020575},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1624614020575},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1624614020575},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1624614020575},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1624614020575},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1624614020575},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1624614020575},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1624614020575},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1624614020575},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1624614020575},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1624614020575},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1624614020575},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1624614020575},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1624614020575},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1624614020575},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1624614020575},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1624614020575},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1624614020575},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1624614020575},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1624614020575},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1624614020575},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1624614020575},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1624614020575},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1624614020575},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1624614020575},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1624614020575},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1624614020575},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1624614020575},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1624614020575},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1624614020575},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1624614020575},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1624614020575},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1624614020575},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1624614020575},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1624614020575},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1624617644273}],"Category":[{"name":"ACM","_id":"ckpp77ovh0003u8tkgd6b84jw"},{"name":"Diary","_id":"ckpp77ovl0008u8tk7l7i9gxo"},{"name":"-算法","_id":"ckpp77ovo000du8tka0zwc1yv"},{"name":"div1","_id":"ckps1ze7w0001c0tk6mwz8e1i"},{"name":"-div1","_id":"ckps1ze810003c0tkgv6mc40e"},{"name":"div2","_id":"ckpun1mbv0001xktkcntsaa6d"}],"Data":[],"Page":[{"title":"About me","date":"2021-03-21T15:19:57.000Z","_content":"","source":"About-me/index.md","raw":"---\ntitle: About me\ndate: 2021-03-21 23:19:57\n---\n","updated":"2021-03-21T15:19:57.227Z","path":"About-me/index.html","comments":1,"layout":"page","_id":"ckpp77ove0001u8tkb0ljh2rg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Postons","date":"2021-06-09T06:44:47.000Z","_content":"\n# 题目\n{% asset_img Potions(Hard_version).png %}\n#### 题目分析\n题目大概意思就是给出n个药水，每种药水会让生命值变化，你从左到右走，经过这个位置的时候可以拿起这瓶药水也可以忽略这瓶药水。你的初始生命值为0，并且整个过程中你的生命值不能低于0，问你最多能拿多少药水。\n\n#### 题解\n这个题目和最大连续子序列不同，这个是可以不连续的。\n\n- 贪心：使用贪心的策略，每次只要生命值允许，就拿这瓶药，并且记录自己拿了那些药。\n\n- 反悔：如果走到一个地方，拿了这瓶药之后，自己的生命会比0小，则比较：\n     - 若将之前所有药中生命值最小的一瓶比现在碰到的这瓶还小，那么丢弃之前那瓶药，而选择这瓶药，即反悔。\n     - 否则跳过这瓶药\n\n- 优先队列：由于每次都要比较之前已经拿了的药最小的，所以要用小根堆来记录之前已经喝过的药。\n\n#### 代码\n```c++\n#include<iostream>\n#include<queue>\nusing namespace std;\nlong long Now=0;    // 当前生命值\nint ans=0;    // 能够捡起的数量 \nint a[200004];\nint n;     // position数\nint main(){\n    //freopen(\"test/div1A.txt\",\"r\",stdin);\n    cin>>n;\n    priority_queue<int,vector<int>,greater<int>> Q;   // 小根堆\n    for(int i = 0;i<n;++i){\n        cin>>a[i];\n    }\n\n    for(int i =0;i<n;++i){\n        if(Now+a[i]<0){\n            if(!Q.empty()&&Q.top()<a[i]){\n                // 将小根堆顶部替换掉，由于Now本来就大于0，所以反悔后Now也大于0\n                Now=Now+a[i]-Q.top();\n                Q.pop();\n                Q.push(a[i]);\n                \n            }else{\n                continue;\n            }\n        }else{\n            Now+=a[i];\n            Q.push(a[i]);    // 把之前要的记录下来\n            ans++;\n        }\n    }\n    cout<<ans<<endl;\n}\n```\n\n\n","source":"_posts/Postons.md","raw":"---\ntitle: Postons\ndate: 2021-06-09 14:44:47\ncategories:\n   - div1\ntags:\n   - 反悔\n   - 贪心\n   - 优先队列\n---\n\n# 题目\n{% asset_img Potions(Hard_version).png %}\n#### 题目分析\n题目大概意思就是给出n个药水，每种药水会让生命值变化，你从左到右走，经过这个位置的时候可以拿起这瓶药水也可以忽略这瓶药水。你的初始生命值为0，并且整个过程中你的生命值不能低于0，问你最多能拿多少药水。\n\n#### 题解\n这个题目和最大连续子序列不同，这个是可以不连续的。\n\n- 贪心：使用贪心的策略，每次只要生命值允许，就拿这瓶药，并且记录自己拿了那些药。\n\n- 反悔：如果走到一个地方，拿了这瓶药之后，自己的生命会比0小，则比较：\n     - 若将之前所有药中生命值最小的一瓶比现在碰到的这瓶还小，那么丢弃之前那瓶药，而选择这瓶药，即反悔。\n     - 否则跳过这瓶药\n\n- 优先队列：由于每次都要比较之前已经拿了的药最小的，所以要用小根堆来记录之前已经喝过的药。\n\n#### 代码\n```c++\n#include<iostream>\n#include<queue>\nusing namespace std;\nlong long Now=0;    // 当前生命值\nint ans=0;    // 能够捡起的数量 \nint a[200004];\nint n;     // position数\nint main(){\n    //freopen(\"test/div1A.txt\",\"r\",stdin);\n    cin>>n;\n    priority_queue<int,vector<int>,greater<int>> Q;   // 小根堆\n    for(int i = 0;i<n;++i){\n        cin>>a[i];\n    }\n\n    for(int i =0;i<n;++i){\n        if(Now+a[i]<0){\n            if(!Q.empty()&&Q.top()<a[i]){\n                // 将小根堆顶部替换掉，由于Now本来就大于0，所以反悔后Now也大于0\n                Now=Now+a[i]-Q.top();\n                Q.pop();\n                Q.push(a[i]);\n                \n            }else{\n                continue;\n            }\n        }else{\n            Now+=a[i];\n            Q.push(a[i]);    // 把之前要的记录下来\n            ans++;\n        }\n    }\n    cout<<ans<<endl;\n}\n```\n\n\n","slug":"Postons","published":1,"updated":"2021-06-11T07:55:00.142Z","_id":"ckpp77ova0000u8tkhdr22q6g","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/09/Postons/Potions(Hard_version).png\" class=\"\">\n<h4 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h4><p>题目大概意思就是给出n个药水，每种药水会让生命值变化，你从左到右走，经过这个位置的时候可以拿起这瓶药水也可以忽略这瓶药水。你的初始生命值为0，并且整个过程中你的生命值不能低于0，问你最多能拿多少药水。</p>\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><p>这个题目和最大连续子序列不同，这个是可以不连续的。</p>\n<ul>\n<li><p>贪心：使用贪心的策略，每次只要生命值允许，就拿这瓶药，并且记录自己拿了那些药。</p>\n</li>\n<li><p>反悔：如果走到一个地方，拿了这瓶药之后，自己的生命会比0小，则比较：</p>\n<ul>\n<li>若将之前所有药中生命值最小的一瓶比现在碰到的这瓶还小，那么丢弃之前那瓶药，而选择这瓶药，即反悔。</li>\n<li>否则跳过这瓶药</li>\n</ul>\n</li>\n<li><p>优先队列：由于每次都要比较之前已经拿了的药最小的，所以要用小根堆来记录之前已经喝过的药。</p>\n</li>\n</ul>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> Now=<span class=\"number\">0</span>;    <span class=\"comment\">// 当前生命值</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;    <span class=\"comment\">// 能够捡起的数量 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">200004</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;     <span class=\"comment\">// position数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1A.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    priority_queue&lt;<span class=\"keyword\">int</span>,vector&lt;<span class=\"keyword\">int</span>&gt;,greater&lt;<span class=\"keyword\">int</span>&gt;&gt; Q;   <span class=\"comment\">// 小根堆</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Now+a[i]&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Q.<span class=\"built_in\">empty</span>()&amp;&amp;Q.<span class=\"built_in\">top</span>()&lt;a[i])&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将小根堆顶部替换掉，由于Now本来就大于0，所以反悔后Now也大于0</span></span><br><span class=\"line\">                Now=Now+a[i]-Q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Now+=a[i];</span><br><span class=\"line\">            Q.<span class=\"built_in\">push</span>(a[i]);    <span class=\"comment\">// 把之前要的记录下来</span></span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/09/Postons/Potions(Hard_version).png\" class=\"\">\n<h4 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h4><p>题目大概意思就是给出n个药水，每种药水会让生命值变化，你从左到右走，经过这个位置的时候可以拿起这瓶药水也可以忽略这瓶药水。你的初始生命值为0，并且整个过程中你的生命值不能低于0，问你最多能拿多少药水。</p>\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><p>这个题目和最大连续子序列不同，这个是可以不连续的。</p>\n<ul>\n<li><p>贪心：使用贪心的策略，每次只要生命值允许，就拿这瓶药，并且记录自己拿了那些药。</p>\n</li>\n<li><p>反悔：如果走到一个地方，拿了这瓶药之后，自己的生命会比0小，则比较：</p>\n<ul>\n<li>若将之前所有药中生命值最小的一瓶比现在碰到的这瓶还小，那么丢弃之前那瓶药，而选择这瓶药，即反悔。</li>\n<li>否则跳过这瓶药</li>\n</ul>\n</li>\n<li><p>优先队列：由于每次都要比较之前已经拿了的药最小的，所以要用小根堆来记录之前已经喝过的药。</p>\n</li>\n</ul>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> Now=<span class=\"number\">0</span>;    <span class=\"comment\">// 当前生命值</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;    <span class=\"comment\">// 能够捡起的数量 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">200004</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;     <span class=\"comment\">// position数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1A.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    priority_queue&lt;<span class=\"keyword\">int</span>,vector&lt;<span class=\"keyword\">int</span>&gt;,greater&lt;<span class=\"keyword\">int</span>&gt;&gt; Q;   <span class=\"comment\">// 小根堆</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Now+a[i]&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Q.<span class=\"built_in\">empty</span>()&amp;&amp;Q.<span class=\"built_in\">top</span>()&lt;a[i])&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将小根堆顶部替换掉，由于Now本来就大于0，所以反悔后Now也大于0</span></span><br><span class=\"line\">                Now=Now+a[i]-Q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                Q.<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Now+=a[i];</span><br><span class=\"line\">            Q.<span class=\"built_in\">push</span>(a[i]);    <span class=\"comment\">// 把之前要的记录下来</span></span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"IDEApush到github被拒绝的问题","date":"2021-03-22T14:49:21.000Z","_content":"\n##  上传时被拒绝\n\n上传代码到github出现rejected的问题是因为新传的文件和原来的不是同一时间上传等，解决办法：\n\n```\ngit pull --rebase origin master\ngit push -u origin master -f     //这句不一定要\n```\n\n\n##  删除Github上面的文件夹\n\n先pull（把github上的文件pull下来）\n再执行\n```\ngit rm --cached -r \"要删除的文件夹\"\n```\n然后再commit，再push就行了。\n","source":"_posts/IDEApush到github被拒绝的问题.md","raw":"---\ntitle: IDEApush到github被拒绝的问题\ndate: 2021-03-22 22:49:21\ncategories:\n- Diary\ntags:\n- JAVA\n---\n\n##  上传时被拒绝\n\n上传代码到github出现rejected的问题是因为新传的文件和原来的不是同一时间上传等，解决办法：\n\n```\ngit pull --rebase origin master\ngit push -u origin master -f     //这句不一定要\n```\n\n\n##  删除Github上面的文件夹\n\n先pull（把github上的文件pull下来）\n再执行\n```\ngit rm --cached -r \"要删除的文件夹\"\n```\n然后再commit，再push就行了。\n","slug":"IDEApush到github被拒绝的问题","published":1,"updated":"2021-03-29T14:44:35.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpp77ovf0002u8tk0ghb1f6y","content":"<h2 id=\"上传时被拒绝\"><a href=\"#上传时被拒绝\" class=\"headerlink\" title=\"上传时被拒绝\"></a>上传时被拒绝</h2><p>上传代码到github出现rejected的问题是因为新传的文件和原来的不是同一时间上传等，解决办法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull --rebase origin master</span><br><span class=\"line\">git push -u origin master -f     &#x2F;&#x2F;这句不一定要</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"删除Github上面的文件夹\"><a href=\"#删除Github上面的文件夹\" class=\"headerlink\" title=\"删除Github上面的文件夹\"></a>删除Github上面的文件夹</h2><p>先pull（把github上的文件pull下来）<br>再执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached -r &quot;要删除的文件夹&quot;</span><br></pre></td></tr></table></figure>\n<p>然后再commit，再push就行了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"上传时被拒绝\"><a href=\"#上传时被拒绝\" class=\"headerlink\" title=\"上传时被拒绝\"></a>上传时被拒绝</h2><p>上传代码到github出现rejected的问题是因为新传的文件和原来的不是同一时间上传等，解决办法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull --rebase origin master</span><br><span class=\"line\">git push -u origin master -f     &#x2F;&#x2F;这句不一定要</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"删除Github上面的文件夹\"><a href=\"#删除Github上面的文件夹\" class=\"headerlink\" title=\"删除Github上面的文件夹\"></a>删除Github上面的文件夹</h2><p>先pull（把github上的文件pull下来）<br>再执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached -r &quot;要删除的文件夹&quot;</span><br></pre></td></tr></table></figure>\n<p>然后再commit，再push就行了。</p>\n"},{"title":"关于对floyd算法的质疑","date":"2021-04-17T16:24:38.000Z","_content":"# floyd算法\n所谓floyd算法，就是求图的每两个顶点的最短路径问题。算法用的是动态规划。\n循环N次，每次选取一个顶点K，比较图的每个顶点经过K到达其他顶点的距离和本来该顶点到达其他顶点的距离，并进行距离的更新。最后可求出每两个点的最短距离。\n\n#### 疑惑\n例如一个有向图，只有1->2和1->0->4->3->2这两条路径。前者长度8，后者总长度6。那么在选取0作起始点的时候，0->2没有更新成为最短路径，并且后来会把0抛弃掉，不考虑经过0，所以在选择经过0的时候，我们就没能求出1经过0到达2的最短路径。那么怎么还能算出1->2的最短路径？\n#### 理解\n在对0进行考虑的时候，我们已经更新了1->4的路径，而这条路径是从1经过0到达2的最短路径的一部分。所以其实经过0到达2的最短路径就已经被求出了一部分，所以接下来和0就没关系了。接下来的求法也同理。\n\n","source":"_posts/关于对floyd算法的质疑.md","raw":"---\ntitle: 关于对floyd算法的质疑\ndate: 2021-04-18 00:24:38\ntags:\n  - 动态规划\n---\n# floyd算法\n所谓floyd算法，就是求图的每两个顶点的最短路径问题。算法用的是动态规划。\n循环N次，每次选取一个顶点K，比较图的每个顶点经过K到达其他顶点的距离和本来该顶点到达其他顶点的距离，并进行距离的更新。最后可求出每两个点的最短距离。\n\n#### 疑惑\n例如一个有向图，只有1->2和1->0->4->3->2这两条路径。前者长度8，后者总长度6。那么在选取0作起始点的时候，0->2没有更新成为最短路径，并且后来会把0抛弃掉，不考虑经过0，所以在选择经过0的时候，我们就没能求出1经过0到达2的最短路径。那么怎么还能算出1->2的最短路径？\n#### 理解\n在对0进行考虑的时候，我们已经更新了1->4的路径，而这条路径是从1经过0到达2的最短路径的一部分。所以其实经过0到达2的最短路径就已经被求出了一部分，所以接下来和0就没关系了。接下来的求法也同理。\n\n","slug":"关于对floyd算法的质疑","published":1,"updated":"2021-04-17T16:46:44.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpp77ovi0005u8tkdad5eag9","content":"<h1 id=\"floyd算法\"><a href=\"#floyd算法\" class=\"headerlink\" title=\"floyd算法\"></a>floyd算法</h1><p>所谓floyd算法，就是求图的每两个顶点的最短路径问题。算法用的是动态规划。<br>循环N次，每次选取一个顶点K，比较图的每个顶点经过K到达其他顶点的距离和本来该顶点到达其他顶点的距离，并进行距离的更新。最后可求出每两个点的最短距离。</p>\n<h4 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h4><p>例如一个有向图，只有1-&gt;2和1-&gt;0-&gt;4-&gt;3-&gt;2这两条路径。前者长度8，后者总长度6。那么在选取0作起始点的时候，0-&gt;2没有更新成为最短路径，并且后来会把0抛弃掉，不考虑经过0，所以在选择经过0的时候，我们就没能求出1经过0到达2的最短路径。那么怎么还能算出1-&gt;2的最短路径？</p>\n<h4 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h4><p>在对0进行考虑的时候，我们已经更新了1-&gt;4的路径，而这条路径是从1经过0到达2的最短路径的一部分。所以其实经过0到达2的最短路径就已经被求出了一部分，所以接下来和0就没关系了。接下来的求法也同理。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"floyd算法\"><a href=\"#floyd算法\" class=\"headerlink\" title=\"floyd算法\"></a>floyd算法</h1><p>所谓floyd算法，就是求图的每两个顶点的最短路径问题。算法用的是动态规划。<br>循环N次，每次选取一个顶点K，比较图的每个顶点经过K到达其他顶点的距离和本来该顶点到达其他顶点的距离，并进行距离的更新。最后可求出每两个点的最短距离。</p>\n<h4 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h4><p>例如一个有向图，只有1-&gt;2和1-&gt;0-&gt;4-&gt;3-&gt;2这两条路径。前者长度8，后者总长度6。那么在选取0作起始点的时候，0-&gt;2没有更新成为最短路径，并且后来会把0抛弃掉，不考虑经过0，所以在选择经过0的时候，我们就没能求出1经过0到达2的最短路径。那么怎么还能算出1-&gt;2的最短路径？</p>\n<h4 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h4><p>在对0进行考虑的时候，我们已经更新了1-&gt;4的路径，而这条路径是从1经过0到达2的最短路径的一部分。所以其实经过0到达2的最短路径就已经被求出了一部分，所以接下来和0就没关系了。接下来的求法也同理。</p>\n"},{"title":"sptingboot集成mybatis","date":"2021-03-30T04:23:17.000Z","catagories":["springboot"],"_content":"\n\n# SpringBoot集成mybatis\n\n\n> ### 添加依赖\n\n&emsp;&emsp;在pom.xml文件中添加MySQL驱动依赖和mybatis依赖,MySQL不用加版本号，继承了父类的版本号，也可以自己指定版本号。\n```\n<!--MySQL驱动-->\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t</dependency>\n\n\n<!--MyBatis整合springboot框架的起步依赖-->\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t\t<version>2.0.0</version>\n\t\t</dependency>\n```\n>### 属性设置\n&emsp;&emsp;在GeneratorMapper.xml文件中进行连接数据库的属性设置，设置完成后生成即可。","source":"_posts/sptingboot集成mybatis.md","raw":"---\ntitle: sptingboot集成mybatis\ndate: 2021-03-30 12:23:17\ncatagories:\n- springboot\ntags:\n- JAVA\n- SptingBoot\n- 数据库\n---\n\n\n# SpringBoot集成mybatis\n\n\n> ### 添加依赖\n\n&emsp;&emsp;在pom.xml文件中添加MySQL驱动依赖和mybatis依赖,MySQL不用加版本号，继承了父类的版本号，也可以自己指定版本号。\n```\n<!--MySQL驱动-->\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t</dependency>\n\n\n<!--MyBatis整合springboot框架的起步依赖-->\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t\t<version>2.0.0</version>\n\t\t</dependency>\n```\n>### 属性设置\n&emsp;&emsp;在GeneratorMapper.xml文件中进行连接数据库的属性设置，设置完成后生成即可。","slug":"sptingboot集成mybatis","published":1,"updated":"2021-04-11T14:34:59.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpp77ovj0006u8tk6gjdencj","content":"<h1 id=\"SpringBoot集成mybatis\"><a href=\"#SpringBoot集成mybatis\" class=\"headerlink\" title=\"SpringBoot集成mybatis\"></a>SpringBoot集成mybatis</h1><blockquote>\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3></blockquote>\n<p>&emsp;&emsp;在pom.xml文件中添加MySQL驱动依赖和mybatis依赖,MySQL不用加版本号，继承了父类的版本号，也可以自己指定版本号。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--MySQL驱动--&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--MyBatis整合springboot框架的起步依赖--&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.0.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"属性设置\"><a href=\"#属性设置\" class=\"headerlink\" title=\"属性设置\"></a>属性设置</h3><p>&emsp;&emsp;在GeneratorMapper.xml文件中进行连接数据库的属性设置，设置完成后生成即可。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot集成mybatis\"><a href=\"#SpringBoot集成mybatis\" class=\"headerlink\" title=\"SpringBoot集成mybatis\"></a>SpringBoot集成mybatis</h1><blockquote>\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3></blockquote>\n<p>&emsp;&emsp;在pom.xml文件中添加MySQL驱动依赖和mybatis依赖,MySQL不用加版本号，继承了父类的版本号，也可以自己指定版本号。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--MySQL驱动--&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--MyBatis整合springboot框架的起步依赖--&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.0.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"属性设置\"><a href=\"#属性设置\" class=\"headerlink\" title=\"属性设置\"></a>属性设置</h3><p>&emsp;&emsp;在GeneratorMapper.xml文件中进行连接数据库的属性设置，设置完成后生成即可。</p>\n</blockquote>\n"},{"title":"在O(logn)的复杂度下两数组的混合中位数","date":"2021-04-10T15:32:41.000Z","_content":"### 题目 \n设X[ 0 : n - 1]和Y[ 0 : n – 1 ]为两个数组，每个数组中含有n个已排好序的数。找出X和Y的2n个数的中位数。要求：O(logn)时间内\n\n##### 解析\n要在O(logn)时间内求解，则自然想到分治算法。求解思路与如下：\n先分别求数组X和Y的两个中位数MedX和MedY。则会有以下情况\n* （1）MedX==MedY。则很明显MedX即是2n个数的中位数。因为两个数组是完全等长的，所以两个数组中位数两边的数的个数，也是完全一样的。\n\n* （2）MedX>MedY\n  * 如果n是奇数\n这种情况下，比X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,...,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,...,X<sub>n-1</sub>一定比中位数大。所以中位数不会在X<sub>(n-1)/2+1</sub>,X(n-1)/2+2</sub>,...,X<sub>n-1</sub>中。同样Y<sub>0</sub>,Y<sub>1</sub>,...,Y<sub>(n-1)/2-1</sub>一定比中位数小。所以中位数在X<sub>0</sub>,X<sub>1</sub>,...,X<sub>(n-1)/2</sub>和Y<sub>(n-1)/2</sub>,Y<sub>n/2+2</sub>,...,Y<sub>n-1</sub>中。则只需要考察X[0:(n-1)/2:n-1]和Y[0:(n-1)/2]。\n  * 如果n是偶数\n  则X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,...,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,...,X<sub>n-1</sub>一定比中位数大。同样Y<sub>0</sub>,Y<sub>1</sub>,...,Y<sub>(n-)/2-2</sub>一定比中位数小。则只需要考察X[0:(n-1)/2+1]和Y[(n-1)/2-1:n-1]。\n\n由于在中位数两边加上或减去任意等数量的数并不影响中位数的取值,所以上述方法成立。\n* （3）MedX<MedY\n这种情况和上面的同理\n\n分到最后每个数组只有两个元素，则不可以再分下去，利用X和Y的中位数用直接方法求解。\n  \n``` c++\n#include<iostream>\nusing namespace std;\n/*\n函数名：FindMedian\n功能：  求数组的某一区间的中位数\n参数：  double Z[]-所求数组，int zl-数组的最小下标，int zr-数组的最大下标\n返回值：double-中位数\n*/\ndouble FindMedian(double Z[],int zl,int zr){\n       if((zr-zl)%2==0){\n           return Z[(zr+zl)/2];\n       }else{\n           return (Z[(zr+zl)/2]+Z[(zr+zl)/2+1])/2;\n       }\n}\n/*\n函数名：FindMedian\n功能：  求分别有序数组X某一区间和有序数组Y某一区间的混合中位数\n参数：  int X[]-数组X，int xl-数组X要考察的最小下标，int xr-数组x要考察的最大下标\n返回值：double-混合中位数\n*/\ndouble FindMixMedian(double X[],int xl,int xr,double Y[],int yl,int yr){\n    \n    double MedX=FindMedian(X,xl,xr);// 求X考察区域的中位数\n    double MedY=FindMedian(Y,yl,yr);// 求y所考察区域的中位数\n    // 若两个中位数相等，则所求便是混合区间的中位数\n    if(abs(MedX-MedY)<0.00001){\n        return MedY;\n    }\n    // 若两边都只剩一个了，就取平均\n    if(xl==xr&&yl==yr){\n        return (X[xl]+Y[xl])/2;\n    }\n    // 若每个数组只剩两个，则讨论求出中位数\n    if(xr-xl+1==2&&yr-yl+1==2){\n        // 若MedX大，则X[xr]大于X[xl]和Y[YL],则判断X[xr]和Y[yr]\n        if(MedX>MedY){    \n            if(X[xr]>=Y[yr]){     // 若X[xr]>=Y[yr],则可以确定地关系是Y[yl]<=Y[yr]<=X[xr]\n                if(X[xl]<Y[yl]){  // X[xl]<Y[yl]<=Y[yr]<=X[xr] \n                    return ((Y[yl]+Y[yr])/2);\n                }else{            // Y[yl]<=Y[yr]<X[xl]<=X[xr]或 Y[yl]<=X[xl]<=Y[yr]<=X[xr]\n                    return ((X[xl]+Y[yr])/2);\n                }\n            }else{ // 如果X[xr]比Y[Yr]小，则X[xl]一定比Y[yl]大,则 Y[yl]<X[xl]<=X[xr]<Y[yr]\n             return MedX;\n            }\n        }\n        // 若MedY大，则与上面的对称\n        if(MedX<MedY){     \n            if(Y[yr]>=X[xr]){\n                if(Y[yl]<X[xl]){\n                    return ((X[xl]+X[xr])/2);\n                }else{    \n                    return ((Y[yl]+X[xr])/2);\n                }  \n            } else{\n                return MedY;\n            }\n         }\n\n    }\n    // 区间划分\n    if(MedX>MedY){   // MedX大时，X取小的部分，Y取大的部分\n        if((xl-xr+1)%2!=0){    // 若区间个数为奇数\n           return FindMixMedian(X,xl,(xl+xr)/2,Y,(yl+yr)/2,yr);\n        }else{\n           return FindMixMedian(X,xl,(xl+xr)/2+1,Y,(yl+yr)/2,yr);\n        }\n    }else{           // MedX小时，X取大的部分，Y取小的部分\n        if((xl-xr+1)%2!=0){    // 若区间个数为奇数\n           return FindMixMedian(X,(xl+xr)/2,xr,Y,yl,(yl+yr)/2);\n        }else{\n           return FindMixMedian(X,(xl+xr)/2,xr,Y,yl,(yl+yr)/2+1);\n        }\n    }\n}\nint main(){\n    freopen(\"input1.txt\",\"r\",stdin);\n    freopen(\"output1.txt\",\"w\",stdout);\n    int n;     // 数组X和Y中每个数组所含有的元素个数   \n    double X[202]; \n    double Y[202];\n    double ans;\n    cin>>n;\n    for(int i = 0;i<n;++i){\n        cin>>X[i];\n    }\n    for(int i = 0;i<n;++i){\n        cin>>Y[i];\n    }\n    ans = FindMixMedian(X,0,n-1,Y,0,n-1);\n    cout<<ans<<endl;\n}\n```","source":"_posts/在O-logn-的复杂度下两数组的混合中位数.md","raw":"---\ntitle: 在O(logn)的复杂度下两数组的混合中位数\ndate: 2021-04-10 23:32:41\ncategories:\n  -算法\ntags:\n  -分治法\n---\n### 题目 \n设X[ 0 : n - 1]和Y[ 0 : n – 1 ]为两个数组，每个数组中含有n个已排好序的数。找出X和Y的2n个数的中位数。要求：O(logn)时间内\n\n##### 解析\n要在O(logn)时间内求解，则自然想到分治算法。求解思路与如下：\n先分别求数组X和Y的两个中位数MedX和MedY。则会有以下情况\n* （1）MedX==MedY。则很明显MedX即是2n个数的中位数。因为两个数组是完全等长的，所以两个数组中位数两边的数的个数，也是完全一样的。\n\n* （2）MedX>MedY\n  * 如果n是奇数\n这种情况下，比X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,...,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,...,X<sub>n-1</sub>一定比中位数大。所以中位数不会在X<sub>(n-1)/2+1</sub>,X(n-1)/2+2</sub>,...,X<sub>n-1</sub>中。同样Y<sub>0</sub>,Y<sub>1</sub>,...,Y<sub>(n-1)/2-1</sub>一定比中位数小。所以中位数在X<sub>0</sub>,X<sub>1</sub>,...,X<sub>(n-1)/2</sub>和Y<sub>(n-1)/2</sub>,Y<sub>n/2+2</sub>,...,Y<sub>n-1</sub>中。则只需要考察X[0:(n-1)/2:n-1]和Y[0:(n-1)/2]。\n  * 如果n是偶数\n  则X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,...,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,...,X<sub>n-1</sub>一定比中位数大。同样Y<sub>0</sub>,Y<sub>1</sub>,...,Y<sub>(n-)/2-2</sub>一定比中位数小。则只需要考察X[0:(n-1)/2+1]和Y[(n-1)/2-1:n-1]。\n\n由于在中位数两边加上或减去任意等数量的数并不影响中位数的取值,所以上述方法成立。\n* （3）MedX<MedY\n这种情况和上面的同理\n\n分到最后每个数组只有两个元素，则不可以再分下去，利用X和Y的中位数用直接方法求解。\n  \n``` c++\n#include<iostream>\nusing namespace std;\n/*\n函数名：FindMedian\n功能：  求数组的某一区间的中位数\n参数：  double Z[]-所求数组，int zl-数组的最小下标，int zr-数组的最大下标\n返回值：double-中位数\n*/\ndouble FindMedian(double Z[],int zl,int zr){\n       if((zr-zl)%2==0){\n           return Z[(zr+zl)/2];\n       }else{\n           return (Z[(zr+zl)/2]+Z[(zr+zl)/2+1])/2;\n       }\n}\n/*\n函数名：FindMedian\n功能：  求分别有序数组X某一区间和有序数组Y某一区间的混合中位数\n参数：  int X[]-数组X，int xl-数组X要考察的最小下标，int xr-数组x要考察的最大下标\n返回值：double-混合中位数\n*/\ndouble FindMixMedian(double X[],int xl,int xr,double Y[],int yl,int yr){\n    \n    double MedX=FindMedian(X,xl,xr);// 求X考察区域的中位数\n    double MedY=FindMedian(Y,yl,yr);// 求y所考察区域的中位数\n    // 若两个中位数相等，则所求便是混合区间的中位数\n    if(abs(MedX-MedY)<0.00001){\n        return MedY;\n    }\n    // 若两边都只剩一个了，就取平均\n    if(xl==xr&&yl==yr){\n        return (X[xl]+Y[xl])/2;\n    }\n    // 若每个数组只剩两个，则讨论求出中位数\n    if(xr-xl+1==2&&yr-yl+1==2){\n        // 若MedX大，则X[xr]大于X[xl]和Y[YL],则判断X[xr]和Y[yr]\n        if(MedX>MedY){    \n            if(X[xr]>=Y[yr]){     // 若X[xr]>=Y[yr],则可以确定地关系是Y[yl]<=Y[yr]<=X[xr]\n                if(X[xl]<Y[yl]){  // X[xl]<Y[yl]<=Y[yr]<=X[xr] \n                    return ((Y[yl]+Y[yr])/2);\n                }else{            // Y[yl]<=Y[yr]<X[xl]<=X[xr]或 Y[yl]<=X[xl]<=Y[yr]<=X[xr]\n                    return ((X[xl]+Y[yr])/2);\n                }\n            }else{ // 如果X[xr]比Y[Yr]小，则X[xl]一定比Y[yl]大,则 Y[yl]<X[xl]<=X[xr]<Y[yr]\n             return MedX;\n            }\n        }\n        // 若MedY大，则与上面的对称\n        if(MedX<MedY){     \n            if(Y[yr]>=X[xr]){\n                if(Y[yl]<X[xl]){\n                    return ((X[xl]+X[xr])/2);\n                }else{    \n                    return ((Y[yl]+X[xr])/2);\n                }  \n            } else{\n                return MedY;\n            }\n         }\n\n    }\n    // 区间划分\n    if(MedX>MedY){   // MedX大时，X取小的部分，Y取大的部分\n        if((xl-xr+1)%2!=0){    // 若区间个数为奇数\n           return FindMixMedian(X,xl,(xl+xr)/2,Y,(yl+yr)/2,yr);\n        }else{\n           return FindMixMedian(X,xl,(xl+xr)/2+1,Y,(yl+yr)/2,yr);\n        }\n    }else{           // MedX小时，X取大的部分，Y取小的部分\n        if((xl-xr+1)%2!=0){    // 若区间个数为奇数\n           return FindMixMedian(X,(xl+xr)/2,xr,Y,yl,(yl+yr)/2);\n        }else{\n           return FindMixMedian(X,(xl+xr)/2,xr,Y,yl,(yl+yr)/2+1);\n        }\n    }\n}\nint main(){\n    freopen(\"input1.txt\",\"r\",stdin);\n    freopen(\"output1.txt\",\"w\",stdout);\n    int n;     // 数组X和Y中每个数组所含有的元素个数   \n    double X[202]; \n    double Y[202];\n    double ans;\n    cin>>n;\n    for(int i = 0;i<n;++i){\n        cin>>X[i];\n    }\n    for(int i = 0;i<n;++i){\n        cin>>Y[i];\n    }\n    ans = FindMixMedian(X,0,n-1,Y,0,n-1);\n    cout<<ans<<endl;\n}\n```","slug":"在O-logn-的复杂度下两数组的混合中位数","published":1,"updated":"2021-04-17T05:53:34.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpp77ovm000au8tkc3sf0c91","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>设X[ 0 : n - 1]和Y[ 0 : n – 1 ]为两个数组，每个数组中含有n个已排好序的数。找出X和Y的2n个数的中位数。要求：O(logn)时间内</p>\n<h5 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h5><p>要在O(logn)时间内求解，则自然想到分治算法。求解思路与如下：<br>先分别求数组X和Y的两个中位数MedX和MedY。则会有以下情况</p>\n<ul>\n<li><p>（1）MedX==MedY。则很明显MedX即是2n个数的中位数。因为两个数组是完全等长的，所以两个数组中位数两边的数的个数，也是完全一样的。</p>\n</li>\n<li><p>（2）MedX&gt;MedY</p>\n<ul>\n<li>如果n是奇数<br>这种情况下，比X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,…,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,…,X<sub>n-1</sub>一定比中位数大。所以中位数不会在X<sub>(n-1)/2+1</sub>,X(n-1)/2+2</sub>,…,X<sub>n-1</sub>中。同样Y<sub>0</sub>,Y<sub>1</sub>,…,Y<sub>(n-1)/2-1</sub>一定比中位数小。所以中位数在X<sub>0</sub>,X<sub>1</sub>,…,X<sub>(n-1)/2</sub>和Y<sub>(n-1)/2</sub>,Y<sub>n/2+2</sub>,…,Y<sub>n-1</sub>中。则只需要考察X[0:(n-1)/2:n-1]和Y[0:(n-1)/2]。</li>\n<li>如果n是偶数<br>则X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,…,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,…,X<sub>n-1</sub>一定比中位数大。同样Y<sub>0</sub>,Y<sub>1</sub>,…,Y<sub>(n-)/2-2</sub>一定比中位数小。则只需要考察X[0:(n-1)/2+1]和Y[(n-1)/2-1:n-1]。</li>\n</ul>\n</li>\n</ul>\n<p>由于在中位数两边加上或减去任意等数量的数并不影响中位数的取值,所以上述方法成立。</p>\n<ul>\n<li>（3）MedX&lt;MedY<br>这种情况和上面的同理</li>\n</ul>\n<p>分到最后每个数组只有两个元素，则不可以再分下去，利用X和Y的中位数用直接方法求解。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">函数名：FindMedian</span></span><br><span class=\"line\"><span class=\"comment\">功能：  求数组的某一区间的中位数</span></span><br><span class=\"line\"><span class=\"comment\">参数：  double Z[]-所求数组，int zl-数组的最小下标，int zr-数组的最大下标</span></span><br><span class=\"line\"><span class=\"comment\">返回值：double-中位数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">FindMedian</span><span class=\"params\">(<span class=\"keyword\">double</span> Z[],<span class=\"keyword\">int</span> zl,<span class=\"keyword\">int</span> zr)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>((zr-zl)%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> Z[(zr+zl)/<span class=\"number\">2</span>];</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"built_in\"><span class=\"keyword\">return</span></span> (Z[(zr+zl)/<span class=\"number\">2</span>]+Z[(zr+zl)/<span class=\"number\">2</span>+<span class=\"number\">1</span>])/<span class=\"number\">2</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">函数名：FindMedian</span></span><br><span class=\"line\"><span class=\"comment\">功能：  求分别有序数组X某一区间和有序数组Y某一区间的混合中位数</span></span><br><span class=\"line\"><span class=\"comment\">参数：  int X[]-数组X，int xl-数组X要考察的最小下标，int xr-数组x要考察的最大下标</span></span><br><span class=\"line\"><span class=\"comment\">返回值：double-混合中位数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">FindMixMedian</span><span class=\"params\">(<span class=\"keyword\">double</span> X[],<span class=\"keyword\">int</span> xl,<span class=\"keyword\">int</span> xr,<span class=\"keyword\">double</span> Y[],<span class=\"keyword\">int</span> yl,<span class=\"keyword\">int</span> yr)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">double</span> MedX=<span class=\"built_in\">FindMedian</span>(X,xl,xr);<span class=\"comment\">// 求X考察区域的中位数</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> MedY=<span class=\"built_in\">FindMedian</span>(Y,yl,yr);<span class=\"comment\">// 求y所考察区域的中位数</span></span><br><span class=\"line\">    <span class=\"comment\">// 若两个中位数相等，则所求便是混合区间的中位数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(MedX-MedY)&lt;<span class=\"number\">0.00001</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MedY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 若两边都只剩一个了，就取平均</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xl==xr&amp;&amp;yl==yr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (X[xl]+Y[xl])/<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 若每个数组只剩两个，则讨论求出中位数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xr-xl+<span class=\"number\">1</span>==<span class=\"number\">2</span>&amp;&amp;yr-yl+<span class=\"number\">1</span>==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若MedX大，则X[xr]大于X[xl]和Y[YL],则判断X[xr]和Y[yr]</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MedX&gt;MedY)&#123;    </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(X[xr]&gt;=Y[yr])&#123;     <span class=\"comment\">// 若X[xr]&gt;=Y[yr],则可以确定地关系是Y[yl]&lt;=Y[yr]&lt;=X[xr]</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(X[xl]&lt;Y[yl])&#123;  <span class=\"comment\">// X[xl]&lt;Y[yl]&lt;=Y[yr]&lt;=X[xr] </span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ((Y[yl]+Y[yr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;            <span class=\"comment\">// Y[yl]&lt;=Y[yr]&lt;X[xl]&lt;=X[xr]或 Y[yl]&lt;=X[xl]&lt;=Y[yr]&lt;=X[xr]</span></span><br><span class=\"line\">                    <span class=\"built_in\"><span class=\"keyword\">return</span></span> ((X[xl]+Y[yr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">// 如果X[xr]比Y[Yr]小，则X[xl]一定比Y[yl]大,则 Y[yl]&lt;X[xl]&lt;=X[xr]&lt;Y[yr]</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> MedX;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 若MedY大，则与上面的对称</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MedX&lt;MedY)&#123;     </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Y[yr]&gt;=X[xr])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Y[yl]&lt;X[xl])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ((X[xl]+X[xr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;    </span><br><span class=\"line\">                    <span class=\"built_in\"><span class=\"keyword\">return</span></span> ((Y[yl]+X[xr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> MedY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 区间划分</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(MedX&gt;MedY)&#123;   <span class=\"comment\">// MedX大时，X取小的部分，Y取大的部分</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xl-xr+<span class=\"number\">1</span>)%<span class=\"number\">2</span>!=<span class=\"number\">0</span>)&#123;    <span class=\"comment\">// 若区间个数为奇数</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,xl,(xl+xr)/<span class=\"number\">2</span>,Y,(yl+yr)/<span class=\"number\">2</span>,yr);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,xl,(xl+xr)/<span class=\"number\">2</span>+<span class=\"number\">1</span>,Y,(yl+yr)/<span class=\"number\">2</span>,yr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;           <span class=\"comment\">// MedX小时，X取大的部分，Y取小的部分</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xl-xr+<span class=\"number\">1</span>)%<span class=\"number\">2</span>!=<span class=\"number\">0</span>)&#123;    <span class=\"comment\">// 若区间个数为奇数</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,(xl+xr)/<span class=\"number\">2</span>,xr,Y,yl,(yl+yr)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,(xl+xr)/<span class=\"number\">2</span>,xr,Y,yl,(yl+yr)/<span class=\"number\">2</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input1.txt&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output1.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;     <span class=\"comment\">// 数组X和Y中每个数组所含有的元素个数   </span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> X[<span class=\"number\">202</span>]; </span><br><span class=\"line\">    <span class=\"keyword\">double</span> Y[<span class=\"number\">202</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;X[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;Y[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans = <span class=\"built_in\">FindMixMedian</span>(X,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>,Y,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>设X[ 0 : n - 1]和Y[ 0 : n – 1 ]为两个数组，每个数组中含有n个已排好序的数。找出X和Y的2n个数的中位数。要求：O(logn)时间内</p>\n<h5 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h5><p>要在O(logn)时间内求解，则自然想到分治算法。求解思路与如下：<br>先分别求数组X和Y的两个中位数MedX和MedY。则会有以下情况</p>\n<ul>\n<li><p>（1）MedX==MedY。则很明显MedX即是2n个数的中位数。因为两个数组是完全等长的，所以两个数组中位数两边的数的个数，也是完全一样的。</p>\n</li>\n<li><p>（2）MedX&gt;MedY</p>\n<ul>\n<li>如果n是奇数<br>这种情况下，比X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,…,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+1</sub>,X<sub>(n-1)/2+2</sub>,…,X<sub>n-1</sub>一定比中位数大。所以中位数不会在X<sub>(n-1)/2+1</sub>,X(n-1)/2+2</sub>,…,X<sub>n-1</sub>中。同样Y<sub>0</sub>,Y<sub>1</sub>,…,Y<sub>(n-1)/2-1</sub>一定比中位数小。所以中位数在X<sub>0</sub>,X<sub>1</sub>,…,X<sub>(n-1)/2</sub>和Y<sub>(n-1)/2</sub>,Y<sub>n/2+2</sub>,…,Y<sub>n-1</sub>中。则只需要考察X[0:(n-1)/2:n-1]和Y[0:(n-1)/2]。</li>\n<li>如果n是偶数<br>则X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,…,X<sub>n-1</sub>小的数至少有n+1个，所以X<sub>(n-1)/2+2</sub>,X<sub>(n-1)/2+3</sub>,…,X<sub>n-1</sub>一定比中位数大。同样Y<sub>0</sub>,Y<sub>1</sub>,…,Y<sub>(n-)/2-2</sub>一定比中位数小。则只需要考察X[0:(n-1)/2+1]和Y[(n-1)/2-1:n-1]。</li>\n</ul>\n</li>\n</ul>\n<p>由于在中位数两边加上或减去任意等数量的数并不影响中位数的取值,所以上述方法成立。</p>\n<ul>\n<li>（3）MedX&lt;MedY<br>这种情况和上面的同理</li>\n</ul>\n<p>分到最后每个数组只有两个元素，则不可以再分下去，利用X和Y的中位数用直接方法求解。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">函数名：FindMedian</span></span><br><span class=\"line\"><span class=\"comment\">功能：  求数组的某一区间的中位数</span></span><br><span class=\"line\"><span class=\"comment\">参数：  double Z[]-所求数组，int zl-数组的最小下标，int zr-数组的最大下标</span></span><br><span class=\"line\"><span class=\"comment\">返回值：double-中位数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">FindMedian</span><span class=\"params\">(<span class=\"keyword\">double</span> Z[],<span class=\"keyword\">int</span> zl,<span class=\"keyword\">int</span> zr)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>((zr-zl)%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> Z[(zr+zl)/<span class=\"number\">2</span>];</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"built_in\"><span class=\"keyword\">return</span></span> (Z[(zr+zl)/<span class=\"number\">2</span>]+Z[(zr+zl)/<span class=\"number\">2</span>+<span class=\"number\">1</span>])/<span class=\"number\">2</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">函数名：FindMedian</span></span><br><span class=\"line\"><span class=\"comment\">功能：  求分别有序数组X某一区间和有序数组Y某一区间的混合中位数</span></span><br><span class=\"line\"><span class=\"comment\">参数：  int X[]-数组X，int xl-数组X要考察的最小下标，int xr-数组x要考察的最大下标</span></span><br><span class=\"line\"><span class=\"comment\">返回值：double-混合中位数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">FindMixMedian</span><span class=\"params\">(<span class=\"keyword\">double</span> X[],<span class=\"keyword\">int</span> xl,<span class=\"keyword\">int</span> xr,<span class=\"keyword\">double</span> Y[],<span class=\"keyword\">int</span> yl,<span class=\"keyword\">int</span> yr)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">double</span> MedX=<span class=\"built_in\">FindMedian</span>(X,xl,xr);<span class=\"comment\">// 求X考察区域的中位数</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> MedY=<span class=\"built_in\">FindMedian</span>(Y,yl,yr);<span class=\"comment\">// 求y所考察区域的中位数</span></span><br><span class=\"line\">    <span class=\"comment\">// 若两个中位数相等，则所求便是混合区间的中位数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(MedX-MedY)&lt;<span class=\"number\">0.00001</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MedY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 若两边都只剩一个了，就取平均</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xl==xr&amp;&amp;yl==yr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (X[xl]+Y[xl])/<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 若每个数组只剩两个，则讨论求出中位数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xr-xl+<span class=\"number\">1</span>==<span class=\"number\">2</span>&amp;&amp;yr-yl+<span class=\"number\">1</span>==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若MedX大，则X[xr]大于X[xl]和Y[YL],则判断X[xr]和Y[yr]</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MedX&gt;MedY)&#123;    </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(X[xr]&gt;=Y[yr])&#123;     <span class=\"comment\">// 若X[xr]&gt;=Y[yr],则可以确定地关系是Y[yl]&lt;=Y[yr]&lt;=X[xr]</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(X[xl]&lt;Y[yl])&#123;  <span class=\"comment\">// X[xl]&lt;Y[yl]&lt;=Y[yr]&lt;=X[xr] </span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ((Y[yl]+Y[yr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;            <span class=\"comment\">// Y[yl]&lt;=Y[yr]&lt;X[xl]&lt;=X[xr]或 Y[yl]&lt;=X[xl]&lt;=Y[yr]&lt;=X[xr]</span></span><br><span class=\"line\">                    <span class=\"built_in\"><span class=\"keyword\">return</span></span> ((X[xl]+Y[yr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">// 如果X[xr]比Y[Yr]小，则X[xl]一定比Y[yl]大,则 Y[yl]&lt;X[xl]&lt;=X[xr]&lt;Y[yr]</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> MedX;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 若MedY大，则与上面的对称</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MedX&lt;MedY)&#123;     </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Y[yr]&gt;=X[xr])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Y[yl]&lt;X[xl])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ((X[xl]+X[xr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;    </span><br><span class=\"line\">                    <span class=\"built_in\"><span class=\"keyword\">return</span></span> ((Y[yl]+X[xr])/<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> MedY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 区间划分</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(MedX&gt;MedY)&#123;   <span class=\"comment\">// MedX大时，X取小的部分，Y取大的部分</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xl-xr+<span class=\"number\">1</span>)%<span class=\"number\">2</span>!=<span class=\"number\">0</span>)&#123;    <span class=\"comment\">// 若区间个数为奇数</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,xl,(xl+xr)/<span class=\"number\">2</span>,Y,(yl+yr)/<span class=\"number\">2</span>,yr);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,xl,(xl+xr)/<span class=\"number\">2</span>+<span class=\"number\">1</span>,Y,(yl+yr)/<span class=\"number\">2</span>,yr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;           <span class=\"comment\">// MedX小时，X取大的部分，Y取小的部分</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xl-xr+<span class=\"number\">1</span>)%<span class=\"number\">2</span>!=<span class=\"number\">0</span>)&#123;    <span class=\"comment\">// 若区间个数为奇数</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,(xl+xr)/<span class=\"number\">2</span>,xr,Y,yl,(yl+yr)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">FindMixMedian</span>(X,(xl+xr)/<span class=\"number\">2</span>,xr,Y,yl,(yl+yr)/<span class=\"number\">2</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input1.txt&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output1.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;     <span class=\"comment\">// 数组X和Y中每个数组所含有的元素个数   </span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> X[<span class=\"number\">202</span>]; </span><br><span class=\"line\">    <span class=\"keyword\">double</span> Y[<span class=\"number\">202</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;X[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;Y[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans = <span class=\"built_in\">FindMixMedian</span>(X,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>,Y,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"数据备份","date":"2021-06-11T07:52:27.000Z","_content":"# 题目\n{% asset_img backUp.png %}\n### 题目简述\n大概就是有n个办公楼，要找出k对，每对之间拉一个电缆，并且每个楼只能用一次，求出最小的距离之和\n\n### 分析\n- 首先要明确，找出的n对楼里面，每对肯定是相邻的，若不相邻，则令其中间的任一一对代替，能得到更优结果\n- 如果每次只选择最小那对，也是不行的，如：\n    - 现在有一个原始的对序列 2 1 2 5 6，要找两队。则放到优先队列中有 1 2 2 5 6，如果先选最小的，则现在选的是1，由于1中两个城市在2 2 这两队中，所以2 2 要丢掉。则优先队列中能用的只剩下 5 6，则下次应该选择5。不难发现，如果不选1的话，选2 2明显会比选1 5好。到这里不难发现，我们要后悔。、\n- 那么怎么进行后悔呢？\n    - 我们在选择最小的1之后，2 2 本来是要废掉的，但是我们不直接丢掉他们，而是创建一个新的数为 2+2-1=3 放入优先队列中。则优先队列中剩下的为 3 5 6，这样我们下次选3就相当于选了 2+2-1+1，即 2 2，后悔成功。\n\n### 算法\n每次取最小的一个区间，然后将这个数两边得区间合并，并减去这个数，构成后悔结点（则原区间最左边和最右边还应该加一段无穷大）。一直做下去，最终即可得到结果。\n区间段用链表维护。需要注意的是链表的更新。\n\n### 代码\n```c++\n#include<iostream>\n#include<cstring>\n#include<queue>\nusing namespace std;\nlong long s[100002];     // 每个公司到起点的距离\n\n// 每个相邻区间作为一个结点\ntypedef struct Node{\n      long long  Len;            // 区间的长度\n      int pos;                   // 当前结点的位置c\n}NODE;\n\n// 仿函数\nstruct tmp{\n    bool operator() (Node a,Node b){\n        return a.Len>b.Len;\n    }\n};\n\nbool isUsed[100002];// 判断某个结点是否已经使用过\nint Next[100002];   // 存放某个结点的下一个结点\nint Prio[100002];   // 存放某个节点的一个结点 \nlong long val[100002]; // 要得到某个位置的值信息，不能从队列里获得，要另存  \n\nNODE sNode;\nint main(){\n    //freopen(\"test/div1C.txt\",\"r\",stdin);\n    // 初始化标记数组\n    memset(isUsed,false,sizeof(isUsed));\n    int n,k;    // 办公楼数和可以铺设的电网数\n    long long ans=0;\n    cin>>n>>k;\n    for(int i =0;i<n;++i){\n        cin>>s[i];\n    }\n    priority_queue<NODE,vector<NODE>,tmp> Q;    // 设置一个小根堆存放现有结点\n    \n    \n\n    // 初始化第一个结点\n    sNode.Len=s[1]-s[0];\n    sNode.pos=1;    // 从1开始\n    Prio[1]=0;     // 第一个结点前驱为空\n    Next[1]=2;       // 后继为1\n    val[1]=sNode.Len;\n    Q.push(sNode);  // 第一个结点入队\n\n    // 初始化其他结点,最后一个结点的下标是n-1，因为一共有n-1个结点\n    for(int i =1; i<n-1;++i){\n        sNode.Len=s[i+1]-s[i];\n        sNode.pos=i+1;    \n        Prio[i+1]=i;     \n        Next[i+1]=i+2;       \n        val[i+1]=sNode.Len;\n        Q.push(sNode);     \n    }\n\n    // 两端设极大\n    val[0]=2e9;\n    val[n]=2e9;\n\n\n    // 进行贪心选择\n    while(k!=0){\n        // 跳过无效结点\n        while(isUsed[Q.top().pos]){\n            Q.pop();\n        }\n        sNode=Q.top();  // 取出长度最小的那个有效结点\n        Q.pop();\n        ans+=sNode.Len;  // 取了这个点，答案要加上\n        \n        // 求新的结点的长度，实现隐式反悔\n        sNode.Len=val[Prio[sNode.pos]]+val[Next[sNode.pos]]-val[sNode.pos];\n        val[sNode.pos]=sNode.Len;\n        \n      \n        // 两端设置为已使用\n        isUsed[Prio[sNode.pos]]=true;\n        isUsed[Next[sNode.pos]]=true;\n        //更新新结点的前驱后继\n        Prio[sNode.pos]=Prio[Prio[sNode.pos]];\n        Next[sNode.pos]=Next[Next[sNode.pos]];\n\n        // 更新前面的前面的后继和后面的后面的前驱\n        // 注意Prio[sNode.pos]和Next[sNode.pos]已经变了\n        Next[Prio[sNode.pos]]=sNode.pos;\n        Prio[Next[sNode.pos]]=sNode.pos;\n\n        // 新结点入队\n        Q.push(sNode);\n        --k;\n    }\n    cout<<ans<<endl;\n}\n```","source":"_posts/数据备份.md","raw":"---\ntitle: 数据备份\ndate: 2021-06-11 15:52:27\ncategories:\n    -div1\ntags:\n    -贪心\n    -反悔\n    -优先队列\n---\n# 题目\n{% asset_img backUp.png %}\n### 题目简述\n大概就是有n个办公楼，要找出k对，每对之间拉一个电缆，并且每个楼只能用一次，求出最小的距离之和\n\n### 分析\n- 首先要明确，找出的n对楼里面，每对肯定是相邻的，若不相邻，则令其中间的任一一对代替，能得到更优结果\n- 如果每次只选择最小那对，也是不行的，如：\n    - 现在有一个原始的对序列 2 1 2 5 6，要找两队。则放到优先队列中有 1 2 2 5 6，如果先选最小的，则现在选的是1，由于1中两个城市在2 2 这两队中，所以2 2 要丢掉。则优先队列中能用的只剩下 5 6，则下次应该选择5。不难发现，如果不选1的话，选2 2明显会比选1 5好。到这里不难发现，我们要后悔。、\n- 那么怎么进行后悔呢？\n    - 我们在选择最小的1之后，2 2 本来是要废掉的，但是我们不直接丢掉他们，而是创建一个新的数为 2+2-1=3 放入优先队列中。则优先队列中剩下的为 3 5 6，这样我们下次选3就相当于选了 2+2-1+1，即 2 2，后悔成功。\n\n### 算法\n每次取最小的一个区间，然后将这个数两边得区间合并，并减去这个数，构成后悔结点（则原区间最左边和最右边还应该加一段无穷大）。一直做下去，最终即可得到结果。\n区间段用链表维护。需要注意的是链表的更新。\n\n### 代码\n```c++\n#include<iostream>\n#include<cstring>\n#include<queue>\nusing namespace std;\nlong long s[100002];     // 每个公司到起点的距离\n\n// 每个相邻区间作为一个结点\ntypedef struct Node{\n      long long  Len;            // 区间的长度\n      int pos;                   // 当前结点的位置c\n}NODE;\n\n// 仿函数\nstruct tmp{\n    bool operator() (Node a,Node b){\n        return a.Len>b.Len;\n    }\n};\n\nbool isUsed[100002];// 判断某个结点是否已经使用过\nint Next[100002];   // 存放某个结点的下一个结点\nint Prio[100002];   // 存放某个节点的一个结点 \nlong long val[100002]; // 要得到某个位置的值信息，不能从队列里获得，要另存  \n\nNODE sNode;\nint main(){\n    //freopen(\"test/div1C.txt\",\"r\",stdin);\n    // 初始化标记数组\n    memset(isUsed,false,sizeof(isUsed));\n    int n,k;    // 办公楼数和可以铺设的电网数\n    long long ans=0;\n    cin>>n>>k;\n    for(int i =0;i<n;++i){\n        cin>>s[i];\n    }\n    priority_queue<NODE,vector<NODE>,tmp> Q;    // 设置一个小根堆存放现有结点\n    \n    \n\n    // 初始化第一个结点\n    sNode.Len=s[1]-s[0];\n    sNode.pos=1;    // 从1开始\n    Prio[1]=0;     // 第一个结点前驱为空\n    Next[1]=2;       // 后继为1\n    val[1]=sNode.Len;\n    Q.push(sNode);  // 第一个结点入队\n\n    // 初始化其他结点,最后一个结点的下标是n-1，因为一共有n-1个结点\n    for(int i =1; i<n-1;++i){\n        sNode.Len=s[i+1]-s[i];\n        sNode.pos=i+1;    \n        Prio[i+1]=i;     \n        Next[i+1]=i+2;       \n        val[i+1]=sNode.Len;\n        Q.push(sNode);     \n    }\n\n    // 两端设极大\n    val[0]=2e9;\n    val[n]=2e9;\n\n\n    // 进行贪心选择\n    while(k!=0){\n        // 跳过无效结点\n        while(isUsed[Q.top().pos]){\n            Q.pop();\n        }\n        sNode=Q.top();  // 取出长度最小的那个有效结点\n        Q.pop();\n        ans+=sNode.Len;  // 取了这个点，答案要加上\n        \n        // 求新的结点的长度，实现隐式反悔\n        sNode.Len=val[Prio[sNode.pos]]+val[Next[sNode.pos]]-val[sNode.pos];\n        val[sNode.pos]=sNode.Len;\n        \n      \n        // 两端设置为已使用\n        isUsed[Prio[sNode.pos]]=true;\n        isUsed[Next[sNode.pos]]=true;\n        //更新新结点的前驱后继\n        Prio[sNode.pos]=Prio[Prio[sNode.pos]];\n        Next[sNode.pos]=Next[Next[sNode.pos]];\n\n        // 更新前面的前面的后继和后面的后面的前驱\n        // 注意Prio[sNode.pos]和Next[sNode.pos]已经变了\n        Next[Prio[sNode.pos]]=sNode.pos;\n        Prio[Next[sNode.pos]]=sNode.pos;\n\n        // 新结点入队\n        Q.push(sNode);\n        --k;\n    }\n    cout<<ans<<endl;\n}\n```","slug":"数据备份","published":1,"updated":"2021-06-11T08:13:32.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckps1ze7u0000c0tkgsyfbk0y","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/11/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/backUp.png\" class=\"\">\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>大概就是有n个办公楼，要找出k对，每对之间拉一个电缆，并且每个楼只能用一次，求出最小的距离之和</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>首先要明确，找出的n对楼里面，每对肯定是相邻的，若不相邻，则令其中间的任一一对代替，能得到更优结果</li>\n<li>如果每次只选择最小那对，也是不行的，如：<ul>\n<li>现在有一个原始的对序列 2 1 2 5 6，要找两队。则放到优先队列中有 1 2 2 5 6，如果先选最小的，则现在选的是1，由于1中两个城市在2 2 这两队中，所以2 2 要丢掉。则优先队列中能用的只剩下 5 6，则下次应该选择5。不难发现，如果不选1的话，选2 2明显会比选1 5好。到这里不难发现，我们要后悔。、</li>\n</ul>\n</li>\n<li>那么怎么进行后悔呢？<ul>\n<li>我们在选择最小的1之后，2 2 本来是要废掉的，但是我们不直接丢掉他们，而是创建一个新的数为 2+2-1=3 放入优先队列中。则优先队列中剩下的为 3 5 6，这样我们下次选3就相当于选了 2+2-1+1，即 2 2，后悔成功。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>每次取最小的一个区间，然后将这个数两边得区间合并，并减去这个数，构成后悔结点（则原区间最左边和最右边还应该加一段无穷大）。一直做下去，最终即可得到结果。<br>区间段用链表维护。需要注意的是链表的更新。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> s[<span class=\"number\">100002</span>];     <span class=\"comment\">// 每个公司到起点的距离</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个相邻区间作为一个结点</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">      <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>  Len;            <span class=\"comment\">// 区间的长度</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> pos;                   <span class=\"comment\">// 当前结点的位置c</span></span><br><span class=\"line\">&#125;NODE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 仿函数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tmp</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(Node a,Node b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.Len&gt;b.Len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> isUsed[<span class=\"number\">100002</span>];<span class=\"comment\">// 判断某个结点是否已经使用过</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Next[<span class=\"number\">100002</span>];   <span class=\"comment\">// 存放某个结点的下一个结点</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Prio[<span class=\"number\">100002</span>];   <span class=\"comment\">// 存放某个节点的一个结点 </span></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val[<span class=\"number\">100002</span>]; <span class=\"comment\">// 要得到某个位置的值信息，不能从队列里获得，要另存  </span></span><br><span class=\"line\"></span><br><span class=\"line\">NODE sNode;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1C.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化标记数组</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(isUsed,<span class=\"literal\">false</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(isUsed));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k;    <span class=\"comment\">// 办公楼数和可以铺设的电网数</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    priority_queue&lt;NODE,vector&lt;NODE&gt;,tmp&gt; Q;    <span class=\"comment\">// 设置一个小根堆存放现有结点</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化第一个结点</span></span><br><span class=\"line\">    sNode.Len=s[<span class=\"number\">1</span>]-s[<span class=\"number\">0</span>];</span><br><span class=\"line\">    sNode.pos=<span class=\"number\">1</span>;    <span class=\"comment\">// 从1开始</span></span><br><span class=\"line\">    Prio[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;     <span class=\"comment\">// 第一个结点前驱为空</span></span><br><span class=\"line\">    Next[<span class=\"number\">1</span>]=<span class=\"number\">2</span>;       <span class=\"comment\">// 后继为1</span></span><br><span class=\"line\">    val[<span class=\"number\">1</span>]=sNode.Len;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(sNode);  <span class=\"comment\">// 第一个结点入队</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化其他结点,最后一个结点的下标是n-1，因为一共有n-1个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>; i&lt;n<span class=\"number\">-1</span>;++i)&#123;</span><br><span class=\"line\">        sNode.Len=s[i+<span class=\"number\">1</span>]-s[i];</span><br><span class=\"line\">        sNode.pos=i+<span class=\"number\">1</span>;    </span><br><span class=\"line\">        Prio[i+<span class=\"number\">1</span>]=i;     </span><br><span class=\"line\">        Next[i+<span class=\"number\">1</span>]=i+<span class=\"number\">2</span>;       </span><br><span class=\"line\">        val[i+<span class=\"number\">1</span>]=sNode.Len;</span><br><span class=\"line\">        Q.<span class=\"built_in\">push</span>(sNode);     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 两端设极大</span></span><br><span class=\"line\">    val[<span class=\"number\">0</span>]=<span class=\"number\">2e9</span>;</span><br><span class=\"line\">    val[n]=<span class=\"number\">2e9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进行贪心选择</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳过无效结点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(isUsed[Q.<span class=\"built_in\">top</span>().pos])&#123;</span><br><span class=\"line\">            Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sNode=Q.<span class=\"built_in\">top</span>();  <span class=\"comment\">// 取出长度最小的那个有效结点</span></span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        ans+=sNode.Len;  <span class=\"comment\">// 取了这个点，答案要加上</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 求新的结点的长度，实现隐式反悔</span></span><br><span class=\"line\">        sNode.Len=val[Prio[sNode.pos]]+val[Next[sNode.pos]]-val[sNode.pos];</span><br><span class=\"line\">        val[sNode.pos]=sNode.Len;</span><br><span class=\"line\">        </span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">// 两端设置为已使用</span></span><br><span class=\"line\">        isUsed[Prio[sNode.pos]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        isUsed[Next[sNode.pos]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//更新新结点的前驱后继</span></span><br><span class=\"line\">        Prio[sNode.pos]=Prio[Prio[sNode.pos]];</span><br><span class=\"line\">        Next[sNode.pos]=Next[Next[sNode.pos]];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新前面的前面的后继和后面的后面的前驱</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意Prio[sNode.pos]和Next[sNode.pos]已经变了</span></span><br><span class=\"line\">        Next[Prio[sNode.pos]]=sNode.pos;</span><br><span class=\"line\">        Prio[Next[sNode.pos]]=sNode.pos;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 新结点入队</span></span><br><span class=\"line\">        Q.<span class=\"built_in\">push</span>(sNode);</span><br><span class=\"line\">        --k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/11/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/backUp.png\" class=\"\">\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>大概就是有n个办公楼，要找出k对，每对之间拉一个电缆，并且每个楼只能用一次，求出最小的距离之和</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>首先要明确，找出的n对楼里面，每对肯定是相邻的，若不相邻，则令其中间的任一一对代替，能得到更优结果</li>\n<li>如果每次只选择最小那对，也是不行的，如：<ul>\n<li>现在有一个原始的对序列 2 1 2 5 6，要找两队。则放到优先队列中有 1 2 2 5 6，如果先选最小的，则现在选的是1，由于1中两个城市在2 2 这两队中，所以2 2 要丢掉。则优先队列中能用的只剩下 5 6，则下次应该选择5。不难发现，如果不选1的话，选2 2明显会比选1 5好。到这里不难发现，我们要后悔。、</li>\n</ul>\n</li>\n<li>那么怎么进行后悔呢？<ul>\n<li>我们在选择最小的1之后，2 2 本来是要废掉的，但是我们不直接丢掉他们，而是创建一个新的数为 2+2-1=3 放入优先队列中。则优先队列中剩下的为 3 5 6，这样我们下次选3就相当于选了 2+2-1+1，即 2 2，后悔成功。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>每次取最小的一个区间，然后将这个数两边得区间合并，并减去这个数，构成后悔结点（则原区间最左边和最右边还应该加一段无穷大）。一直做下去，最终即可得到结果。<br>区间段用链表维护。需要注意的是链表的更新。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> s[<span class=\"number\">100002</span>];     <span class=\"comment\">// 每个公司到起点的距离</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个相邻区间作为一个结点</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">      <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>  Len;            <span class=\"comment\">// 区间的长度</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> pos;                   <span class=\"comment\">// 当前结点的位置c</span></span><br><span class=\"line\">&#125;NODE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 仿函数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tmp</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(Node a,Node b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.Len&gt;b.Len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> isUsed[<span class=\"number\">100002</span>];<span class=\"comment\">// 判断某个结点是否已经使用过</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Next[<span class=\"number\">100002</span>];   <span class=\"comment\">// 存放某个结点的下一个结点</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Prio[<span class=\"number\">100002</span>];   <span class=\"comment\">// 存放某个节点的一个结点 </span></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val[<span class=\"number\">100002</span>]; <span class=\"comment\">// 要得到某个位置的值信息，不能从队列里获得，要另存  </span></span><br><span class=\"line\"></span><br><span class=\"line\">NODE sNode;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1C.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化标记数组</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(isUsed,<span class=\"literal\">false</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(isUsed));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k;    <span class=\"comment\">// 办公楼数和可以铺设的电网数</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    priority_queue&lt;NODE,vector&lt;NODE&gt;,tmp&gt; Q;    <span class=\"comment\">// 设置一个小根堆存放现有结点</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化第一个结点</span></span><br><span class=\"line\">    sNode.Len=s[<span class=\"number\">1</span>]-s[<span class=\"number\">0</span>];</span><br><span class=\"line\">    sNode.pos=<span class=\"number\">1</span>;    <span class=\"comment\">// 从1开始</span></span><br><span class=\"line\">    Prio[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;     <span class=\"comment\">// 第一个结点前驱为空</span></span><br><span class=\"line\">    Next[<span class=\"number\">1</span>]=<span class=\"number\">2</span>;       <span class=\"comment\">// 后继为1</span></span><br><span class=\"line\">    val[<span class=\"number\">1</span>]=sNode.Len;</span><br><span class=\"line\">    Q.<span class=\"built_in\">push</span>(sNode);  <span class=\"comment\">// 第一个结点入队</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化其他结点,最后一个结点的下标是n-1，因为一共有n-1个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>; i&lt;n<span class=\"number\">-1</span>;++i)&#123;</span><br><span class=\"line\">        sNode.Len=s[i+<span class=\"number\">1</span>]-s[i];</span><br><span class=\"line\">        sNode.pos=i+<span class=\"number\">1</span>;    </span><br><span class=\"line\">        Prio[i+<span class=\"number\">1</span>]=i;     </span><br><span class=\"line\">        Next[i+<span class=\"number\">1</span>]=i+<span class=\"number\">2</span>;       </span><br><span class=\"line\">        val[i+<span class=\"number\">1</span>]=sNode.Len;</span><br><span class=\"line\">        Q.<span class=\"built_in\">push</span>(sNode);     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 两端设极大</span></span><br><span class=\"line\">    val[<span class=\"number\">0</span>]=<span class=\"number\">2e9</span>;</span><br><span class=\"line\">    val[n]=<span class=\"number\">2e9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进行贪心选择</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳过无效结点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(isUsed[Q.<span class=\"built_in\">top</span>().pos])&#123;</span><br><span class=\"line\">            Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sNode=Q.<span class=\"built_in\">top</span>();  <span class=\"comment\">// 取出长度最小的那个有效结点</span></span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        ans+=sNode.Len;  <span class=\"comment\">// 取了这个点，答案要加上</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 求新的结点的长度，实现隐式反悔</span></span><br><span class=\"line\">        sNode.Len=val[Prio[sNode.pos]]+val[Next[sNode.pos]]-val[sNode.pos];</span><br><span class=\"line\">        val[sNode.pos]=sNode.Len;</span><br><span class=\"line\">        </span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">// 两端设置为已使用</span></span><br><span class=\"line\">        isUsed[Prio[sNode.pos]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        isUsed[Next[sNode.pos]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//更新新结点的前驱后继</span></span><br><span class=\"line\">        Prio[sNode.pos]=Prio[Prio[sNode.pos]];</span><br><span class=\"line\">        Next[sNode.pos]=Next[Next[sNode.pos]];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新前面的前面的后继和后面的后面的前驱</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意Prio[sNode.pos]和Next[sNode.pos]已经变了</span></span><br><span class=\"line\">        Next[Prio[sNode.pos]]=sNode.pos;</span><br><span class=\"line\">        Prio[Next[sNode.pos]]=sNode.pos;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 新结点入队</span></span><br><span class=\"line\">        Q.<span class=\"built_in\">push</span>(sNode);</span><br><span class=\"line\">        --k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"BestCowFences","date":"2021-06-12T16:35:27.000Z","_content":"# 题目\n{% asset_img BestCowFence.png %}\n### 题目简介\n题目大概就是围起连续不小于f的数，使他们的平均值最大，求出这个最大值。\n### 分析\n 如果是求连续子序列最大和，那么问题就很简单。但是他这里要求的是最大平均数，由于最大平均数不仅和连续子序列的和有关，还和连续子序列的长度有关。即average=sum/length。则事情就变得不那么简单了。\n\n##### 二分答案\n这里用到二分答案策略，所谓的二分答案，就是假设所求的值刚开始在一个区间段[l,r]，然后选取这个区间段的中间值mid作为答案，如果算出这个中间值取大了，就从左半区间[l,mid],否则从[mid,r]找最后直到区间缩到无穷小，则此时区间的逼近值即为正确答案。这个其实在数值分析里面学过。\n\n##### 变向思维\n我们要求连续区间的最大平均值，很困难，因为这个平均值不仅和连续区间和sum有关，还与区间长度length有关，这就需要我们将问题进行转换。\n\n假设最大平均值为ans，则对于平均值最大的那段区间[i,j]有(a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>)/length=ans。即(a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>)-ans*length=0。\n\n- 如果有大于ans的区间段平均值，则对于最大的区间段[p,q],有(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)/length>ans，即(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)-ans*length>0。那么我们的ans就偏小了。这就是一个二分的判断偏小依据。\n\n- 如果全部的区间段平均值都小于ans，则对于最大的区间段，有(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)/length<ans,即(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)-ans*length<0,则此时ans偏大了。得到一个二分偏大的判断。\n\n那么问题就从求连续子序列最大平均值，转换成了求(a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>)-ans * length的值。我们将整个区间段[0,n-1]的值全部减去ans，那么我们在求连续子序列的和时，就相当于求a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>-ans * lengths的值。则问题最终变成了一个连续子序列求和问题。\n\n##### 长度不小于f的最大连续子序列问题\n我们可以先求出[0,n]的前缀和sum[i] i=0,1,2...n。由于子序列的长度不能小于f，则以i结尾的连续子序列dp[i] (i>=f)，前f个数一定是要的。先让dp[i]=sum[i],则sum[i]-sum[i-k-1]这段肯定要留在dp[i]里面。所以只需要找到sum[0] ~ sum[i-k]中小于0的最小值sum[m]，然后令dp=sum[i]-sum[m]即为以i结尾的连续子序列的最大值（就是把前面连续的最自己没有正作用的子序列干掉）。则我们要维护从sum[0]~sum[i-k]的最小值，并且每次用dp[i]更新整个区间内连续子序列的最大值即可。\n```c++\nfor(int i=f;i<n;++i){\n           Min=min(Min,sum[i-f]);   \n           Max=max(Max,sum[i]-Min);   // sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和\n       }\n```\n\n## 算法\n先假定二分区间为很大，然后二分假设答案mid，令原数组所有的数减去mid得到新数组。求新数组中长度不小于k的连续子序列的最大和，如果结果大于0，说明ans设小了，区间往右边分，否则区间往左边分。直到最后区间逼近一个数为止。\n## 代码\n\n```c++\n#include<iostream>\n#include<cmath>\nusing namespace std;\ndouble a[100002];\ndouble b[100002];\ndouble sum[100002]; // 记录第i个数之前的和\nint n;\nint f;\nint main(){\n    //freopen(\"test/div1A.txt\",\"r\",stdin);\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    double mid;       // 假设的答案 \n    cin>>n>>f;\n    for(int i=0;i<n;++i){\n        //scanf(\"%lf\",&a[i]);  // 用cin会套老鹅\n        cin>>a[i];\n    }\n    double l=-1e6;    // 答案区间的左边\n    double r=1e6;     // 答案区间的右边\n    while(r-l>1e-4){\n       mid = (l+r)/2;\n       // 先求出减去平均值后的数组\n       for(int i=0;i<n;++i){\n           b[i]=a[i]-mid;   \n       }\n       \n       sum[0]=b[0];\n       for(int i = 1;i<n;++i){\n            sum[i]=sum[i-1]+b[i];\n       }\n       double Min=0;     // 记录以j(0<=j<i-f)结尾大子段和的最小值，初始值应该为0，因为比0小的我们才不要\n                         // 如果这里初始化为一个很大的值，那么若sum[0]大于0，就会被认为是要被抛弃的，然而我们只需要抛弃小于0的\n       double Max=-1e9;      // 记录长度大于f的最大子段和\n       // 求限定长度为f的最大连续子段和\n       for(int i=f;i<n;++i){\n           Min=min(Min,sum[i-f]);   \n           Max=max(Max,sum[i]-Min);   // sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和\n       }\n       Max=max(Max,sum[f-1]);   // 观察可知上面没有判断sum[f-1]的情况\n       if(Max>0){  // Max>0说明答案不够大\n         l=mid;\n       }else{      // 否则就是答案不够小\n         r=mid;\n       }\n\n    }\n    cout<<(int)(1000*r)<<endl;\n}\n```\n\n\n\n","source":"_posts/BestCowFences.md","raw":"---\ntitle: BestCowFences\ndate: 2021-06-13 00:35:27\ncategories:\n    - div1\ntags:\n    - 限定长度最大子段和\n    - 思维\n    - 二分答案\n---\n# 题目\n{% asset_img BestCowFence.png %}\n### 题目简介\n题目大概就是围起连续不小于f的数，使他们的平均值最大，求出这个最大值。\n### 分析\n 如果是求连续子序列最大和，那么问题就很简单。但是他这里要求的是最大平均数，由于最大平均数不仅和连续子序列的和有关，还和连续子序列的长度有关。即average=sum/length。则事情就变得不那么简单了。\n\n##### 二分答案\n这里用到二分答案策略，所谓的二分答案，就是假设所求的值刚开始在一个区间段[l,r]，然后选取这个区间段的中间值mid作为答案，如果算出这个中间值取大了，就从左半区间[l,mid],否则从[mid,r]找最后直到区间缩到无穷小，则此时区间的逼近值即为正确答案。这个其实在数值分析里面学过。\n\n##### 变向思维\n我们要求连续区间的最大平均值，很困难，因为这个平均值不仅和连续区间和sum有关，还与区间长度length有关，这就需要我们将问题进行转换。\n\n假设最大平均值为ans，则对于平均值最大的那段区间[i,j]有(a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>)/length=ans。即(a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>)-ans*length=0。\n\n- 如果有大于ans的区间段平均值，则对于最大的区间段[p,q],有(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)/length>ans，即(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)-ans*length>0。那么我们的ans就偏小了。这就是一个二分的判断偏小依据。\n\n- 如果全部的区间段平均值都小于ans，则对于最大的区间段，有(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)/length<ans,即(a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub>)-ans*length<0,则此时ans偏大了。得到一个二分偏大的判断。\n\n那么问题就从求连续子序列最大平均值，转换成了求(a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>)-ans * length的值。我们将整个区间段[0,n-1]的值全部减去ans，那么我们在求连续子序列的和时，就相当于求a<sub>i</sub>+a<sub>i+1</sub>+...+a<sub>j</sub>-ans * lengths的值。则问题最终变成了一个连续子序列求和问题。\n\n##### 长度不小于f的最大连续子序列问题\n我们可以先求出[0,n]的前缀和sum[i] i=0,1,2...n。由于子序列的长度不能小于f，则以i结尾的连续子序列dp[i] (i>=f)，前f个数一定是要的。先让dp[i]=sum[i],则sum[i]-sum[i-k-1]这段肯定要留在dp[i]里面。所以只需要找到sum[0] ~ sum[i-k]中小于0的最小值sum[m]，然后令dp=sum[i]-sum[m]即为以i结尾的连续子序列的最大值（就是把前面连续的最自己没有正作用的子序列干掉）。则我们要维护从sum[0]~sum[i-k]的最小值，并且每次用dp[i]更新整个区间内连续子序列的最大值即可。\n```c++\nfor(int i=f;i<n;++i){\n           Min=min(Min,sum[i-f]);   \n           Max=max(Max,sum[i]-Min);   // sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和\n       }\n```\n\n## 算法\n先假定二分区间为很大，然后二分假设答案mid，令原数组所有的数减去mid得到新数组。求新数组中长度不小于k的连续子序列的最大和，如果结果大于0，说明ans设小了，区间往右边分，否则区间往左边分。直到最后区间逼近一个数为止。\n## 代码\n\n```c++\n#include<iostream>\n#include<cmath>\nusing namespace std;\ndouble a[100002];\ndouble b[100002];\ndouble sum[100002]; // 记录第i个数之前的和\nint n;\nint f;\nint main(){\n    //freopen(\"test/div1A.txt\",\"r\",stdin);\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    double mid;       // 假设的答案 \n    cin>>n>>f;\n    for(int i=0;i<n;++i){\n        //scanf(\"%lf\",&a[i]);  // 用cin会套老鹅\n        cin>>a[i];\n    }\n    double l=-1e6;    // 答案区间的左边\n    double r=1e6;     // 答案区间的右边\n    while(r-l>1e-4){\n       mid = (l+r)/2;\n       // 先求出减去平均值后的数组\n       for(int i=0;i<n;++i){\n           b[i]=a[i]-mid;   \n       }\n       \n       sum[0]=b[0];\n       for(int i = 1;i<n;++i){\n            sum[i]=sum[i-1]+b[i];\n       }\n       double Min=0;     // 记录以j(0<=j<i-f)结尾大子段和的最小值，初始值应该为0，因为比0小的我们才不要\n                         // 如果这里初始化为一个很大的值，那么若sum[0]大于0，就会被认为是要被抛弃的，然而我们只需要抛弃小于0的\n       double Max=-1e9;      // 记录长度大于f的最大子段和\n       // 求限定长度为f的最大连续子段和\n       for(int i=f;i<n;++i){\n           Min=min(Min,sum[i-f]);   \n           Max=max(Max,sum[i]-Min);   // sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和\n       }\n       Max=max(Max,sum[f-1]);   // 观察可知上面没有判断sum[f-1]的情况\n       if(Max>0){  // Max>0说明答案不够大\n         l=mid;\n       }else{      // 否则就是答案不够小\n         r=mid;\n       }\n\n    }\n    cout<<(int)(1000*r)<<endl;\n}\n```\n\n\n\n","slug":"BestCowFences","published":1,"updated":"2021-06-13T04:06:14.728Z","_id":"ckpun1mbr0000xktk8n1z1mld","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/13/BestCowFences/BestCowFence.png\" class=\"\">\n<h3 id=\"题目简介\"><a href=\"#题目简介\" class=\"headerlink\" title=\"题目简介\"></a>题目简介</h3><p>题目大概就是围起连续不小于f的数，使他们的平均值最大，求出这个最大值。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p> 如果是求连续子序列最大和，那么问题就很简单。但是他这里要求的是最大平均数，由于最大平均数不仅和连续子序列的和有关，还和连续子序列的长度有关。即average=sum/length。则事情就变得不那么简单了。</p>\n<h5 id=\"二分答案\"><a href=\"#二分答案\" class=\"headerlink\" title=\"二分答案\"></a>二分答案</h5><p>这里用到二分答案策略，所谓的二分答案，就是假设所求的值刚开始在一个区间段[l,r]，然后选取这个区间段的中间值mid作为答案，如果算出这个中间值取大了，就从左半区间[l,mid],否则从[mid,r]找最后直到区间缩到无穷小，则此时区间的逼近值即为正确答案。这个其实在数值分析里面学过。</p>\n<h5 id=\"变向思维\"><a href=\"#变向思维\" class=\"headerlink\" title=\"变向思维\"></a>变向思维</h5><p>我们要求连续区间的最大平均值，很困难，因为这个平均值不仅和连续区间和sum有关，还与区间长度length有关，这就需要我们将问题进行转换。</p>\n<p>假设最大平均值为ans，则对于平均值最大的那段区间[i,j]有(a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>)/length=ans。即(a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>)-ans*length=0。</p>\n<ul>\n<li><p>如果有大于ans的区间段平均值，则对于最大的区间段[p,q],有(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)/length&gt;ans，即(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)-ans*length&gt;0。那么我们的ans就偏小了。这就是一个二分的判断偏小依据。</p>\n</li>\n<li><p>如果全部的区间段平均值都小于ans，则对于最大的区间段，有(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)/length&lt;ans,即(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)-ans*length&lt;0,则此时ans偏大了。得到一个二分偏大的判断。</p>\n</li>\n</ul>\n<p>那么问题就从求连续子序列最大平均值，转换成了求(a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>)-ans * length的值。我们将整个区间段[0,n-1]的值全部减去ans，那么我们在求连续子序列的和时，就相当于求a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>-ans * lengths的值。则问题最终变成了一个连续子序列求和问题。</p>\n<h5 id=\"长度不小于f的最大连续子序列问题\"><a href=\"#长度不小于f的最大连续子序列问题\" class=\"headerlink\" title=\"长度不小于f的最大连续子序列问题\"></a>长度不小于f的最大连续子序列问题</h5><p>我们可以先求出[0,n]的前缀和sum[i] i=0,1,2…n。由于子序列的长度不能小于f，则以i结尾的连续子序列dp[i] (i&gt;=f)，前f个数一定是要的。先让dp[i]=sum[i],则sum[i]-sum[i-k-1]这段肯定要留在dp[i]里面。所以只需要找到sum[0] ~ sum[i-k]中小于0的最小值sum[m]，然后令dp=sum[i]-sum[m]即为以i结尾的连续子序列的最大值（就是把前面连续的最自己没有正作用的子序列干掉）。则我们要维护从sum[0]~sum[i-k]的最小值，并且每次用dp[i]更新整个区间内连续子序列的最大值即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=f;i&lt;n;++i)&#123;</span><br><span class=\"line\">           Min=<span class=\"built_in\">min</span>(Min,sum[i-f]);   </span><br><span class=\"line\">           Max=<span class=\"built_in\">max</span>(Max,sum[i]-Min);   <span class=\"comment\">// sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和</span></span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>先假定二分区间为很大，然后二分假设答案mid，令原数组所有的数减去mid得到新数组。求新数组中长度不小于k的连续子序列的最大和，如果结果大于0，说明ans设小了，区间往右边分，否则区间往左边分。直到最后区间逼近一个数为止。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">double</span> a[<span class=\"number\">100002</span>];</span><br><span class=\"line\"><span class=\"keyword\">double</span> b[<span class=\"number\">100002</span>];</span><br><span class=\"line\"><span class=\"keyword\">double</span> sum[<span class=\"number\">100002</span>]; <span class=\"comment\">// 记录第i个数之前的和</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1A.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> mid;       <span class=\"comment\">// 假设的答案 </span></span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;f;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//scanf(&quot;%lf&quot;,&amp;a[i]);  // 用cin会套老鹅</span></span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> l=<span class=\"number\">-1e6</span>;    <span class=\"comment\">// 答案区间的左边</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r=<span class=\"number\">1e6</span>;     <span class=\"comment\">// 答案区间的右边</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r-l&gt;<span class=\"number\">1e-4</span>)&#123;</span><br><span class=\"line\">       mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">       <span class=\"comment\">// 先求出减去平均值后的数组</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">           b[i]=a[i]-mid;   </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       sum[<span class=\"number\">0</span>]=b[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">            sum[i]=sum[i<span class=\"number\">-1</span>]+b[i];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">double</span> Min=<span class=\"number\">0</span>;     <span class=\"comment\">// 记录以j(0&lt;=j&lt;i-f)结尾大子段和的最小值，初始值应该为0，因为比0小的我们才不要</span></span><br><span class=\"line\">                         <span class=\"comment\">// 如果这里初始化为一个很大的值，那么若sum[0]大于0，就会被认为是要被抛弃的，然而我们只需要抛弃小于0的</span></span><br><span class=\"line\">       <span class=\"keyword\">double</span> Max=<span class=\"number\">-1e9</span>;      <span class=\"comment\">// 记录长度大于f的最大子段和</span></span><br><span class=\"line\">       <span class=\"comment\">// 求限定长度为f的最大连续子段和</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=f;i&lt;n;++i)&#123;</span><br><span class=\"line\">           Min=<span class=\"built_in\">min</span>(Min,sum[i-f]);   </span><br><span class=\"line\">           Max=<span class=\"built_in\">max</span>(Max,sum[i]-Min);   <span class=\"comment\">// sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       Max=<span class=\"built_in\">max</span>(Max,sum[f<span class=\"number\">-1</span>]);   <span class=\"comment\">// 观察可知上面没有判断sum[f-1]的情况</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Max&gt;<span class=\"number\">0</span>)&#123;  <span class=\"comment\">// Max&gt;0说明答案不够大</span></span><br><span class=\"line\">         l=mid;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;      <span class=\"comment\">// 否则就是答案不够小</span></span><br><span class=\"line\">         r=mid;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;(<span class=\"keyword\">int</span>)(<span class=\"number\">1000</span>*r)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/13/BestCowFences/BestCowFence.png\" class=\"\">\n<h3 id=\"题目简介\"><a href=\"#题目简介\" class=\"headerlink\" title=\"题目简介\"></a>题目简介</h3><p>题目大概就是围起连续不小于f的数，使他们的平均值最大，求出这个最大值。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p> 如果是求连续子序列最大和，那么问题就很简单。但是他这里要求的是最大平均数，由于最大平均数不仅和连续子序列的和有关，还和连续子序列的长度有关。即average=sum/length。则事情就变得不那么简单了。</p>\n<h5 id=\"二分答案\"><a href=\"#二分答案\" class=\"headerlink\" title=\"二分答案\"></a>二分答案</h5><p>这里用到二分答案策略，所谓的二分答案，就是假设所求的值刚开始在一个区间段[l,r]，然后选取这个区间段的中间值mid作为答案，如果算出这个中间值取大了，就从左半区间[l,mid],否则从[mid,r]找最后直到区间缩到无穷小，则此时区间的逼近值即为正确答案。这个其实在数值分析里面学过。</p>\n<h5 id=\"变向思维\"><a href=\"#变向思维\" class=\"headerlink\" title=\"变向思维\"></a>变向思维</h5><p>我们要求连续区间的最大平均值，很困难，因为这个平均值不仅和连续区间和sum有关，还与区间长度length有关，这就需要我们将问题进行转换。</p>\n<p>假设最大平均值为ans，则对于平均值最大的那段区间[i,j]有(a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>)/length=ans。即(a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>)-ans*length=0。</p>\n<ul>\n<li><p>如果有大于ans的区间段平均值，则对于最大的区间段[p,q],有(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)/length&gt;ans，即(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)-ans*length&gt;0。那么我们的ans就偏小了。这就是一个二分的判断偏小依据。</p>\n</li>\n<li><p>如果全部的区间段平均值都小于ans，则对于最大的区间段，有(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)/length&lt;ans,即(a<sub>p</sub>+a<sub>p+1</sub>+…+a<sub>q</sub>)-ans*length&lt;0,则此时ans偏大了。得到一个二分偏大的判断。</p>\n</li>\n</ul>\n<p>那么问题就从求连续子序列最大平均值，转换成了求(a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>)-ans * length的值。我们将整个区间段[0,n-1]的值全部减去ans，那么我们在求连续子序列的和时，就相当于求a<sub>i</sub>+a<sub>i+1</sub>+…+a<sub>j</sub>-ans * lengths的值。则问题最终变成了一个连续子序列求和问题。</p>\n<h5 id=\"长度不小于f的最大连续子序列问题\"><a href=\"#长度不小于f的最大连续子序列问题\" class=\"headerlink\" title=\"长度不小于f的最大连续子序列问题\"></a>长度不小于f的最大连续子序列问题</h5><p>我们可以先求出[0,n]的前缀和sum[i] i=0,1,2…n。由于子序列的长度不能小于f，则以i结尾的连续子序列dp[i] (i&gt;=f)，前f个数一定是要的。先让dp[i]=sum[i],则sum[i]-sum[i-k-1]这段肯定要留在dp[i]里面。所以只需要找到sum[0] ~ sum[i-k]中小于0的最小值sum[m]，然后令dp=sum[i]-sum[m]即为以i结尾的连续子序列的最大值（就是把前面连续的最自己没有正作用的子序列干掉）。则我们要维护从sum[0]~sum[i-k]的最小值，并且每次用dp[i]更新整个区间内连续子序列的最大值即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=f;i&lt;n;++i)&#123;</span><br><span class=\"line\">           Min=<span class=\"built_in\">min</span>(Min,sum[i-f]);   </span><br><span class=\"line\">           Max=<span class=\"built_in\">max</span>(Max,sum[i]-Min);   <span class=\"comment\">// sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和</span></span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>先假定二分区间为很大，然后二分假设答案mid，令原数组所有的数减去mid得到新数组。求新数组中长度不小于k的连续子序列的最大和，如果结果大于0，说明ans设小了，区间往右边分，否则区间往左边分。直到最后区间逼近一个数为止。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">double</span> a[<span class=\"number\">100002</span>];</span><br><span class=\"line\"><span class=\"keyword\">double</span> b[<span class=\"number\">100002</span>];</span><br><span class=\"line\"><span class=\"keyword\">double</span> sum[<span class=\"number\">100002</span>]; <span class=\"comment\">// 记录第i个数之前的和</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1A.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> mid;       <span class=\"comment\">// 假设的答案 </span></span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;f;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//scanf(&quot;%lf&quot;,&amp;a[i]);  // 用cin会套老鹅</span></span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> l=<span class=\"number\">-1e6</span>;    <span class=\"comment\">// 答案区间的左边</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r=<span class=\"number\">1e6</span>;     <span class=\"comment\">// 答案区间的右边</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r-l&gt;<span class=\"number\">1e-4</span>)&#123;</span><br><span class=\"line\">       mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">       <span class=\"comment\">// 先求出减去平均值后的数组</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">           b[i]=a[i]-mid;   </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       sum[<span class=\"number\">0</span>]=b[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">            sum[i]=sum[i<span class=\"number\">-1</span>]+b[i];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">double</span> Min=<span class=\"number\">0</span>;     <span class=\"comment\">// 记录以j(0&lt;=j&lt;i-f)结尾大子段和的最小值，初始值应该为0，因为比0小的我们才不要</span></span><br><span class=\"line\">                         <span class=\"comment\">// 如果这里初始化为一个很大的值，那么若sum[0]大于0，就会被认为是要被抛弃的，然而我们只需要抛弃小于0的</span></span><br><span class=\"line\">       <span class=\"keyword\">double</span> Max=<span class=\"number\">-1e9</span>;      <span class=\"comment\">// 记录长度大于f的最大子段和</span></span><br><span class=\"line\">       <span class=\"comment\">// 求限定长度为f的最大连续子段和</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=f;i&lt;n;++i)&#123;</span><br><span class=\"line\">           Min=<span class=\"built_in\">min</span>(Min,sum[i-f]);   </span><br><span class=\"line\">           Max=<span class=\"built_in\">max</span>(Max,sum[i]-Min);   <span class=\"comment\">// sum[i]-Min是以i结尾的最大连续子段和，Max是之前求出的最大连续子段和</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       Max=<span class=\"built_in\">max</span>(Max,sum[f<span class=\"number\">-1</span>]);   <span class=\"comment\">// 观察可知上面没有判断sum[f-1]的情况</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Max&gt;<span class=\"number\">0</span>)&#123;  <span class=\"comment\">// Max&gt;0说明答案不够大</span></span><br><span class=\"line\">         l=mid;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;      <span class=\"comment\">// 否则就是答案不够小</span></span><br><span class=\"line\">         r=mid;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;(<span class=\"keyword\">int</span>)(<span class=\"number\">1000</span>*r)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"MaxMedian","date":"2021-06-13T03:57:10.000Z","_content":"# 题目\n{% asset_img MaxMedian.png %}\n\n### 题目简述\n这题是长度不小于k连续子序列排队后的最大中位数。其中排序后+中位数定义下标为$\\lfloor(r-l+1)/2\\rfloor$.\n\n###分析\n这是一道求长度不小于k的连续子序列问题，但它又不是简单求连续子序列的问题。而是求中位数，而且是子序列排序后的中位数，并且要中位数最大。这种场景很难不让人想到二分答案+问题转化。\n通过观察不难发现\n- 如果连续子序列长度是偶数，如[1,2,3,4,5,6],那么大于等于中位数的数会比小于中位数的数多两个。\n- 如果连续子序列的长度是奇数，如[1,2,3,4,5]那么大于等于中位数的数会比小于中位数的数一两个。\n除上面所述两中情况之外不会有其他情况。\n\n## 算法\n根据分析可以巧妙设计算法，假设答案ans，如果序列中的值大于等于ans，令其等于1，否等于-1。如果变换后的序列中长度不小于k的最大连续子序列的值小于0，就说明中位数ans设大了，则答案往小取，否则答案往大取，直到二分区间无穷小。\n\n```c++\n#include<iostream>\nusing namespace std;\nint a[200002];\nint sum[200002];\nint main(){\n    int n,k;\n    //freopen(\"test/div1C.txt\",\"r\",stdin);\n    // 关同步流\n     ios::sync_with_stdio(false);\n     cin.tie(0);\n    cin>>n>>k;\n    for(int i = 0;i<n;++i){\n        cin>>a[i];\n    }\n    double l=-1e9;   // 答案左区间\n    double r=1e9;    // 答案右区间\n    while(r-l>1e-5){\n        //cout<<l<<\" \"<<r<<endl;\n        double mid=(l+r)/2;\n        //求变形之后地前缀和\n        if(a[0]>=mid){\n            sum[0]=1;\n        }else{\n            sum[0]=-1;\n        }\n        for(int j = 1;j<n;++j){\n           if(a[j]>=mid){\n               sum[j]=sum[j-1]+1;\n           }else{\n               sum[j]=sum[j-1]-1;\n           }\n        }\n\n       // 求最大子段和\n       int Min=0;\n       int Max=-1e9;\n       for(int i = k;i<n;++i){\n           Min=min(Min,sum[i-k]);\n           Max=max(Max,sum[i]-Min);\n       }\n\n       Max=max(Max,sum[k-1]);\n       if(Max>0){\n           l=mid;\n       }else{\n           r=mid;\n       }\n       \n    }\n    cout<<(int)r<<endl;\n}\n```\n\n\n\n\n","source":"_posts/MaxMedian.md","raw":"---\ntitle: MaxMedian\ndate: 2021-06-13 11:57:10\ncategories:\n    - div1\ntags:\n    - 限定长度最大子段和\n    - 思维\n    - 二分答案\n---\n# 题目\n{% asset_img MaxMedian.png %}\n\n### 题目简述\n这题是长度不小于k连续子序列排队后的最大中位数。其中排序后+中位数定义下标为$\\lfloor(r-l+1)/2\\rfloor$.\n\n###分析\n这是一道求长度不小于k的连续子序列问题，但它又不是简单求连续子序列的问题。而是求中位数，而且是子序列排序后的中位数，并且要中位数最大。这种场景很难不让人想到二分答案+问题转化。\n通过观察不难发现\n- 如果连续子序列长度是偶数，如[1,2,3,4,5,6],那么大于等于中位数的数会比小于中位数的数多两个。\n- 如果连续子序列的长度是奇数，如[1,2,3,4,5]那么大于等于中位数的数会比小于中位数的数一两个。\n除上面所述两中情况之外不会有其他情况。\n\n## 算法\n根据分析可以巧妙设计算法，假设答案ans，如果序列中的值大于等于ans，令其等于1，否等于-1。如果变换后的序列中长度不小于k的最大连续子序列的值小于0，就说明中位数ans设大了，则答案往小取，否则答案往大取，直到二分区间无穷小。\n\n```c++\n#include<iostream>\nusing namespace std;\nint a[200002];\nint sum[200002];\nint main(){\n    int n,k;\n    //freopen(\"test/div1C.txt\",\"r\",stdin);\n    // 关同步流\n     ios::sync_with_stdio(false);\n     cin.tie(0);\n    cin>>n>>k;\n    for(int i = 0;i<n;++i){\n        cin>>a[i];\n    }\n    double l=-1e9;   // 答案左区间\n    double r=1e9;    // 答案右区间\n    while(r-l>1e-5){\n        //cout<<l<<\" \"<<r<<endl;\n        double mid=(l+r)/2;\n        //求变形之后地前缀和\n        if(a[0]>=mid){\n            sum[0]=1;\n        }else{\n            sum[0]=-1;\n        }\n        for(int j = 1;j<n;++j){\n           if(a[j]>=mid){\n               sum[j]=sum[j-1]+1;\n           }else{\n               sum[j]=sum[j-1]-1;\n           }\n        }\n\n       // 求最大子段和\n       int Min=0;\n       int Max=-1e9;\n       for(int i = k;i<n;++i){\n           Min=min(Min,sum[i-k]);\n           Max=max(Max,sum[i]-Min);\n       }\n\n       Max=max(Max,sum[k-1]);\n       if(Max>0){\n           l=mid;\n       }else{\n           r=mid;\n       }\n       \n    }\n    cout<<(int)r<<endl;\n}\n```\n\n\n\n\n","slug":"MaxMedian","published":1,"updated":"2021-06-13T04:40:40.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpupip0m0000uctk8c7s0zz9","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/13/MaxMedian/MaxMedian.png\" class=\"\">\n\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>这题是长度不小于k连续子序列排队后的最大中位数。其中排序后+中位数定义下标为$\\lfloor(r-l+1)/2\\rfloor$.</p>\n<p>###分析<br>这是一道求长度不小于k的连续子序列问题，但它又不是简单求连续子序列的问题。而是求中位数，而且是子序列排序后的中位数，并且要中位数最大。这种场景很难不让人想到二分答案+问题转化。<br>通过观察不难发现</p>\n<ul>\n<li>如果连续子序列长度是偶数，如[1,2,3,4,5,6],那么大于等于中位数的数会比小于中位数的数多两个。</li>\n<li>如果连续子序列的长度是奇数，如[1,2,3,4,5]那么大于等于中位数的数会比小于中位数的数一两个。<br>除上面所述两中情况之外不会有其他情况。</li>\n</ul>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>根据分析可以巧妙设计算法，假设答案ans，如果序列中的值大于等于ans，令其等于1，否等于-1。如果变换后的序列中长度不小于k的最大连续子序列的值小于0，就说明中位数ans设大了，则答案往小取，否则答案往大取，直到二分区间无穷小。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">200002</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum[<span class=\"number\">200002</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1C.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// 关同步流</span></span><br><span class=\"line\">     ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">     cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> l=<span class=\"number\">-1e9</span>;   <span class=\"comment\">// 答案左区间</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r=<span class=\"number\">1e9</span>;    <span class=\"comment\">// 答案右区间</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r-l&gt;<span class=\"number\">1e-5</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//求变形之后地前缀和</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[<span class=\"number\">0</span>]&gt;=mid)&#123;</span><br><span class=\"line\">            sum[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            sum[<span class=\"number\">0</span>]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;n;++j)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(a[j]&gt;=mid)&#123;</span><br><span class=\"line\">               sum[j]=sum[j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               sum[j]=sum[j<span class=\"number\">-1</span>]<span class=\"number\">-1</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 求最大子段和</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> Min=<span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> Max=<span class=\"number\">-1e9</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = k;i&lt;n;++i)&#123;</span><br><span class=\"line\">           Min=<span class=\"built_in\">min</span>(Min,sum[i-k]);</span><br><span class=\"line\">           Max=<span class=\"built_in\">max</span>(Max,sum[i]-Min);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       Max=<span class=\"built_in\">max</span>(Max,sum[k<span class=\"number\">-1</span>]);</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Max&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           l=mid;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           r=mid;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;(<span class=\"keyword\">int</span>)r&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"/2021/06/13/MaxMedian/MaxMedian.png\" class=\"\">\n\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>这题是长度不小于k连续子序列排队后的最大中位数。其中排序后+中位数定义下标为$\\lfloor(r-l+1)/2\\rfloor$.</p>\n<p>###分析<br>这是一道求长度不小于k的连续子序列问题，但它又不是简单求连续子序列的问题。而是求中位数，而且是子序列排序后的中位数，并且要中位数最大。这种场景很难不让人想到二分答案+问题转化。<br>通过观察不难发现</p>\n<ul>\n<li>如果连续子序列长度是偶数，如[1,2,3,4,5,6],那么大于等于中位数的数会比小于中位数的数多两个。</li>\n<li>如果连续子序列的长度是奇数，如[1,2,3,4,5]那么大于等于中位数的数会比小于中位数的数一两个。<br>除上面所述两中情况之外不会有其他情况。</li>\n</ul>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>根据分析可以巧妙设计算法，假设答案ans，如果序列中的值大于等于ans，令其等于1，否等于-1。如果变换后的序列中长度不小于k的最大连续子序列的值小于0，就说明中位数ans设大了，则答案往小取，否则答案往大取，直到二分区间无穷小。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">200002</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum[<span class=\"number\">200002</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/div1C.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// 关同步流</span></span><br><span class=\"line\">     ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">     cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> l=<span class=\"number\">-1e9</span>;   <span class=\"comment\">// 答案左区间</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r=<span class=\"number\">1e9</span>;    <span class=\"comment\">// 答案右区间</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r-l&gt;<span class=\"number\">1e-5</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//求变形之后地前缀和</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[<span class=\"number\">0</span>]&gt;=mid)&#123;</span><br><span class=\"line\">            sum[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            sum[<span class=\"number\">0</span>]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;n;++j)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(a[j]&gt;=mid)&#123;</span><br><span class=\"line\">               sum[j]=sum[j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               sum[j]=sum[j<span class=\"number\">-1</span>]<span class=\"number\">-1</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 求最大子段和</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> Min=<span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> Max=<span class=\"number\">-1e9</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = k;i&lt;n;++i)&#123;</span><br><span class=\"line\">           Min=<span class=\"built_in\">min</span>(Min,sum[i-k]);</span><br><span class=\"line\">           Max=<span class=\"built_in\">max</span>(Max,sum[i]-Min);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       Max=<span class=\"built_in\">max</span>(Max,sum[k<span class=\"number\">-1</span>]);</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Max&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           l=mid;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           r=mid;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;(<span class=\"keyword\">int</span>)r&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"USST题解报告","date":"2021-06-25T08:44:06.000Z","catagories":["题解报告"],"_content":"# 上海理工校赛题解报告\n\n## 小结\n数学题，不会\n\n## B题 [Bheith i ngra le](https://ac.nowcoder.com/acm/contest/17574/B)\n当初挣扎了一下，然后不会求给定i行j列的格子有多少单调曲线，就放弃了。\n\n## 分析\n* 题目的核心是是求给定i行j列的格子能够构造多少调单调曲线。可以用dp或者组合求解，不喜欢数学的我毅然投奔了dp。  \n* 不难发现，当给定了宽为i，高为j的格子矩阵的时候，我们分析右上角那块，如果这块不画，那么所有情况就会变成dp[i][j-1],如果这块画上，那么情况就会是dp[i-1][j]。则得到状态转移方程dp[i][j]=dp[i][j-1]+dp[i-1][j]。当然，边界条件还是值得考虑一下的。\n* 算出dp数组后，性高彩烈的用n<sup>3</sup>去套老鹅。其实我们确定了山顶左边位置l之后不用去确定右边的r，dp[n-l][h]就是右边包含山顶在内的全部可能。所以ans=ans+dp[l-1][h-1]*dp[n-l][h]即可。\n```c++\n#include<iostream>\nusing namespace std;\nlong long dp[2003][2003];\nlong long mod=1e9+7;\nlong long ans;\nint main(){\n\tint n,m;\n\tcin >>n>>m;\n    // 初始化高度为1时\n\tdp[1][1]=2;\n\tfor(int i = 2;i<=n;++i){\n\t\tdp[i][1]=dp[i-1][1]+1;\n\t}\n\t// 初始化宽度为1的时候\n\tfor(int j = 2;j<=m;++j){\n\t\tdp[1][j]=dp[1][j-1]+1;\n\t} \n    // 求dp，i为宽，j为高\n\tfor(int i = 2;i<=n;++i){\n\t\tfor(int j = 2;j<=m;++j){\n           dp[i][j]=(dp[i][j-1]+dp[i-1][j])%mod;\n\t\t}\n\t}\n\t\n\t// 宽度为0时答案应该为1，因为下面用的乘法\n\tfor(int j=0;j<=m;++j){\n\t\tdp[0][j]=1;\n\t} \n\n   // 高度为0时，也应该是1，即取0\n   for(int i = 0;i<=n;++i){\n\t   dp[i][0]=1;\n   }\n\t\n\t// cout<<dp[1][1]<<endl<<dp[2][1]<<endl<<dp[1][2]<<endl<<dp[2][2]<<endl<<dp[1][3]<<endl<<dp[2][3]<<endl; \n\n\t// 枚举山顶的情况,l是左边，r是右边，h是山高\n\tfor(int l = 1;l<=n;++l){\n\t\t\tfor(int h = 1;h<=m;++h){\n               ans = (ans+(dp[l-1][h-1]*dp[n-l][h])%mod)%mod;   // 是左边的情况乘以右边的情况\n\t\t\t}\n\t}\n\t\n\t// 加上山顶全为0的情况，只有一种\n\t ans=(ans+1)%mod;\n\n\tcout<<ans<<endl;\n}\n```\n\n## J题 [JXC&JESUS](https://ac.nowcoder.com/acm/contest/17574/J)\n这是一个数学题\n## 分析\n题目大概的意思是定义了一个函数  \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; <b>f(i,m)=p<sub>1</sub><sup> $\\lfloor  \\frac{a1}{m}  \\rfloor$</sup> * p<sub>2</sub><sup>a<sub>2<sub></sup> * ... * p<sub>k</sub><sup> a<sub>k</sub></sup></b>   \n其中p<sub>1</sub>,p<sub>2</sub> ...p<sub>k</sub>为i的质因数。给定参数n,m,L求  \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$\\sum\\limits_{i=L+1}^{L+n}$&nbsp;i&nbsp;-&nbsp;f(i,m)  \n这关系到i的质因数的问题，可以用线性筛求质因数。又f(i,m)只和m与其最小质因子有关，我们在线性筛的时候合数也是被其最小质因子筛掉。所以想到从线性筛的基础上进行状态转移，由小的质数推出合数的f(i,m)，从而使求答案也变成线性。另一种是求出了素数之后直接暴力，也能过。  \n根据以下算法枚举&nbsp;i&nbsp;进行计算\n* 当i是质数的时候，当m=1时，f[i]=i,否则f[i]=1。（注意：1不是质因数）  \n* 枚举质数prime[j]利用i对i*prime[j]进行推算。\n   * 当prime[j]不能整除i时，则prime[j]是i*prime[j]的最小质因子，且只有一个，cnt[i * prime[j]]&nbsp;=&nbsp;1。当m&nbsp;=&nbsp;1时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。(因为此时$\\lfloor  \\frac{a1}{m}  \\rfloor$为0)\n   * 当prime[j]能整除i时，则prime[j]也是i的最小质因子，此时cnt[i * prime[j]]&nbsp;=&nbsp;cnt[i]&nbsp;+&nbsp;1。当cnt[i * prime[j]]%m&nbsp;=0&nbsp;时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。（此时应该枚举新的i，就如线性筛那样。）  \n\n```c++\n#include <iostream>\n#include<cstring>\nusing namespace std;\n#define MAX 20000003\nint prime[MAX];   // 存素数\nbool isprime[MAX]; // 判断是否素数\nint n,m,L;\nint ans=0;   // 存放答案\nint cnt[MAX]; // 存放最小质因数的个数\nint CNT=1;\nint f[MAX];  // f存起来，因为可能提前求得\nint minp[MAX]; // 记录合数的最小质因子\n\n// 求素数\nvoid calPrime(){\n    prime[0]=1;\n    isprime[0]=isprime[1]=isprime[2]=true;\n    for(int i = 2;i<=MAX;++i){\n        if(isprime[i]){\n            prime[CNT++]=i;\n        }\n        // 将i的倍数标记为合数，合数只会被其最小质因子标记，所以很方便可求出最小质因子\n        for(int j = 1;j<CNT&&i*prime[j]<=MAX;++j){\n            isprime[i*prime[j]]=false;\n            // 如果i能够整除prime[j]，则退出\n            if(i%prime[j]==0){\n                break;\n            }\n        }\n    }\n}\n// 直接求f\nvoid  F(){\n    for(int i =2;i<=L+n;++i){\n       \n        // i是质数的情况,其最小质因数为其本身,则根据m讨论f\n        if(isprime[i]){\n            if(m==1){\n                f[i]=i;\n                cnt[i]=1;\n            }else{\n                f[i]=1;\n                cnt[i]=1;\n            }\n        }\n        // i不是质数的情况,枚举质数，不包括1\n        for(int j = 1;j<CNT&&i*prime[j]<=L+n;++j){\n            // 如果i不能整除prime[j],此时prime[j]是i*prime[j]的最小质因子，因为i非质数\n           if(i%prime[j]!=0){  \n               if(m==1){\n                   f[i*prime[j]]=i*prime[j];\n               }else{   //m!=1时，最最小质因数就无贡献了\n                   f[i*prime[j]]=i;\n               }\n               cnt[i*prime[j]]=1;\n           }else{ // 如果prime[j]能整除当前的i，则prime[j]也是i的最小质因子\n               cnt[i*prime[j]]=cnt[i]+1;\n               // 只有当cnt是m的倍数的时候，prime[j]才有贡献\n               if(cnt[i*prime[j]]%m==0){  \n                   f[i*prime[j]]=f[i]*prime[j];\n               }else{\n                   f[i*prime[j]]=f[i];\n               }\n               break;\n               \n           }\n        }\n    }\n}\n\nint main(){\n    memset(isprime,true,sizeof(isprime));\n    memset(cnt,1,sizeof(cnt));\n    memset(f,0,sizeof(f));\n    cin>>n>>m>>L;\n    calPrime(); //求素数\n    F();\n    for(int i = L+1;i<=L+n;++i){\n        ans+=i-f[i];\n    }\n    cout<<ans<<endl;\n}\n```\n\n## M题 [Minecraft](https://ac.nowcoder.com/acm/contest/17574/M)\n这题挺简单，毕竟人家说了时签到题，不过这个输入格式确实有点费脑。\n\n## 分析\n根据题目，差不多重点就是下面\n* 每次从房子的每根“柱子”最底下建起方块(因为不能流沙)。\n* 每次选定一个字母之后所以该字母的位置都要建方块！  \n* 最后要以最大字典序输出！  \n\n可以通过有向图和拓扑排序解决，先填充入度为0的字母，然后更新图，如果全部入度为0的都已经访问了还有入度不为0，就重建失败。  \n对于字典序问题，没有用优先队列，直接在while里面套一个for即可，并且要从字母Z遍历到A，特别注意的是，一旦找到一个字母后，要重新进行for循环，不然达不到字典序。就因为这个卡88.9%给我整吐了。\n\n``` c++\n#include<iostream>\n#include<cstring>\nusing namespace std;\n#define MAX 27     \nint t;   // 测试数\nint n,m,h;  // 长宽高\nint let[35][35][35];   // 在房子某个坐标的字母,用int存\nchar c;\ntypedef struct NODE{\n    int in=0;   // 入度\n    int out=0;  // 出度\n    int next[30000];  // 连接的下一个点，注意点的个数\n    bool isused=false;  // 记录是否已经访问过 \n    bool isExit=false;\n}NODE;\nchar ans[MAX]; // 存放答案的字母\nint  cnt=0;   // 答案中共有多少个字母\nNODE Node[MAX];    // 设置结点\nint main(){\n    //freopen(\"test/USSTM.txt\",\"r\",stdin);\n    cin>>t;\n    while(t--){\n        // 每次开始的时候记得还原\n\n        cnt=0;\n        c=0;\n        for(int i = 0;i<MAX;++i){\n            Node[i].in=0;\n            Node[i].isExit=false;\n            Node[i].isused=false;\n            Node[i].out=0;\n        }\n        cin>>n>>m>>h;\n        if(n==0||m==0||h==0){\n            cout<<\"-1\"<<endl;\n            continue;\n        }\n\n       // 输入考了一波理解\n        for(int k = h-1;k>=0;--k){\n        for(int i = 0;i<n;++i){\n            for(int j = 0;j<m;++j){\n                \n                cin>>c;\n               let[i][j][k]=(int)c-'A';\n               Node[let[i][j][k]].isExit=true;\n               \n            }\n         }\n         \n        }\n\n\n        // 开始构造图\n        for(int k = 1;k<h;++k){\n        for(int i = 0;i<n;++i){\n            for(int j = 0;j<m;++j){\n                // 如果和下面的不相等，则要生成边\n                if(let[i][j][k]!=let[i][j][k-1]){\n                    int tempU=let[i][j][k];\n                    int tempL=let[i][j][k-1];\n                    Node[tempU].in++;\n                    Node[tempL].next[Node[tempL].out++]=tempU;\n                }\n            }\n        }\n    }\n\n        bool canUsed=true;    // 记录能否找到入度为0且没有访问过的结点\n\n        while(canUsed){\n        canUsed=false;\n        // 从字母大的找起,这里就不用优先队列了\n        for(int i = 25;i>=0;--i){\n           // 本来有这个点才去判断\n           if(Node[i].isExit){\n                // 入度为0且没有访问过\n                if(Node[i].in==0&&!Node[i].isused){\n                    canUsed=true;\n                    ans[cnt++]=char(i+'A');\n                    // 更新结点状态,并更新其连接的边的状态\n                     Node[i].isused=true; \n                    for(int j = 0;j<Node[i].out;++j){\n                         Node[Node[i].next[j]].in--;\n                    }\n\n                    // 找到一个之后，一定要重新再来，不然达不到字典序\n                    break;\n                }\n           }\n        }\n\n    }\n\n        // 判断是否还有没有访问过的本来存在的点\n        bool flag=false;\n        for(int i = 25;i>=0;--i){\n           // 本来有这个点才去判断\n           if(Node[i].isExit){\n                if(!Node[i].isused){\n                    flag =true;\n                    break;\n                }\n           }\n        }\n        \n        if(flag){\n            cout<<\"-1\"<<endl;\n        }else{\n            for(int i = 0;i<cnt;++i){\n                cout<<ans[i];\n            }\n            cout<<endl;\n        }\n   \n    }\n\n}\n```\n\n","source":"_posts/USST题解报告.md","raw":"---\ntitle: USST题解报告\ndate: 2021-06-25 16:44:06\ncatagories:\n  - 题解报告\n---\n# 上海理工校赛题解报告\n\n## 小结\n数学题，不会\n\n## B题 [Bheith i ngra le](https://ac.nowcoder.com/acm/contest/17574/B)\n当初挣扎了一下，然后不会求给定i行j列的格子有多少单调曲线，就放弃了。\n\n## 分析\n* 题目的核心是是求给定i行j列的格子能够构造多少调单调曲线。可以用dp或者组合求解，不喜欢数学的我毅然投奔了dp。  \n* 不难发现，当给定了宽为i，高为j的格子矩阵的时候，我们分析右上角那块，如果这块不画，那么所有情况就会变成dp[i][j-1],如果这块画上，那么情况就会是dp[i-1][j]。则得到状态转移方程dp[i][j]=dp[i][j-1]+dp[i-1][j]。当然，边界条件还是值得考虑一下的。\n* 算出dp数组后，性高彩烈的用n<sup>3</sup>去套老鹅。其实我们确定了山顶左边位置l之后不用去确定右边的r，dp[n-l][h]就是右边包含山顶在内的全部可能。所以ans=ans+dp[l-1][h-1]*dp[n-l][h]即可。\n```c++\n#include<iostream>\nusing namespace std;\nlong long dp[2003][2003];\nlong long mod=1e9+7;\nlong long ans;\nint main(){\n\tint n,m;\n\tcin >>n>>m;\n    // 初始化高度为1时\n\tdp[1][1]=2;\n\tfor(int i = 2;i<=n;++i){\n\t\tdp[i][1]=dp[i-1][1]+1;\n\t}\n\t// 初始化宽度为1的时候\n\tfor(int j = 2;j<=m;++j){\n\t\tdp[1][j]=dp[1][j-1]+1;\n\t} \n    // 求dp，i为宽，j为高\n\tfor(int i = 2;i<=n;++i){\n\t\tfor(int j = 2;j<=m;++j){\n           dp[i][j]=(dp[i][j-1]+dp[i-1][j])%mod;\n\t\t}\n\t}\n\t\n\t// 宽度为0时答案应该为1，因为下面用的乘法\n\tfor(int j=0;j<=m;++j){\n\t\tdp[0][j]=1;\n\t} \n\n   // 高度为0时，也应该是1，即取0\n   for(int i = 0;i<=n;++i){\n\t   dp[i][0]=1;\n   }\n\t\n\t// cout<<dp[1][1]<<endl<<dp[2][1]<<endl<<dp[1][2]<<endl<<dp[2][2]<<endl<<dp[1][3]<<endl<<dp[2][3]<<endl; \n\n\t// 枚举山顶的情况,l是左边，r是右边，h是山高\n\tfor(int l = 1;l<=n;++l){\n\t\t\tfor(int h = 1;h<=m;++h){\n               ans = (ans+(dp[l-1][h-1]*dp[n-l][h])%mod)%mod;   // 是左边的情况乘以右边的情况\n\t\t\t}\n\t}\n\t\n\t// 加上山顶全为0的情况，只有一种\n\t ans=(ans+1)%mod;\n\n\tcout<<ans<<endl;\n}\n```\n\n## J题 [JXC&JESUS](https://ac.nowcoder.com/acm/contest/17574/J)\n这是一个数学题\n## 分析\n题目大概的意思是定义了一个函数  \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; <b>f(i,m)=p<sub>1</sub><sup> $\\lfloor  \\frac{a1}{m}  \\rfloor$</sup> * p<sub>2</sub><sup>a<sub>2<sub></sup> * ... * p<sub>k</sub><sup> a<sub>k</sub></sup></b>   \n其中p<sub>1</sub>,p<sub>2</sub> ...p<sub>k</sub>为i的质因数。给定参数n,m,L求  \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$\\sum\\limits_{i=L+1}^{L+n}$&nbsp;i&nbsp;-&nbsp;f(i,m)  \n这关系到i的质因数的问题，可以用线性筛求质因数。又f(i,m)只和m与其最小质因子有关，我们在线性筛的时候合数也是被其最小质因子筛掉。所以想到从线性筛的基础上进行状态转移，由小的质数推出合数的f(i,m)，从而使求答案也变成线性。另一种是求出了素数之后直接暴力，也能过。  \n根据以下算法枚举&nbsp;i&nbsp;进行计算\n* 当i是质数的时候，当m=1时，f[i]=i,否则f[i]=1。（注意：1不是质因数）  \n* 枚举质数prime[j]利用i对i*prime[j]进行推算。\n   * 当prime[j]不能整除i时，则prime[j]是i*prime[j]的最小质因子，且只有一个，cnt[i * prime[j]]&nbsp;=&nbsp;1。当m&nbsp;=&nbsp;1时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。(因为此时$\\lfloor  \\frac{a1}{m}  \\rfloor$为0)\n   * 当prime[j]能整除i时，则prime[j]也是i的最小质因子，此时cnt[i * prime[j]]&nbsp;=&nbsp;cnt[i]&nbsp;+&nbsp;1。当cnt[i * prime[j]]%m&nbsp;=0&nbsp;时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。（此时应该枚举新的i，就如线性筛那样。）  \n\n```c++\n#include <iostream>\n#include<cstring>\nusing namespace std;\n#define MAX 20000003\nint prime[MAX];   // 存素数\nbool isprime[MAX]; // 判断是否素数\nint n,m,L;\nint ans=0;   // 存放答案\nint cnt[MAX]; // 存放最小质因数的个数\nint CNT=1;\nint f[MAX];  // f存起来，因为可能提前求得\nint minp[MAX]; // 记录合数的最小质因子\n\n// 求素数\nvoid calPrime(){\n    prime[0]=1;\n    isprime[0]=isprime[1]=isprime[2]=true;\n    for(int i = 2;i<=MAX;++i){\n        if(isprime[i]){\n            prime[CNT++]=i;\n        }\n        // 将i的倍数标记为合数，合数只会被其最小质因子标记，所以很方便可求出最小质因子\n        for(int j = 1;j<CNT&&i*prime[j]<=MAX;++j){\n            isprime[i*prime[j]]=false;\n            // 如果i能够整除prime[j]，则退出\n            if(i%prime[j]==0){\n                break;\n            }\n        }\n    }\n}\n// 直接求f\nvoid  F(){\n    for(int i =2;i<=L+n;++i){\n       \n        // i是质数的情况,其最小质因数为其本身,则根据m讨论f\n        if(isprime[i]){\n            if(m==1){\n                f[i]=i;\n                cnt[i]=1;\n            }else{\n                f[i]=1;\n                cnt[i]=1;\n            }\n        }\n        // i不是质数的情况,枚举质数，不包括1\n        for(int j = 1;j<CNT&&i*prime[j]<=L+n;++j){\n            // 如果i不能整除prime[j],此时prime[j]是i*prime[j]的最小质因子，因为i非质数\n           if(i%prime[j]!=0){  \n               if(m==1){\n                   f[i*prime[j]]=i*prime[j];\n               }else{   //m!=1时，最最小质因数就无贡献了\n                   f[i*prime[j]]=i;\n               }\n               cnt[i*prime[j]]=1;\n           }else{ // 如果prime[j]能整除当前的i，则prime[j]也是i的最小质因子\n               cnt[i*prime[j]]=cnt[i]+1;\n               // 只有当cnt是m的倍数的时候，prime[j]才有贡献\n               if(cnt[i*prime[j]]%m==0){  \n                   f[i*prime[j]]=f[i]*prime[j];\n               }else{\n                   f[i*prime[j]]=f[i];\n               }\n               break;\n               \n           }\n        }\n    }\n}\n\nint main(){\n    memset(isprime,true,sizeof(isprime));\n    memset(cnt,1,sizeof(cnt));\n    memset(f,0,sizeof(f));\n    cin>>n>>m>>L;\n    calPrime(); //求素数\n    F();\n    for(int i = L+1;i<=L+n;++i){\n        ans+=i-f[i];\n    }\n    cout<<ans<<endl;\n}\n```\n\n## M题 [Minecraft](https://ac.nowcoder.com/acm/contest/17574/M)\n这题挺简单，毕竟人家说了时签到题，不过这个输入格式确实有点费脑。\n\n## 分析\n根据题目，差不多重点就是下面\n* 每次从房子的每根“柱子”最底下建起方块(因为不能流沙)。\n* 每次选定一个字母之后所以该字母的位置都要建方块！  \n* 最后要以最大字典序输出！  \n\n可以通过有向图和拓扑排序解决，先填充入度为0的字母，然后更新图，如果全部入度为0的都已经访问了还有入度不为0，就重建失败。  \n对于字典序问题，没有用优先队列，直接在while里面套一个for即可，并且要从字母Z遍历到A，特别注意的是，一旦找到一个字母后，要重新进行for循环，不然达不到字典序。就因为这个卡88.9%给我整吐了。\n\n``` c++\n#include<iostream>\n#include<cstring>\nusing namespace std;\n#define MAX 27     \nint t;   // 测试数\nint n,m,h;  // 长宽高\nint let[35][35][35];   // 在房子某个坐标的字母,用int存\nchar c;\ntypedef struct NODE{\n    int in=0;   // 入度\n    int out=0;  // 出度\n    int next[30000];  // 连接的下一个点，注意点的个数\n    bool isused=false;  // 记录是否已经访问过 \n    bool isExit=false;\n}NODE;\nchar ans[MAX]; // 存放答案的字母\nint  cnt=0;   // 答案中共有多少个字母\nNODE Node[MAX];    // 设置结点\nint main(){\n    //freopen(\"test/USSTM.txt\",\"r\",stdin);\n    cin>>t;\n    while(t--){\n        // 每次开始的时候记得还原\n\n        cnt=0;\n        c=0;\n        for(int i = 0;i<MAX;++i){\n            Node[i].in=0;\n            Node[i].isExit=false;\n            Node[i].isused=false;\n            Node[i].out=0;\n        }\n        cin>>n>>m>>h;\n        if(n==0||m==0||h==0){\n            cout<<\"-1\"<<endl;\n            continue;\n        }\n\n       // 输入考了一波理解\n        for(int k = h-1;k>=0;--k){\n        for(int i = 0;i<n;++i){\n            for(int j = 0;j<m;++j){\n                \n                cin>>c;\n               let[i][j][k]=(int)c-'A';\n               Node[let[i][j][k]].isExit=true;\n               \n            }\n         }\n         \n        }\n\n\n        // 开始构造图\n        for(int k = 1;k<h;++k){\n        for(int i = 0;i<n;++i){\n            for(int j = 0;j<m;++j){\n                // 如果和下面的不相等，则要生成边\n                if(let[i][j][k]!=let[i][j][k-1]){\n                    int tempU=let[i][j][k];\n                    int tempL=let[i][j][k-1];\n                    Node[tempU].in++;\n                    Node[tempL].next[Node[tempL].out++]=tempU;\n                }\n            }\n        }\n    }\n\n        bool canUsed=true;    // 记录能否找到入度为0且没有访问过的结点\n\n        while(canUsed){\n        canUsed=false;\n        // 从字母大的找起,这里就不用优先队列了\n        for(int i = 25;i>=0;--i){\n           // 本来有这个点才去判断\n           if(Node[i].isExit){\n                // 入度为0且没有访问过\n                if(Node[i].in==0&&!Node[i].isused){\n                    canUsed=true;\n                    ans[cnt++]=char(i+'A');\n                    // 更新结点状态,并更新其连接的边的状态\n                     Node[i].isused=true; \n                    for(int j = 0;j<Node[i].out;++j){\n                         Node[Node[i].next[j]].in--;\n                    }\n\n                    // 找到一个之后，一定要重新再来，不然达不到字典序\n                    break;\n                }\n           }\n        }\n\n    }\n\n        // 判断是否还有没有访问过的本来存在的点\n        bool flag=false;\n        for(int i = 25;i>=0;--i){\n           // 本来有这个点才去判断\n           if(Node[i].isExit){\n                if(!Node[i].isused){\n                    flag =true;\n                    break;\n                }\n           }\n        }\n        \n        if(flag){\n            cout<<\"-1\"<<endl;\n        }else{\n            for(int i = 0;i<cnt;++i){\n                cout<<ans[i];\n            }\n            cout<<endl;\n        }\n   \n    }\n\n}\n```\n\n","slug":"USST题解报告","published":1,"updated":"2021-06-25T09:34:26.497Z","_id":"ckqc39t2c0000ugtk2l3abrlu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"上海理工校赛题解报告\"><a href=\"#上海理工校赛题解报告\" class=\"headerlink\" title=\"上海理工校赛题解报告\"></a>上海理工校赛题解报告</h1><h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>数学题，不会</p>\n<h2 id=\"B题-Bheith-i-ngra-le\"><a href=\"#B题-Bheith-i-ngra-le\" class=\"headerlink\" title=\"B题 Bheith i ngra le\"></a>B题 <a href=\"https://ac.nowcoder.com/acm/contest/17574/B\">Bheith i ngra le</a></h2><p>当初挣扎了一下，然后不会求给定i行j列的格子有多少单调曲线，就放弃了。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>题目的核心是是求给定i行j列的格子能够构造多少调单调曲线。可以用dp或者组合求解，不喜欢数学的我毅然投奔了dp。  </li>\n<li>不难发现，当给定了宽为i，高为j的格子矩阵的时候，我们分析右上角那块，如果这块不画，那么所有情况就会变成dp[i][j-1],如果这块画上，那么情况就会是dp[i-1][j]。则得到状态转移方程dp[i][j]=dp[i][j-1]+dp[i-1][j]。当然，边界条件还是值得考虑一下的。</li>\n<li>算出dp数组后，性高彩烈的用n<sup>3</sup>去套老鹅。其实我们确定了山顶左边位置l之后不用去确定右边的r，dp[n-l][h]就是右边包含山顶在内的全部可能。所以ans=ans+dp[l-1][h-1]*dp[n-l][h]即可。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[<span class=\"number\">2003</span>][<span class=\"number\">2003</span>];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">\tcin &gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化高度为1时</span></span><br><span class=\"line\">\tdp[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t\tdp[i][<span class=\"number\">1</span>]=dp[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化宽度为1的时候</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>;j&lt;=m;++j)&#123;</span><br><span class=\"line\">\t\tdp[<span class=\"number\">1</span>][j]=dp[<span class=\"number\">1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">    <span class=\"comment\">// 求dp，i为宽，j为高</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>;j&lt;=m;++j)&#123;</span><br><span class=\"line\">           dp[i][j]=(dp[i][j<span class=\"number\">-1</span>]+dp[i<span class=\"number\">-1</span>][j])%mod;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 宽度为0时答案应该为1，因为下面用的乘法</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=m;++j)&#123;</span><br><span class=\"line\">\t\tdp[<span class=\"number\">0</span>][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 高度为0时，也应该是1，即取0</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t   dp[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// cout&lt;&lt;dp[1][1]&lt;&lt;endl&lt;&lt;dp[2][1]&lt;&lt;endl&lt;&lt;dp[1][2]&lt;&lt;endl&lt;&lt;dp[2][2]&lt;&lt;endl&lt;&lt;dp[1][3]&lt;&lt;endl&lt;&lt;dp[2][3]&lt;&lt;endl; </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 枚举山顶的情况,l是左边，r是右边，h是山高</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>;l&lt;=n;++l)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;h&lt;=m;++h)&#123;</span><br><span class=\"line\">               ans = (ans+(dp[l<span class=\"number\">-1</span>][h<span class=\"number\">-1</span>]*dp[n-l][h])%mod)%mod;   <span class=\"comment\">// 是左边的情况乘以右边的情况</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 加上山顶全为0的情况，只有一种</span></span><br><span class=\"line\">\t ans=(ans+<span class=\"number\">1</span>)%mod;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"J题-JXC-amp-JESUS\"><a href=\"#J题-JXC-amp-JESUS\" class=\"headerlink\" title=\"J题 JXC&amp;JESUS\"></a>J题 <a href=\"https://ac.nowcoder.com/acm/contest/17574/J\">JXC&amp;JESUS</a></h2><p>这是一个数学题</p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>题目大概的意思是定义了一个函数<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; <b>f(i,m)=p<sub>1</sub><sup> $\\lfloor  \\frac{a1}{m}  \\rfloor$</sup> * p<sub>2</sub><sup>a<sub>2<sub></sup> * … * p<sub>k</sub><sup> a<sub>k</sub></sup></b><br>其中p<sub>1</sub>,p<sub>2</sub> …p<sub>k</sub>为i的质因数。给定参数n,m,L求<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$\\sum\\limits_{i=L+1}^{L+n}$&nbsp;i&nbsp;-&nbsp;f(i,m)<br>这关系到i的质因数的问题，可以用线性筛求质因数。又f(i,m)只和m与其最小质因子有关，我们在线性筛的时候合数也是被其最小质因子筛掉。所以想到从线性筛的基础上进行状态转移，由小的质数推出合数的f(i,m)，从而使求答案也变成线性。另一种是求出了素数之后直接暴力，也能过。<br>根据以下算法枚举&nbsp;i&nbsp;进行计算</p>\n<ul>\n<li>当i是质数的时候，当m=1时，f[i]=i,否则f[i]=1。（注意：1不是质因数）  </li>\n<li>枚举质数prime[j]利用i对i*prime[j]进行推算。<ul>\n<li>当prime[j]不能整除i时，则prime[j]是i*prime[j]的最小质因子，且只有一个，cnt[i * prime[j]]&nbsp;=&nbsp;1。当m&nbsp;=&nbsp;1时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。(因为此时$\\lfloor  \\frac{a1}{m}  \\rfloor$为0)</li>\n<li>当prime[j]能整除i时，则prime[j]也是i的最小质因子，此时cnt[i * prime[j]]&nbsp;=&nbsp;cnt[i]&nbsp;+&nbsp;1。当cnt[i * prime[j]]%m&nbsp;=0&nbsp;时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。（此时应该枚举新的i，就如线性筛那样。）  </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 20000003</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> prime[MAX];   <span class=\"comment\">// 存素数</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> isprime[MAX]; <span class=\"comment\">// 判断是否素数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,L;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;   <span class=\"comment\">// 存放答案</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[MAX]; <span class=\"comment\">// 存放最小质因数的个数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> CNT=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[MAX];  <span class=\"comment\">// f存起来，因为可能提前求得</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> minp[MAX]; <span class=\"comment\">// 记录合数的最小质因子</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求素数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calPrime</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    prime[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    isprime[<span class=\"number\">0</span>]=isprime[<span class=\"number\">1</span>]=isprime[<span class=\"number\">2</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;=MAX;++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isprime[i])&#123;</span><br><span class=\"line\">            prime[CNT++]=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将i的倍数标记为合数，合数只会被其最小质因子标记，所以很方便可求出最小质因子</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;CNT&amp;&amp;i*prime[j]&lt;=MAX;++j)&#123;</span><br><span class=\"line\">            isprime[i*prime[j]]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 如果i能够整除prime[j]，则退出</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 直接求f</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>  <span class=\"title\">F</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">2</span>;i&lt;=L+n;++i)&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"comment\">// i是质数的情况,其最小质因数为其本身,则根据m讨论f</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isprime[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(m==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                f[i]=i;</span><br><span class=\"line\">                cnt[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                f[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                cnt[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// i不是质数的情况,枚举质数，不包括1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;CNT&amp;&amp;i*prime[j]&lt;=L+n;++j)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果i不能整除prime[j],此时prime[j]是i*prime[j]的最小质因子，因为i非质数</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(i%prime[j]!=<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">               <span class=\"keyword\">if</span>(m==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                   f[i*prime[j]]=i*prime[j];</span><br><span class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;   <span class=\"comment\">//m!=1时，最最小质因数就无贡献了</span></span><br><span class=\"line\">                   f[i*prime[j]]=i;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               cnt[i*prime[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">// 如果prime[j]能整除当前的i，则prime[j]也是i的最小质因子</span></span><br><span class=\"line\">               cnt[i*prime[j]]=cnt[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">               <span class=\"comment\">// 只有当cnt是m的倍数的时候，prime[j]才有贡献</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span>(cnt[i*prime[j]]%m==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">                   f[i*prime[j]]=f[i]*prime[j];</span><br><span class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                   f[i*prime[j]]=f[i];</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(isprime,<span class=\"literal\">true</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(isprime));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(cnt,<span class=\"number\">1</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(cnt));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(f,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(f));</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;L;</span><br><span class=\"line\">    <span class=\"built_in\">calPrime</span>(); <span class=\"comment\">//求素数</span></span><br><span class=\"line\">    <span class=\"built_in\">F</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = L+<span class=\"number\">1</span>;i&lt;=L+n;++i)&#123;</span><br><span class=\"line\">        ans+=i-f[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"M题-Minecraft\"><a href=\"#M题-Minecraft\" class=\"headerlink\" title=\"M题 Minecraft\"></a>M题 <a href=\"https://ac.nowcoder.com/acm/contest/17574/M\">Minecraft</a></h2><p>这题挺简单，毕竟人家说了时签到题，不过这个输入格式确实有点费脑。</p>\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>根据题目，差不多重点就是下面</p>\n<ul>\n<li>每次从房子的每根“柱子”最底下建起方块(因为不能流沙)。</li>\n<li>每次选定一个字母之后所以该字母的位置都要建方块！  </li>\n<li>最后要以最大字典序输出！  </li>\n</ul>\n<p>可以通过有向图和拓扑排序解决，先填充入度为0的字母，然后更新图，如果全部入度为0的都已经访问了还有入度不为0，就重建失败。<br>对于字典序问题，没有用优先队列，直接在while里面套一个for即可，并且要从字母Z遍历到A，特别注意的是，一旦找到一个字母后，要重新进行for循环，不然达不到字典序。就因为这个卡88.9%给我整吐了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 27     </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> t;   <span class=\"comment\">// 测试数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,h;  <span class=\"comment\">// 长宽高</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> let[<span class=\"number\">35</span>][<span class=\"number\">35</span>][<span class=\"number\">35</span>];   <span class=\"comment\">// 在房子某个坐标的字母,用int存</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NODE</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> in=<span class=\"number\">0</span>;   <span class=\"comment\">// 入度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> out=<span class=\"number\">0</span>;  <span class=\"comment\">// 出度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> next[<span class=\"number\">30000</span>];  <span class=\"comment\">// 连接的下一个点，注意点的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isused=<span class=\"literal\">false</span>;  <span class=\"comment\">// 记录是否已经访问过 </span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isExit=<span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;NODE;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ans[MAX]; <span class=\"comment\">// 存放答案的字母</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>  cnt=<span class=\"number\">0</span>;   <span class=\"comment\">// 答案中共有多少个字母</span></span><br><span class=\"line\">NODE Node[MAX];    <span class=\"comment\">// 设置结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/USSTM.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每次开始的时候记得还原</span></span><br><span class=\"line\"></span><br><span class=\"line\">        cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">        c=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;MAX;++i)&#123;</span><br><span class=\"line\">            Node[i].in=<span class=\"number\">0</span>;</span><br><span class=\"line\">            Node[i].isExit=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            Node[i].isused=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            Node[i].out=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cin&gt;&gt;n&gt;&gt;m&gt;&gt;h;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>||m==<span class=\"number\">0</span>||h==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 输入考了一波理解</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = h<span class=\"number\">-1</span>;k&gt;=<span class=\"number\">0</span>;--k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;m;++j)&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                cin&gt;&gt;c;</span><br><span class=\"line\">               let[i][j][k]=(<span class=\"keyword\">int</span>)c-<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">               Node[let[i][j][k]].isExit=<span class=\"literal\">true</span>;</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 开始构造图</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>;k&lt;h;++k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;m;++j)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果和下面的不相等，则要生成边</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(let[i][j][k]!=let[i][j][k<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tempU=let[i][j][k];</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tempL=let[i][j][k<span class=\"number\">-1</span>];</span><br><span class=\"line\">                    Node[tempU].in++;</span><br><span class=\"line\">                    Node[tempL].next[Node[tempL].out++]=tempU;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> canUsed=<span class=\"literal\">true</span>;    <span class=\"comment\">// 记录能否找到入度为0且没有访问过的结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(canUsed)&#123;</span><br><span class=\"line\">        canUsed=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从字母大的找起,这里就不用优先队列了</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">25</span>;i&gt;=<span class=\"number\">0</span>;--i)&#123;</span><br><span class=\"line\">           <span class=\"comment\">// 本来有这个点才去判断</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(Node[i].isExit)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 入度为0且没有访问过</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Node[i].in==<span class=\"number\">0</span>&amp;&amp;!Node[i].isused)&#123;</span><br><span class=\"line\">                    canUsed=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                    ans[cnt++]=<span class=\"built_in\"><span class=\"keyword\">char</span></span>(i+<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 更新结点状态,并更新其连接的边的状态</span></span><br><span class=\"line\">                     Node[i].isused=<span class=\"literal\">true</span>; </span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;Node[i].out;++j)&#123;</span><br><span class=\"line\">                         Node[Node[i].next[j]].in--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 找到一个之后，一定要重新再来，不然达不到字典序</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断是否还有没有访问过的本来存在的点</span></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">25</span>;i&gt;=<span class=\"number\">0</span>;--i)&#123;</span><br><span class=\"line\">           <span class=\"comment\">// 本来有这个点才去判断</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(Node[i].isExit)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!Node[i].isused)&#123;</span><br><span class=\"line\">                    flag =<span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;cnt;++i)&#123;</span><br><span class=\"line\">                cout&lt;&lt;ans[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"上海理工校赛题解报告\"><a href=\"#上海理工校赛题解报告\" class=\"headerlink\" title=\"上海理工校赛题解报告\"></a>上海理工校赛题解报告</h1><h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>数学题，不会</p>\n<h2 id=\"B题-Bheith-i-ngra-le\"><a href=\"#B题-Bheith-i-ngra-le\" class=\"headerlink\" title=\"B题 Bheith i ngra le\"></a>B题 <a href=\"https://ac.nowcoder.com/acm/contest/17574/B\">Bheith i ngra le</a></h2><p>当初挣扎了一下，然后不会求给定i行j列的格子有多少单调曲线，就放弃了。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>题目的核心是是求给定i行j列的格子能够构造多少调单调曲线。可以用dp或者组合求解，不喜欢数学的我毅然投奔了dp。  </li>\n<li>不难发现，当给定了宽为i，高为j的格子矩阵的时候，我们分析右上角那块，如果这块不画，那么所有情况就会变成dp[i][j-1],如果这块画上，那么情况就会是dp[i-1][j]。则得到状态转移方程dp[i][j]=dp[i][j-1]+dp[i-1][j]。当然，边界条件还是值得考虑一下的。</li>\n<li>算出dp数组后，性高彩烈的用n<sup>3</sup>去套老鹅。其实我们确定了山顶左边位置l之后不用去确定右边的r，dp[n-l][h]就是右边包含山顶在内的全部可能。所以ans=ans+dp[l-1][h-1]*dp[n-l][h]即可。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[<span class=\"number\">2003</span>][<span class=\"number\">2003</span>];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">\tcin &gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化高度为1时</span></span><br><span class=\"line\">\tdp[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t\tdp[i][<span class=\"number\">1</span>]=dp[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化宽度为1的时候</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>;j&lt;=m;++j)&#123;</span><br><span class=\"line\">\t\tdp[<span class=\"number\">1</span>][j]=dp[<span class=\"number\">1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">    <span class=\"comment\">// 求dp，i为宽，j为高</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>;j&lt;=m;++j)&#123;</span><br><span class=\"line\">           dp[i][j]=(dp[i][j<span class=\"number\">-1</span>]+dp[i<span class=\"number\">-1</span>][j])%mod;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 宽度为0时答案应该为1，因为下面用的乘法</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=m;++j)&#123;</span><br><span class=\"line\">\t\tdp[<span class=\"number\">0</span>][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 高度为0时，也应该是1，即取0</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t   dp[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// cout&lt;&lt;dp[1][1]&lt;&lt;endl&lt;&lt;dp[2][1]&lt;&lt;endl&lt;&lt;dp[1][2]&lt;&lt;endl&lt;&lt;dp[2][2]&lt;&lt;endl&lt;&lt;dp[1][3]&lt;&lt;endl&lt;&lt;dp[2][3]&lt;&lt;endl; </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 枚举山顶的情况,l是左边，r是右边，h是山高</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>;l&lt;=n;++l)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;h&lt;=m;++h)&#123;</span><br><span class=\"line\">               ans = (ans+(dp[l<span class=\"number\">-1</span>][h<span class=\"number\">-1</span>]*dp[n-l][h])%mod)%mod;   <span class=\"comment\">// 是左边的情况乘以右边的情况</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 加上山顶全为0的情况，只有一种</span></span><br><span class=\"line\">\t ans=(ans+<span class=\"number\">1</span>)%mod;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"J题-JXC-amp-JESUS\"><a href=\"#J题-JXC-amp-JESUS\" class=\"headerlink\" title=\"J题 JXC&amp;JESUS\"></a>J题 <a href=\"https://ac.nowcoder.com/acm/contest/17574/J\">JXC&amp;JESUS</a></h2><p>这是一个数学题</p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>题目大概的意思是定义了一个函数<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; <b>f(i,m)=p<sub>1</sub><sup> $\\lfloor  \\frac{a1}{m}  \\rfloor$</sup> * p<sub>2</sub><sup>a<sub>2<sub></sup> * … * p<sub>k</sub><sup> a<sub>k</sub></sup></b><br>其中p<sub>1</sub>,p<sub>2</sub> …p<sub>k</sub>为i的质因数。给定参数n,m,L求<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$\\sum\\limits_{i=L+1}^{L+n}$&nbsp;i&nbsp;-&nbsp;f(i,m)<br>这关系到i的质因数的问题，可以用线性筛求质因数。又f(i,m)只和m与其最小质因子有关，我们在线性筛的时候合数也是被其最小质因子筛掉。所以想到从线性筛的基础上进行状态转移，由小的质数推出合数的f(i,m)，从而使求答案也变成线性。另一种是求出了素数之后直接暴力，也能过。<br>根据以下算法枚举&nbsp;i&nbsp;进行计算</p>\n<ul>\n<li>当i是质数的时候，当m=1时，f[i]=i,否则f[i]=1。（注意：1不是质因数）  </li>\n<li>枚举质数prime[j]利用i对i*prime[j]进行推算。<ul>\n<li>当prime[j]不能整除i时，则prime[j]是i*prime[j]的最小质因子，且只有一个，cnt[i * prime[j]]&nbsp;=&nbsp;1。当m&nbsp;=&nbsp;1时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。(因为此时$\\lfloor  \\frac{a1}{m}  \\rfloor$为0)</li>\n<li>当prime[j]能整除i时，则prime[j]也是i的最小质因子，此时cnt[i * prime[j]]&nbsp;=&nbsp;cnt[i]&nbsp;+&nbsp;1。当cnt[i * prime[j]]%m&nbsp;=0&nbsp;时，f[i * prime[j]]&nbsp;=&nbsp;i *prime[j],否则f[i * prime[j]]&nbsp;=&nbsp;i。（此时应该枚举新的i，就如线性筛那样。）  </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 20000003</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> prime[MAX];   <span class=\"comment\">// 存素数</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> isprime[MAX]; <span class=\"comment\">// 判断是否素数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,L;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;   <span class=\"comment\">// 存放答案</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[MAX]; <span class=\"comment\">// 存放最小质因数的个数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> CNT=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[MAX];  <span class=\"comment\">// f存起来，因为可能提前求得</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> minp[MAX]; <span class=\"comment\">// 记录合数的最小质因子</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求素数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calPrime</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    prime[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    isprime[<span class=\"number\">0</span>]=isprime[<span class=\"number\">1</span>]=isprime[<span class=\"number\">2</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;=MAX;++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isprime[i])&#123;</span><br><span class=\"line\">            prime[CNT++]=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将i的倍数标记为合数，合数只会被其最小质因子标记，所以很方便可求出最小质因子</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;CNT&amp;&amp;i*prime[j]&lt;=MAX;++j)&#123;</span><br><span class=\"line\">            isprime[i*prime[j]]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 如果i能够整除prime[j]，则退出</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 直接求f</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>  <span class=\"title\">F</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">2</span>;i&lt;=L+n;++i)&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"comment\">// i是质数的情况,其最小质因数为其本身,则根据m讨论f</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isprime[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(m==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                f[i]=i;</span><br><span class=\"line\">                cnt[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                f[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                cnt[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// i不是质数的情况,枚举质数，不包括1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;CNT&amp;&amp;i*prime[j]&lt;=L+n;++j)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果i不能整除prime[j],此时prime[j]是i*prime[j]的最小质因子，因为i非质数</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(i%prime[j]!=<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">               <span class=\"keyword\">if</span>(m==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                   f[i*prime[j]]=i*prime[j];</span><br><span class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;   <span class=\"comment\">//m!=1时，最最小质因数就无贡献了</span></span><br><span class=\"line\">                   f[i*prime[j]]=i;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               cnt[i*prime[j]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">// 如果prime[j]能整除当前的i，则prime[j]也是i的最小质因子</span></span><br><span class=\"line\">               cnt[i*prime[j]]=cnt[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">               <span class=\"comment\">// 只有当cnt是m的倍数的时候，prime[j]才有贡献</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span>(cnt[i*prime[j]]%m==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">                   f[i*prime[j]]=f[i]*prime[j];</span><br><span class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                   f[i*prime[j]]=f[i];</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(isprime,<span class=\"literal\">true</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(isprime));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(cnt,<span class=\"number\">1</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(cnt));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(f,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(f));</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;L;</span><br><span class=\"line\">    <span class=\"built_in\">calPrime</span>(); <span class=\"comment\">//求素数</span></span><br><span class=\"line\">    <span class=\"built_in\">F</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = L+<span class=\"number\">1</span>;i&lt;=L+n;++i)&#123;</span><br><span class=\"line\">        ans+=i-f[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"M题-Minecraft\"><a href=\"#M题-Minecraft\" class=\"headerlink\" title=\"M题 Minecraft\"></a>M题 <a href=\"https://ac.nowcoder.com/acm/contest/17574/M\">Minecraft</a></h2><p>这题挺简单，毕竟人家说了时签到题，不过这个输入格式确实有点费脑。</p>\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>根据题目，差不多重点就是下面</p>\n<ul>\n<li>每次从房子的每根“柱子”最底下建起方块(因为不能流沙)。</li>\n<li>每次选定一个字母之后所以该字母的位置都要建方块！  </li>\n<li>最后要以最大字典序输出！  </li>\n</ul>\n<p>可以通过有向图和拓扑排序解决，先填充入度为0的字母，然后更新图，如果全部入度为0的都已经访问了还有入度不为0，就重建失败。<br>对于字典序问题，没有用优先队列，直接在while里面套一个for即可，并且要从字母Z遍历到A，特别注意的是，一旦找到一个字母后，要重新进行for循环，不然达不到字典序。就因为这个卡88.9%给我整吐了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 27     </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> t;   <span class=\"comment\">// 测试数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,h;  <span class=\"comment\">// 长宽高</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> let[<span class=\"number\">35</span>][<span class=\"number\">35</span>][<span class=\"number\">35</span>];   <span class=\"comment\">// 在房子某个坐标的字母,用int存</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NODE</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> in=<span class=\"number\">0</span>;   <span class=\"comment\">// 入度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> out=<span class=\"number\">0</span>;  <span class=\"comment\">// 出度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> next[<span class=\"number\">30000</span>];  <span class=\"comment\">// 连接的下一个点，注意点的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isused=<span class=\"literal\">false</span>;  <span class=\"comment\">// 记录是否已经访问过 </span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isExit=<span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;NODE;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ans[MAX]; <span class=\"comment\">// 存放答案的字母</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>  cnt=<span class=\"number\">0</span>;   <span class=\"comment\">// 答案中共有多少个字母</span></span><br><span class=\"line\">NODE Node[MAX];    <span class=\"comment\">// 设置结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(&quot;test/USSTM.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每次开始的时候记得还原</span></span><br><span class=\"line\"></span><br><span class=\"line\">        cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">        c=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;MAX;++i)&#123;</span><br><span class=\"line\">            Node[i].in=<span class=\"number\">0</span>;</span><br><span class=\"line\">            Node[i].isExit=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            Node[i].isused=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            Node[i].out=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cin&gt;&gt;n&gt;&gt;m&gt;&gt;h;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>||m==<span class=\"number\">0</span>||h==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 输入考了一波理解</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = h<span class=\"number\">-1</span>;k&gt;=<span class=\"number\">0</span>;--k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;m;++j)&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                cin&gt;&gt;c;</span><br><span class=\"line\">               let[i][j][k]=(<span class=\"keyword\">int</span>)c-<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">               Node[let[i][j][k]].isExit=<span class=\"literal\">true</span>;</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 开始构造图</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>;k&lt;h;++k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;m;++j)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果和下面的不相等，则要生成边</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(let[i][j][k]!=let[i][j][k<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tempU=let[i][j][k];</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tempL=let[i][j][k<span class=\"number\">-1</span>];</span><br><span class=\"line\">                    Node[tempU].in++;</span><br><span class=\"line\">                    Node[tempL].next[Node[tempL].out++]=tempU;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> canUsed=<span class=\"literal\">true</span>;    <span class=\"comment\">// 记录能否找到入度为0且没有访问过的结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(canUsed)&#123;</span><br><span class=\"line\">        canUsed=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从字母大的找起,这里就不用优先队列了</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">25</span>;i&gt;=<span class=\"number\">0</span>;--i)&#123;</span><br><span class=\"line\">           <span class=\"comment\">// 本来有这个点才去判断</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(Node[i].isExit)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 入度为0且没有访问过</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Node[i].in==<span class=\"number\">0</span>&amp;&amp;!Node[i].isused)&#123;</span><br><span class=\"line\">                    canUsed=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                    ans[cnt++]=<span class=\"built_in\"><span class=\"keyword\">char</span></span>(i+<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 更新结点状态,并更新其连接的边的状态</span></span><br><span class=\"line\">                     Node[i].isused=<span class=\"literal\">true</span>; </span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;Node[i].out;++j)&#123;</span><br><span class=\"line\">                         Node[Node[i].next[j]].in--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 找到一个之后，一定要重新再来，不然达不到字典序</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断是否还有没有访问过的本来存在的点</span></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">25</span>;i&gt;=<span class=\"number\">0</span>;--i)&#123;</span><br><span class=\"line\">           <span class=\"comment\">// 本来有这个点才去判断</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(Node[i].isExit)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!Node[i].isused)&#123;</span><br><span class=\"line\">                    flag =<span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;cnt;++i)&#123;</span><br><span class=\"line\">                cout&lt;&lt;ans[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[{"_id":"source/_posts/Postons/Potions(Hard_version).png","slug":"Potions(Hard_version).png","post":"ckpp77ova0000u8tkhdr22q6g","modified":0,"renderable":0},{"_id":"source/_posts/数据备份/backUp.png","slug":"backUp.png","post":"ckps1ze7u0000c0tkgsyfbk0y","modified":0,"renderable":0},{"_id":"source/_posts/BestCowFences/BestCowFence.png","slug":"BestCowFence.png","post":"ckpun1mbr0000xktk8n1z1mld","modified":0,"renderable":0},{"_id":"source/_posts/MaxMedian/MaxMedian.png","slug":"MaxMedian.png","post":"ckpupip0m0000uctk8c7s0zz9","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckpp77ovf0002u8tk0ghb1f6y","category_id":"ckpp77ovl0008u8tk7l7i9gxo","_id":"ckpp77ovo000eu8tkhnexdcn7"},{"post_id":"ckpp77ovm000au8tkc3sf0c91","category_id":"ckpp77ovo000du8tka0zwc1yv","_id":"ckpp77ovp000ju8tk1zzl9grn"},{"post_id":"ckpp77ova0000u8tkhdr22q6g","category_id":"ckps1ze7w0001c0tk6mwz8e1i","_id":"ckps1ze810005c0tk621g35ws"},{"post_id":"ckps1ze7u0000c0tkgsyfbk0y","category_id":"ckps1ze810003c0tkgv6mc40e","_id":"ckps1ze820006c0tkbosb91r0"},{"post_id":"ckpupip0m0000uctk8c7s0zz9","category_id":"ckps1ze7w0001c0tk6mwz8e1i","_id":"ckpupip0q0003uctkauyzhdlg"},{"post_id":"ckpun1mbr0000xktk8n1z1mld","category_id":"ckps1ze7w0001c0tk6mwz8e1i","_id":"ckpupip0s0005uctkd8tkbqly"}],"PostTag":[{"post_id":"ckpp77ova0000u8tkhdr22q6g","tag_id":"ckpp77ovi0004u8tk1wjkfb14","_id":"ckpp77ovp000gu8tk8ked6jco"},{"post_id":"ckpp77ova0000u8tkhdr22q6g","tag_id":"ckpp77ovl0009u8tk24dx2d6s","_id":"ckpp77ovp000hu8tkfo3dar5l"},{"post_id":"ckpp77ova0000u8tkhdr22q6g","tag_id":"ckpp77ovn000cu8tkbv43fe7d","_id":"ckpp77ovp000ku8tkgexvbukv"},{"post_id":"ckpp77ovf0002u8tk0ghb1f6y","tag_id":"ckpp77ovo000fu8tk6ehj2pw5","_id":"ckpp77ovp000lu8tkhgizgm2y"},{"post_id":"ckpp77ovi0005u8tkdad5eag9","tag_id":"ckpp77ovp000iu8tk43q45eju","_id":"ckpp77ovr000nu8tk4e8tbunu"},{"post_id":"ckpp77ovj0006u8tk6gjdencj","tag_id":"ckpp77ovo000fu8tk6ehj2pw5","_id":"ckpp77ovs000ru8tkfp884a20"},{"post_id":"ckpp77ovj0006u8tk6gjdencj","tag_id":"ckpp77ovr000ou8tk04x83yjr","_id":"ckpp77ovs000su8tk0hgz61xz"},{"post_id":"ckpp77ovj0006u8tk6gjdencj","tag_id":"ckpp77ovr000pu8tk138v29ny","_id":"ckpp77ovs000uu8tkd8889g6x"},{"post_id":"ckpp77ovm000au8tkc3sf0c91","tag_id":"ckpp77ovs000vu8tk897w4xn1","_id":"ckpp77ovt000yu8tke02rbgd0"},{"post_id":"ckps1ze7u0000c0tkgsyfbk0y","tag_id":"ckps1ze800002c0tk5vk63n5o","_id":"ckps1ze810004c0tk1ltd9tcm"},{"post_id":"ckpun1mbr0000xktk8n1z1mld","tag_id":"ckpun1mbx0002xktk83sy5osg","_id":"ckpun1mbz0006xktk6zyl8ajm"},{"post_id":"ckpun1mbr0000xktk8n1z1mld","tag_id":"ckpun1mbx0003xktkfal53f1l","_id":"ckpun1mbz0007xktk0ah04g70"},{"post_id":"ckpun1mbr0000xktk8n1z1mld","tag_id":"ckpun1mby0005xktkchx4bcu9","_id":"ckpun1mbz0008xktk30adh1cd"},{"post_id":"ckpupip0m0000uctk8c7s0zz9","tag_id":"ckpun1mbx0002xktk83sy5osg","_id":"ckpupip0p0001uctkbzp77srp"},{"post_id":"ckpupip0m0000uctk8c7s0zz9","tag_id":"ckpun1mbx0003xktkfal53f1l","_id":"ckpupip0p0002uctk2dao1rvl"},{"post_id":"ckpupip0m0000uctk8c7s0zz9","tag_id":"ckpun1mby0005xktkchx4bcu9","_id":"ckpupip0q0004uctke6fzguq7"}],"Tag":[{"name":"反悔","_id":"ckpp77ovi0004u8tk1wjkfb14"},{"name":"贪心","_id":"ckpp77ovl0009u8tk24dx2d6s"},{"name":"优先队列","_id":"ckpp77ovn000cu8tkbv43fe7d"},{"name":"JAVA","_id":"ckpp77ovo000fu8tk6ehj2pw5"},{"name":"动态规划","_id":"ckpp77ovp000iu8tk43q45eju"},{"name":"SptingBoot","_id":"ckpp77ovr000ou8tk04x83yjr"},{"name":"数据库","_id":"ckpp77ovr000pu8tk138v29ny"},{"name":"数学","_id":"ckpp77ovs000qu8tkbnsy296n"},{"name":"队列","_id":"ckpp77ovs000tu8tk3wvx9cau"},{"name":"-分治法","_id":"ckpp77ovs000vu8tk897w4xn1"},{"name":"-贪心 -反悔 -优先队列","_id":"ckps1ze800002c0tk5vk63n5o"},{"name":"限定长度最大子段和","_id":"ckpun1mbx0002xktk83sy5osg"},{"name":"思维","_id":"ckpun1mbx0003xktkfal53f1l"},{"name":"二分答案","_id":"ckpun1mby0005xktkchx4bcu9"}]}}